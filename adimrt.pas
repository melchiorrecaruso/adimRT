{
  ADimRT library built on 30-9-24.

  Number of base units: 161
  Number of factored units: 118
  Number of operators: 0 (0 external, 0 internal)
}

unit ADimRT;

{$H+}{$J-}
{$modeswitch typehelpers}
{$modeswitch advancedrecords}
{$WARN 5024 OFF} // Suppress warning for unused routine parameter.
{$WARN 5033 OFF} // Suppress warning for unassigned function's return value.
{$MACRO ON}

interface

uses
  DateUtils, Sysutils;

const
  uScalar = 0;
  uSecond = 1;
  uSquareSecond = 2;
  uCubicSecond = 3;
  uQuarticSecond = 4;
  uQuinticSecond = 5;
  uSexticSecond = 6;
  uMeter = 7;
  uSquareRootMeter = 8;
  uSquareMeter = 9;
  uCubicMeter = 10;
  uQuarticMeter = 11;
  uQuinticMeter = 12;
  uSexticMeter = 13;
  uKilogram = 14;
  uSquareKilogram = 15;
  uAmpere = 16;
  uSquareAmpere = 17;
  uKelvin = 18;
  uSquareKelvin = 19;
  uCubicKelvin = 20;
  uQuarticKelvin = 21;
  uMole = 22;
  uCandela = 23;
  uRadian = 24;
  uSteradian = 25;
  uHertz = 26;
  uSquareHertz = 27;
  uSteradianPerSquareSecond = 28;
  uMeterPerSecond = 29;
  uMeterPerSquareSecond = 30;
  uMeterPerCubicSecond = 31;
  uMeterPerQuarticSecond = 32;
  uMeterPerQuinticSecond = 33;
  uMeterPerSexticSecond = 34;
  uSquareMeterPerSquareSecond = 35;
  uMeterSecond = 36;
  uKilogramMeter = 37;
  uKilogramPerSecond = 38;
  uKilogramMeterPerSecond = 39;
  uSquareKilogramSquareMeterPerSquareSecond = 40;
  uReciprocalSquareRootMeter = 41;
  uReciprocalMeter = 42;
  uReciprocalSquareRootCubicMeter = 43;
  uReciprocalSquareMeter = 44;
  uReciprocalCubicMeter = 45;
  uReciprocalQuarticMeter = 46;
  uKilogramSquareMeter = 47;
  uKilogramSquareMeterPerSecond = 48;
  uSecondPerMeter = 49;
  uKilogramPerMeter = 50;
  uKilogramPerSquareMeter = 51;
  uKilogramPerCubicMeter = 52;
  uNewton = 53;
  uNewtonRadian = 54;
  uSquareNewton = 55;
  uPascal = 56;
  uJoule = 57;
  uJoulePerRadian = 58;
  uWatt = 59;
  uCoulomb = 60;
  uSquareCoulomb = 61;
  uCoulombMeter = 62;
  uVolt = 63;
  uSquareVolt = 64;
  uFarad = 65;
  uOhm = 66;
  uSiemens = 67;
  uSiemensPerMeter = 68;
  uTesla = 69;
  uWeber = 70;
  uHenry = 71;
  uReciprocalHenry = 72;
  uLumen = 73;
  uLumenSecond = 74;
  uLumenSecondPerCubicMeter = 75;
  uLux = 76;
  uLuxSecond = 77;
  uKatal = 78;
  uNewtonPerCubicMeter = 79;
  uNewtonPerMeter = 80;
  uCubicMeterPerSecond = 81;
  uPoiseuille = 82;
  uSquareMeterPerSecond = 83;
  uKilogramPerQuarticMeter = 84;
  uQuarticMeterSecond = 85;
  uKilogramPerQuarticMeterPerSecond = 86;
  uCubicMeterPerKilogram = 87;
  uKilogramSquareSecond = 88;
  uCubicMeterPerSquareSecond = 89;
  uNewtonSquareMeter = 90;
  uNewtonCubicMeter = 91;
  uNewtonPerSquareKilogram = 92;
  uSquareKilogramPerMeter = 93;
  uSquareKilogramPerSquareMeter = 94;
  uSquareMeterPerSquareKilogram = 95;
  uNewtonSquareMeterPerSquareKilogram = 96;
  uReciprocalKelvin = 97;
  uKilogramKelvin = 98;
  uJoulePerKelvin = 99;
  uJoulePerKilogramPerKelvin = 100;
  uMeterKelvin = 101;
  uKelvinPerMeter = 102;
  uWattPerMeter = 103;
  uWattPerSquareMeter = 104;
  uWattPerCubicMeter = 105;
  uWattPerKelvin = 106;
  uWattPerMeterPerKelvin = 107;
  uKelvinPerWatt = 108;
  uMeterPerWatt = 109;
  uMeterKelvinPerWatt = 110;
  uSquareMeterKelvin = 111;
  uWattPerSquareMeterPerKelvin = 112;
  uSquareMeterQuarticKelvin = 113;
  uWattPerQuarticKelvin = 114;
  uWattPerSquareMeterPerQuarticKelvin = 115;
  uJoulePerMole = 116;
  uMoleKelvin = 117;
  uJoulePerMolePerKelvin = 118;
  uOhmMeter = 119;
  uVoltPerMeter = 120;
  uCoulombPerMeter = 121;
  uSquareCoulombPerMeter = 122;
  uCoulombPerSquareMeter = 123;
  uSquareMeterPerSquareCoulomb = 124;
  uNewtonPerSquareCoulomb = 125;
  uNewtonSquareMeterPerSquareCoulomb = 126;
  uVoltMeter = 127;
  uVoltMeterPerSecond = 128;
  uFaradPerMeter = 129;
  uAmperePerMeter = 130;
  uMeterPerAmpere = 131;
  uTeslaMeter = 132;
  uTeslaPerAmpere = 133;
  uHenryPerMeter = 134;
  uRadianPerMeter = 135;
  uSquareKilogramPerSquareSecond = 136;
  uSquareSecondPerSquareMeter = 137;
  uSquareJoule = 138;
  uSquareJouleSquareSecond = 139;
  uCoulombPerKilogram = 140;
  uSquareMeterAmpere = 141;
  uLumenPerWatt = 142;
  uReciprocalMole = 143;
  uAmperePerSquareMeter = 144;
  uMolePerCubicMeter = 145;
  uCandelaPerSquareMeter = 146;
  uCoulombPerCubicMeter = 147;
  uGrayPerSecond = 148;
  uSteradianHertz = 149;
  uMeterSteradian = 150;
  uSquareMeterSteradian = 151;
  uCubicMeterSteradian = 152;
  uSquareMeterSteradianHertz = 153;
  uWattPerSteradian = 154;
  uWattPerSteradianPerHertz = 155;
  uWattPerMeterPerSteradian = 156;
  uWattPerSquareMeterPerSteradian = 157;
  uWattPerCubicMeterPerSteradian = 158;
  uWattPerSquareMeterPerSteradianPerHertz = 159;
  uKatalPerCubicMeter = 160;
  uCoulombPerMole = 161;
type

  { Prefix }

  TPrefix = (pQuetta, pRonna, pYotta, pZetta, pExa, pPeta, pTera, pGiga, pMega, pKilo, pHecto, pDeca,
    pNone, pDeci, pCenti, pMilli, pMicro, pNano, pPico, pFemto, pAtto, pZepto, pYocto, pRonto, pQuecto);

  { Prefixes }

  TPrefixes = array of TPrefix;

  { Exponents }

  TExponents = array of longint;

{ TQuantity }

type
  {$IFOPT D+}
  TQuantity = record
  private
    FUnitOfMeasurement: longint;
    FValue: double;
  public
    class operator Copy(constref ASrc: TQuantity; var ADst: TQuantity); inline;
    class operator +(const ALeft, ARight: TQuantity): TQuantity; inline;
    class operator -(const ALeft, ARight: TQuantity): TQuantity; inline;
    class operator *(const ALeft, ARight: TQuantity): TQuantity; inline;
    class operator /(const ALeft, ARight: TQuantity): TQuantity; inline;
    class operator *(const ALeft: double; const ARight: TQuantity): TQuantity; inline;
    class operator *(const ALeft: TQuantity; const ARight: double): TQuantity; inline;
    class operator /(const ALeft: TQuantity; const ARight: double): TQuantity; inline;
  end;
  {$ELSE}
  TQuantity = double;
  {$ENDIF}

type
  TSecondUnit = record
    class operator *(const AValue: double; const ASelf: TSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSecondSymbol     = '%ss';
  rsSecondName       = '%ssecond';
  rsSecondPluralName = '%sseconds';

const
  cSecondPrefixes  : TPrefixes  = (pNone);
  cSecondExponents : TExponents = (1);

var
  s          : TSecondUnit;

const
  ds         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSecond; FValue: 1E-01); {$ELSE} 1E-01; {$ENDIF}
  cs         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSecond; FValue: 1E-02); {$ELSE} 1E-02; {$ENDIF}
  ms         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSecond; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  mis        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSecond; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  ns         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSecond; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}
  ps         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSecond; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}

type
  TDayUnit = record
    class operator *(const AValue: double; const ASelf: TDayUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TDayUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsDaySymbol     = 'd';
  rsDayName       = 'day';
  rsDayPluralName = 'days';

const
  cDayPrefixes  : TPrefixes  = ();
  cDayExponents : TExponents = ();

const
  day        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSecond; FValue: 86400); {$ELSE} 86400; {$ENDIF}

type
  THourUnit = record
    class operator *(const AValue: double; const ASelf: THourUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: THourUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsHourSymbol     = 'h';
  rsHourName       = 'hour';
  rsHourPluralName = 'hours';

const
  cHourPrefixes  : TPrefixes  = ();
  cHourExponents : TExponents = ();

const
  hr         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSecond; FValue: 3600); {$ELSE} 3600; {$ENDIF}

type
  TMinuteUnit = record
    class operator *(const AValue: double; const ASelf: TMinuteUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMinuteUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMinuteSymbol     = 'min';
  rsMinuteName       = 'minute';
  rsMinutePluralName = 'minutes';

const
  cMinutePrefixes  : TPrefixes  = ();
  cMinuteExponents : TExponents = ();

const
  minute     : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSecond; FValue: 60); {$ELSE} 60; {$ENDIF}

type
  TSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareSecondSymbol     = '%ss2';
  rsSquareSecondName       = 'square %ssecond';
  rsSquareSecondPluralName = 'square %sseconds';

const
  cSquareSecondPrefixes  : TPrefixes  = (pNone);
  cSquareSecondExponents : TExponents = (2);

var
  s2         : TSquareSecondUnit;

const
  ds2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareSecond; FValue: 1E-02); {$ELSE} 1E-02; {$ENDIF}
  cs2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareSecond; FValue: 1E-04); {$ELSE} 1E-04; {$ENDIF}
  ms2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareSecond; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  mis2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareSecond; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}
  ns2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareSecond; FValue: 1E-18); {$ELSE} 1E-18; {$ENDIF}
  ps2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareSecond; FValue: 1E-24); {$ELSE} 1E-24; {$ENDIF}

type
  TSquareDayUnit = record
    class operator *(const AValue: double; const ASelf: TSquareDayUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareDayUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareDaySymbol     = 'd2';
  rsSquareDayName       = 'square day';
  rsSquareDayPluralName = 'square days';

const
  cSquareDayPrefixes  : TPrefixes  = ();
  cSquareDayExponents : TExponents = ();

const
  day2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareSecond; FValue: 7464960000); {$ELSE} 7464960000; {$ENDIF}

type
  TSquareHourUnit = record
    class operator *(const AValue: double; const ASelf: TSquareHourUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareHourUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareHourSymbol     = 'h2';
  rsSquareHourName       = 'square hour';
  rsSquareHourPluralName = 'square hours';

const
  cSquareHourPrefixes  : TPrefixes  = ();
  cSquareHourExponents : TExponents = ();

const
  hr2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareSecond; FValue: 12960000); {$ELSE} 12960000; {$ENDIF}

type
  TSquareMinuteUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMinuteUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMinuteUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMinuteSymbol     = 'min2';
  rsSquareMinuteName       = 'square minute';
  rsSquareMinutePluralName = 'square minutes';

const
  cSquareMinutePrefixes  : TPrefixes  = ();
  cSquareMinuteExponents : TExponents = ();

const
  minute2    : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareSecond; FValue: 3600); {$ELSE} 3600; {$ENDIF}

type
  TCubicSecondUnit = record
    class operator *(const AValue: double; const ASelf: TCubicSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCubicSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCubicSecondSymbol     = '%ss3';
  rsCubicSecondName       = 'cubic %ssecond';
  rsCubicSecondPluralName = 'cubic %sseconds';

const
  cCubicSecondPrefixes  : TPrefixes  = (pNone);
  cCubicSecondExponents : TExponents = (3);

var
  s3         : TCubicSecondUnit;

const
  ds3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicSecond; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  cs3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicSecond; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  ms3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicSecond; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}
  mis3       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicSecond; FValue: 1E-18); {$ELSE} 1E-18; {$ENDIF}
  ns3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicSecond; FValue: 1E-27); {$ELSE} 1E-27; {$ENDIF}
  ps3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicSecond; FValue: 1E-36); {$ELSE} 1E-36; {$ENDIF}

type
  TQuarticSecondUnit = record
    class operator *(const AValue: double; const ASelf: TQuarticSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TQuarticSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsQuarticSecondSymbol     = '%ss4';
  rsQuarticSecondName       = 'quartic %ssecond';
  rsQuarticSecondPluralName = 'quartic %sseconds';

const
  cQuarticSecondPrefixes  : TPrefixes  = (pNone);
  cQuarticSecondExponents : TExponents = (4);

var
  s4         : TQuarticSecondUnit;

const
  ds4        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticSecond; FValue: 1E-04); {$ELSE} 1E-04; {$ENDIF}
  cs4        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticSecond; FValue: 1E-08); {$ELSE} 1E-08; {$ENDIF}
  ms4        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticSecond; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}
  mis4       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticSecond; FValue: 1E-24); {$ELSE} 1E-24; {$ENDIF}
  ns4        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticSecond; FValue: 1E-36); {$ELSE} 1E-36; {$ENDIF}
  ps4        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticSecond; FValue: 1E-48); {$ELSE} 1E-48; {$ENDIF}

type
  TQuinticSecondUnit = record
    class operator *(const AValue: double; const ASelf: TQuinticSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TQuinticSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsQuinticSecondSymbol     = '%ss5';
  rsQuinticSecondName       = 'quintic %ssecond';
  rsQuinticSecondPluralName = 'quintic %sseconds';

const
  cQuinticSecondPrefixes  : TPrefixes  = (pNone);
  cQuinticSecondExponents : TExponents = (5);

var
  s5         : TQuinticSecondUnit;

const
  ds5        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticSecond; FValue: 1E-05); {$ELSE} 1E-05; {$ENDIF}
  cs5        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticSecond; FValue: 1E-10); {$ELSE} 1E-10; {$ENDIF}
  ms5        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticSecond; FValue: 1E-15); {$ELSE} 1E-15; {$ENDIF}
  mis5       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticSecond; FValue: 1E-30); {$ELSE} 1E-30; {$ENDIF}
  ns5        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticSecond; FValue: 1E-45); {$ELSE} 1E-45; {$ENDIF}
  ps5        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticSecond; FValue: 1E-60); {$ELSE} 1E-60; {$ENDIF}

type
  TSexticSecondUnit = record
    class operator *(const AValue: double; const ASelf: TSexticSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSexticSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSexticSecondSymbol     = '%ss6';
  rsSexticSecondName       = 'sextic %ssecond';
  rsSexticSecondPluralName = 'sextic %sseconds';

const
  cSexticSecondPrefixes  : TPrefixes  = (pNone);
  cSexticSecondExponents : TExponents = (6);

var
  s6         : TSexticSecondUnit;

const
  ds6        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticSecond; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  cs6        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticSecond; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}
  ms6        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticSecond; FValue: 1E-18); {$ELSE} 1E-18; {$ENDIF}
  mis6       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticSecond; FValue: 1E-36); {$ELSE} 1E-36; {$ENDIF}
  ns6        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticSecond; FValue: 1E-54); {$ELSE} 1E-54; {$ENDIF}
  ps6        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticSecond; FValue: 1E-72); {$ELSE} 1E-72; {$ENDIF}

type
  TMeterUnit = record
    class operator *(const AValue: double; const ASelf: TMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterSymbol     = '%sm';
  rsMeterName       = '%smeter';
  rsMeterPluralName = '%smeters';

const
  cMeterPrefixes  : TPrefixes  = (pNone);
  cMeterExponents : TExponents = (1);

var
  m          : TMeterUnit;

const
  km         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}
  dm         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 1E-01); {$ELSE} 1E-01; {$ENDIF}
  cm         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 1E-02); {$ELSE} 1E-02; {$ENDIF}
  mm         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  mim        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  nm         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}
  pm         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}

type
  TAstronomicalUnit = record
    class operator *(const AValue: double; const ASelf: TAstronomicalUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TAstronomicalUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsAstronomicalSymbol     = 'au';
  rsAstronomicalName       = 'astronomical unit';
  rsAstronomicalPluralName = 'astronomical units';

const
  cAstronomicalPrefixes  : TPrefixes  = ();
  cAstronomicalExponents : TExponents = ();

const
  au         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 149597870691); {$ELSE} 149597870691; {$ENDIF}

type
  TInchUnit = record
    class operator *(const AValue: double; const ASelf: TInchUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TInchUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsInchSymbol     = 'in';
  rsInchName       = 'inch';
  rsInchPluralName = 'inches';

const
  cInchPrefixes  : TPrefixes  = ();
  cInchExponents : TExponents = ();

const
  inch       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 0.0254); {$ELSE} 0.0254; {$ENDIF}

type
  TFootUnit = record
    class operator *(const AValue: double; const ASelf: TFootUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TFootUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsFootSymbol     = 'ft';
  rsFootName       = 'foot';
  rsFootPluralName = 'feet';

const
  cFootPrefixes  : TPrefixes  = ();
  cFootExponents : TExponents = ();

const
  ft         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 0.3048); {$ELSE} 0.3048; {$ENDIF}

type
  TYardUnit = record
    class operator *(const AValue: double; const ASelf: TYardUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TYardUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsYardSymbol     = 'yd';
  rsYardName       = 'yard';
  rsYardPluralName = 'yards';

const
  cYardPrefixes  : TPrefixes  = ();
  cYardExponents : TExponents = ();

const
  yd         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 0.9144); {$ELSE} 0.9144; {$ENDIF}

type
  TMileUnit = record
    class operator *(const AValue: double; const ASelf: TMileUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMileUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMileSymbol     = 'mi';
  rsMileName       = 'mile';
  rsMilePluralName = 'miles';

const
  cMilePrefixes  : TPrefixes  = ();
  cMileExponents : TExponents = ();

const
  mi         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 1609.344); {$ELSE} 1609.344; {$ENDIF}

type
  TNauticalMileUnit = record
    class operator *(const AValue: double; const ASelf: TNauticalMileUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNauticalMileUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNauticalMileSymbol     = 'nmi';
  rsNauticalMileName       = 'nautical mile';
  rsNauticalMilePluralName = 'nautical miles';

const
  cNauticalMilePrefixes  : TPrefixes  = ();
  cNauticalMileExponents : TExponents = ();

const
  nmi        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 1852); {$ELSE} 1852; {$ENDIF}

type
  TAngstromUnit = record
    class operator *(const AValue: double; const ASelf: TAngstromUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TAngstromUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsAngstromSymbol     = '%sÅ';
  rsAngstromName       = '%sangstrom';
  rsAngstromPluralName = '%sangstroms';

const
  cAngstromPrefixes  : TPrefixes  = (pNone);
  cAngstromExponents : TExponents = (1);

const
  angstrom   : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMeter; FValue: 1E-10); {$ELSE} 1E-10; {$ENDIF}

type
  TSquareRootMeterUnit = record
    class operator *(const AValue: double; const ASelf: TSquareRootMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareRootMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareRootMeterSymbol     = '√%sm';
  rsSquareRootMeterName       = 'square root %smeter';
  rsSquareRootMeterPluralName = 'square root %smeters';

const
  cSquareRootMeterPrefixes  : TPrefixes  = (pNone);
  cSquareRootMeterExponents : TExponents = (1);

type
  TSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMeterSymbol     = '%sm2';
  rsSquareMeterName       = 'square %smeter';
  rsSquareMeterPluralName = 'square %smeters';

const
  cSquareMeterPrefixes  : TPrefixes  = (pNone);
  cSquareMeterExponents : TExponents = (2);

var
  m2         : TSquareMeterUnit;

const
  km2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeter; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}
  dm2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeter; FValue: 1E-02); {$ELSE} 1E-02; {$ENDIF}
  cm2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeter; FValue: 1E-04); {$ELSE} 1E-04; {$ENDIF}
  mm2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeter; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  mim2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeter; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}
  nm2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeter; FValue: 1E-18); {$ELSE} 1E-18; {$ENDIF}
  pm2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeter; FValue: 1E-24); {$ELSE} 1E-24; {$ENDIF}

type
  TSquareInchUnit = record
    class operator *(const AValue: double; const ASelf: TSquareInchUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareInchUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareInchSymbol     = 'in2';
  rsSquareInchName       = 'square inch';
  rsSquareInchPluralName = 'square inches';

const
  cSquareInchPrefixes  : TPrefixes  = ();
  cSquareInchExponents : TExponents = ();

const
  inch2      : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeter; FValue: 0.00064516); {$ELSE} 0.00064516; {$ENDIF}

type
  TSquareFootUnit = record
    class operator *(const AValue: double; const ASelf: TSquareFootUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareFootUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareFootSymbol     = 'ft2';
  rsSquareFootName       = 'square foot';
  rsSquareFootPluralName = 'square feet';

const
  cSquareFootPrefixes  : TPrefixes  = ();
  cSquareFootExponents : TExponents = ();

const
  ft2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeter; FValue: 0.09290304); {$ELSE} 0.09290304; {$ENDIF}

type
  TSquareYardUnit = record
    class operator *(const AValue: double; const ASelf: TSquareYardUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareYardUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareYardSymbol     = 'yd2';
  rsSquareYardName       = 'square yard';
  rsSquareYardPluralName = 'square yards';

const
  cSquareYardPrefixes  : TPrefixes  = ();
  cSquareYardExponents : TExponents = ();

const
  yd2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeter; FValue: 0.83612736); {$ELSE} 0.83612736; {$ENDIF}

type
  TSquareMileUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMileUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMileUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMileSymbol     = 'mi2';
  rsSquareMileName       = 'square mile';
  rsSquareMilePluralName = 'square miles';

const
  cSquareMilePrefixes  : TPrefixes  = ();
  cSquareMileExponents : TExponents = ();

const
  mi2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeter; FValue: 2589988.110336); {$ELSE} 2589988.110336; {$ENDIF}

type
  TCubicMeterUnit = record
    class operator *(const AValue: double; const ASelf: TCubicMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCubicMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCubicMeterSymbol     = '%sm3';
  rsCubicMeterName       = 'cubic %smeter';
  rsCubicMeterPluralName = 'cubic %smeters';

const
  cCubicMeterPrefixes  : TPrefixes  = (pNone);
  cCubicMeterExponents : TExponents = (3);

var
  m3         : TCubicMeterUnit;

const
  km3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 1E+09); {$ELSE} 1E+09; {$ENDIF}
  dm3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  cm3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  mm3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}
  mim3       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 1E-18); {$ELSE} 1E-18; {$ENDIF}
  nm3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 1E-27); {$ELSE} 1E-27; {$ENDIF}
  pm3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 1E-36); {$ELSE} 1E-36; {$ENDIF}

type
  TCubicInchUnit = record
    class operator *(const AValue: double; const ASelf: TCubicInchUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCubicInchUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCubicInchSymbol     = 'in3';
  rsCubicInchName       = 'cubic inch';
  rsCubicInchPluralName = 'cubic inches';

const
  cCubicInchPrefixes  : TPrefixes  = ();
  cCubicInchExponents : TExponents = ();

const
  inch3      : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 0.000016387064); {$ELSE} 0.000016387064; {$ENDIF}

type
  TCubicFootUnit = record
    class operator *(const AValue: double; const ASelf: TCubicFootUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCubicFootUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCubicFootSymbol     = 'ft3';
  rsCubicFootName       = 'cubic foot';
  rsCubicFootPluralName = 'cubic feet';

const
  cCubicFootPrefixes  : TPrefixes  = ();
  cCubicFootExponents : TExponents = ();

const
  ft3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 0.028316846592); {$ELSE} 0.028316846592; {$ENDIF}

type
  TCubicYardUnit = record
    class operator *(const AValue: double; const ASelf: TCubicYardUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCubicYardUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCubicYardSymbol     = 'yd3';
  rsCubicYardName       = 'cubic yard';
  rsCubicYardPluralName = 'cubic yards';

const
  cCubicYardPrefixes  : TPrefixes  = ();
  cCubicYardExponents : TExponents = ();

const
  yd3        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 0.764554857984); {$ELSE} 0.764554857984; {$ENDIF}

type
  TLitreUnit = record
    class operator *(const AValue: double; const ASelf: TLitreUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TLitreUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsLitreSymbol     = '%sL';
  rsLitreName       = '%slitre';
  rsLitrePluralName = '%slitres';

const
  cLitrePrefixes  : TPrefixes  = (pNone);
  cLitreExponents : TExponents = (1);

const
  L          : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}

const
  dL         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 1E-03 * 1E-01); {$ELSE} 1E-03 * 1E-01; {$ENDIF}
  cL         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 1E-03 * 1E-02); {$ELSE} 1E-03 * 1E-02; {$ENDIF}
  mL         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 1E-03 * 1E-03); {$ELSE} 1E-03 * 1E-03; {$ENDIF}

type
  TGallonUnit = record
    class operator *(const AValue: double; const ASelf: TGallonUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TGallonUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsGallonSymbol     = 'gal';
  rsGallonName       = 'gallon';
  rsGallonPluralName = 'gallons';

const
  cGallonPrefixes  : TPrefixes  = ();
  cGallonExponents : TExponents = ();

const
  gal        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCubicMeter; FValue: 0.0037854119678); {$ELSE} 0.0037854119678; {$ENDIF}

type
  TQuarticMeterUnit = record
    class operator *(const AValue: double; const ASelf: TQuarticMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TQuarticMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsQuarticMeterSymbol     = '%sm4';
  rsQuarticMeterName       = 'quartic %smeter';
  rsQuarticMeterPluralName = 'quartic %smeters';

const
  cQuarticMeterPrefixes  : TPrefixes  = (pNone);
  cQuarticMeterExponents : TExponents = (4);

var
  m4         : TQuarticMeterUnit;

const
  km4        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticMeter; FValue: 1E+12); {$ELSE} 1E+12; {$ENDIF}
  dm4        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticMeter; FValue: 1E-04); {$ELSE} 1E-04; {$ENDIF}
  cm4        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticMeter; FValue: 1E-08); {$ELSE} 1E-08; {$ENDIF}
  mm4        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticMeter; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}
  mim4       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticMeter; FValue: 1E-24); {$ELSE} 1E-24; {$ENDIF}
  nm4        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticMeter; FValue: 1E-36); {$ELSE} 1E-36; {$ENDIF}
  pm4        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuarticMeter; FValue: 1E-48); {$ELSE} 1E-48; {$ENDIF}

type
  TQuinticMeterUnit = record
    class operator *(const AValue: double; const ASelf: TQuinticMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TQuinticMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsQuinticMeterSymbol     = '%sm5';
  rsQuinticMeterName       = 'quintic %smeter';
  rsQuinticMeterPluralName = 'quintic %smeters';

const
  cQuinticMeterPrefixes  : TPrefixes  = (pNone);
  cQuinticMeterExponents : TExponents = (5);

var
  m5         : TQuinticMeterUnit;

const
  km5        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticMeter; FValue: 1E+15); {$ELSE} 1E+15; {$ENDIF}
  dm5        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticMeter; FValue: 1E-05); {$ELSE} 1E-05; {$ENDIF}
  cm5        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticMeter; FValue: 1E-10); {$ELSE} 1E-10; {$ENDIF}
  mm5        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticMeter; FValue: 1E-15); {$ELSE} 1E-15; {$ENDIF}
  mim5       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticMeter; FValue: 1E-30); {$ELSE} 1E-30; {$ENDIF}
  nm5        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticMeter; FValue: 1E-45); {$ELSE} 1E-45; {$ENDIF}
  pm5        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uQuinticMeter; FValue: 1E-60); {$ELSE} 1E-60; {$ENDIF}

type
  TSexticMeterUnit = record
    class operator *(const AValue: double; const ASelf: TSexticMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSexticMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSexticMeterSymbol     = '%sm6';
  rsSexticMeterName       = 'sextic %smeter';
  rsSexticMeterPluralName = 'sextic %smeters';

const
  cSexticMeterPrefixes  : TPrefixes  = (pNone);
  cSexticMeterExponents : TExponents = (6);

var
  m6         : TSexticMeterUnit;

const
  km6        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticMeter; FValue: 1E+18); {$ELSE} 1E+18; {$ENDIF}
  dm6        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticMeter; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  cm6        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticMeter; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}
  mm6        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticMeter; FValue: 1E-18); {$ELSE} 1E-18; {$ENDIF}
  mim6       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticMeter; FValue: 1E-36); {$ELSE} 1E-36; {$ENDIF}
  nm6        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticMeter; FValue: 1E-54); {$ELSE} 1E-54; {$ENDIF}
  pm6        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSexticMeter; FValue: 1E-72); {$ELSE} 1E-72; {$ENDIF}

type
  TKilogramUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSymbol     = '%sg';
  rsKilogramName       = '%sgram';
  rsKilogramPluralName = '%sgrams';

const
  cKilogramPrefixes  : TPrefixes  = (pKilo);
  cKilogramExponents : TExponents = (1);

var
  kg         : TKilogramUnit;

type
  TTonneUnit = record
    class operator *(const AValue: double; const ASelf: TTonneUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TTonneUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsTonneSymbol     = '%st';
  rsTonneName       = '%stonne';
  rsTonnePluralName = '%stonnes';

const
  cTonnePrefixes  : TPrefixes  = (pNone);
  cTonneExponents : TExponents = (1);

const
  tonne      : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uKilogram; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}

const
  gigatonne  : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uKilogram; FValue: 1E+03 * 1E+09); {$ELSE} 1E+03 * 1E+09; {$ENDIF}
  megatonne  : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uKilogram; FValue: 1E+03 * 1E+06); {$ELSE} 1E+03 * 1E+06; {$ENDIF}
  kilotonne  : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uKilogram; FValue: 1E+03 * 1E+03); {$ELSE} 1E+03 * 1E+03; {$ENDIF}

type
  TPoundUnit = record
    class operator *(const AValue: double; const ASelf: TPoundUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TPoundUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsPoundSymbol     = 'lb';
  rsPoundName       = 'pound';
  rsPoundPluralName = 'pounds';

const
  cPoundPrefixes  : TPrefixes  = ();
  cPoundExponents : TExponents = ();

const
  lb         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uKilogram; FValue: 0.45359237); {$ELSE} 0.45359237; {$ENDIF}

type
  TOunceUnit = record
    class operator *(const AValue: double; const ASelf: TOunceUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TOunceUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsOunceSymbol     = 'oz';
  rsOunceName       = 'ounce';
  rsOuncePluralName = 'ounces';

const
  cOuncePrefixes  : TPrefixes  = ();
  cOunceExponents : TExponents = ();

const
  oz         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uKilogram; FValue: 0.028349523125); {$ELSE} 0.028349523125; {$ENDIF}

type
  TStoneUnit = record
    class operator *(const AValue: double; const ASelf: TStoneUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TStoneUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsStoneSymbol     = 'st';
  rsStoneName       = 'stone';
  rsStonePluralName = 'stones';

const
  cStonePrefixes  : TPrefixes  = ();
  cStoneExponents : TExponents = ();

const
  st         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uKilogram; FValue: 6.35029318); {$ELSE} 6.35029318; {$ENDIF}

type
  TTonUnit = record
    class operator *(const AValue: double; const ASelf: TTonUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TTonUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsTonSymbol     = 'ton';
  rsTonName       = 'ton';
  rsTonPluralName = 'tons';

const
  cTonPrefixes  : TPrefixes  = ();
  cTonExponents : TExponents = ();

const
  ton        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uKilogram; FValue: 907.18474); {$ELSE} 907.18474; {$ENDIF}

type
  TElectronvoltPerSquareSpeedOfLightUnit = record
    class operator *(const AValue: double; const ASelf: TElectronvoltPerSquareSpeedOfLightUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TElectronvoltPerSquareSpeedOfLightUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsElectronvoltPerSquareSpeedOfLightSymbol     = '%seV/c2';
  rsElectronvoltPerSquareSpeedOfLightName       = '%selectronvolt per squared speed of light';
  rsElectronvoltPerSquareSpeedOfLightPluralName = '%selectronvolts per squared speed of light';

const
  cElectronvoltPerSquareSpeedOfLightPrefixes  : TPrefixes  = (pNone);
  cElectronvoltPerSquareSpeedOfLightExponents : TExponents = (1);

type
  TSquareKilogramUnit = record
    class operator *(const AValue: double; const ASelf: TSquareKilogramUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareKilogramUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareKilogramSymbol     = '%sg2';
  rsSquareKilogramName       = 'square %sgram';
  rsSquareKilogramPluralName = 'square %sgrams';

const
  cSquareKilogramPrefixes  : TPrefixes  = (pKilo);
  cSquareKilogramExponents : TExponents = (2);

var
  kg2        : TSquareKilogramUnit;

type
  TAmpereUnit = record
    class operator *(const AValue: double; const ASelf: TAmpereUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TAmpereUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsAmpereSymbol     = '%sA';
  rsAmpereName       = '%sampere';
  rsAmperePluralName = '%samperes';

const
  cAmperePrefixes  : TPrefixes  = (pNone);
  cAmpereExponents : TExponents = (1);

var
  A          : TAmpereUnit;

const
  kA         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uAmpere; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}
  hA         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uAmpere; FValue: 1E+02); {$ELSE} 1E+02; {$ENDIF}
  daA        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uAmpere; FValue: 1E+01); {$ELSE} 1E+01; {$ENDIF}
  dA         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uAmpere; FValue: 1E-01); {$ELSE} 1E-01; {$ENDIF}
  cA         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uAmpere; FValue: 1E-02); {$ELSE} 1E-02; {$ENDIF}
  mA         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uAmpere; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  miA        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uAmpere; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  nA         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uAmpere; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}
  picoA      : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uAmpere; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}

type
  TSquareAmpereUnit = record
    class operator *(const AValue: double; const ASelf: TSquareAmpereUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareAmpereUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareAmpereSymbol     = '%sA2';
  rsSquareAmpereName       = 'square %sampere';
  rsSquareAmperePluralName = 'square %samperes';

const
  cSquareAmperePrefixes  : TPrefixes  = (pNone);
  cSquareAmpereExponents : TExponents = (2);

var
  A2         : TSquareAmpereUnit;

const
  kA2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareAmpere; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}
  hA2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareAmpere; FValue: 1E+04); {$ELSE} 1E+04; {$ENDIF}
  daA2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareAmpere; FValue: 1E+02); {$ELSE} 1E+02; {$ENDIF}
  dA2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareAmpere; FValue: 1E-02); {$ELSE} 1E-02; {$ENDIF}
  cA2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareAmpere; FValue: 1E-04); {$ELSE} 1E-04; {$ENDIF}
  mA2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareAmpere; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  miA2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareAmpere; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}
  nA2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareAmpere; FValue: 1E-18); {$ELSE} 1E-18; {$ENDIF}
  picoA2     : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareAmpere; FValue: 1E-24); {$ELSE} 1E-24; {$ENDIF}

type
  TKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKelvinSymbol     = '%sK';
  rsKelvinName       = '%skelvin';
  rsKelvinPluralName = '%skelvins';

const
  cKelvinPrefixes  : TPrefixes  = (pNone);
  cKelvinExponents : TExponents = (1);

var
  K          : TKelvinUnit;

type
  TDegreeCelsiusUnit = record
    class operator *(const AValue: double; const ASelf: TDegreeCelsiusUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TDegreeCelsiusUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsDegreeCelsiusSymbol     = 'ºC';
  rsDegreeCelsiusName       = 'degree Celsius';
  rsDegreeCelsiusPluralName = 'degrees Celsius';

const
  cDegreeCelsiusPrefixes  : TPrefixes  = ();
  cDegreeCelsiusExponents : TExponents = ();

var
  degC       : TDegreeCelsiusUnit;

type
  TDegreeFahrenheitUnit = record
    class operator *(const AValue: double; const ASelf: TDegreeFahrenheitUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TDegreeFahrenheitUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsDegreeFahrenheitSymbol     = 'ºF';
  rsDegreeFahrenheitName       = 'degree Fahrenheit';
  rsDegreeFahrenheitPluralName = 'degrees Fahrenheit';

const
  cDegreeFahrenheitPrefixes  : TPrefixes  = ();
  cDegreeFahrenheitExponents : TExponents = ();

var
  degF       : TDegreeFahrenheitUnit;

type
  TSquareKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TSquareKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareKelvinSymbol     = '%sK2';
  rsSquareKelvinName       = 'square %skelvin';
  rsSquareKelvinPluralName = 'square %skelvins';

const
  cSquareKelvinPrefixes  : TPrefixes  = (pNone);
  cSquareKelvinExponents : TExponents = (2);

var
  K2         : TSquareKelvinUnit;

type
  TCubicKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TCubicKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCubicKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCubicKelvinSymbol     = '%sK3';
  rsCubicKelvinName       = 'cubic %skelvin';
  rsCubicKelvinPluralName = 'cubic %skelvins';

const
  cCubicKelvinPrefixes  : TPrefixes  = (pNone);
  cCubicKelvinExponents : TExponents = (3);

var
  K3         : TCubicKelvinUnit;

type
  TQuarticKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TQuarticKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TQuarticKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsQuarticKelvinSymbol     = '%sK4';
  rsQuarticKelvinName       = 'quartic %skelvin';
  rsQuarticKelvinPluralName = 'quartic %skelvins';

const
  cQuarticKelvinPrefixes  : TPrefixes  = (pNone);
  cQuarticKelvinExponents : TExponents = (4);

var
  K4         : TQuarticKelvinUnit;

type
  TMoleUnit = record
    class operator *(const AValue: double; const ASelf: TMoleUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMoleUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMoleSymbol     = '%smol';
  rsMoleName       = '%smole';
  rsMolePluralName = '%smoles';

const
  cMolePrefixes  : TPrefixes  = (pNone);
  cMoleExponents : TExponents = (1);

var
  mol        : TMoleUnit;

const
  kmol       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMole; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}
  hmol       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMole; FValue: 1E+02); {$ELSE} 1E+02; {$ENDIF}
  damol      : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uMole; FValue: 1E+01); {$ELSE} 1E+01; {$ENDIF}

type
  TCandelaUnit = record
    class operator *(const AValue: double; const ASelf: TCandelaUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCandelaUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCandelaSymbol     = '%scd';
  rsCandelaName       = '%scandela';
  rsCandelaPluralName = '%scandelas';

const
  cCandelaPrefixes  : TPrefixes  = (pNone);
  cCandelaExponents : TExponents = (1);

var
  cd         : TCandelaUnit;

type
  TRadianUnit = record
    class operator *(const AValue: double; const ASelf: TRadianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TRadianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsRadianSymbol     = 'rad';
  rsRadianName       = 'radian';
  rsRadianPluralName = 'radians';

const
  cRadianPrefixes  : TPrefixes  = ();
  cRadianExponents : TExponents = ();

var
  rad        : TRadianUnit;

type
  TDegreeUnit = record
    class operator *(const AValue: double; const ASelf: TDegreeUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TDegreeUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsDegreeSymbol     = 'deg';
  rsDegreeName       = 'degree';
  rsDegreePluralName = 'degrees';

const
  cDegreePrefixes  : TPrefixes  = ();
  cDegreeExponents : TExponents = ();

const
  deg        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uRadian; FValue: Pi/180); {$ELSE} Pi/180; {$ENDIF}

type
  TSteradianUnit = record
    class operator *(const AValue: double; const ASelf: TSteradianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSteradianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSteradianSymbol     = 'sr';
  rsSteradianName       = 'steradian';
  rsSteradianPluralName = 'steradians';

const
  cSteradianPrefixes  : TPrefixes  = ();
  cSteradianExponents : TExponents = ();

var
  sr         : TSteradianUnit;

type
  TSquareDegreeUnit = record
    class operator *(const AValue: double; const ASelf: TSquareDegreeUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareDegreeUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareDegreeSymbol     = 'deg2';
  rsSquareDegreeName       = 'square degree';
  rsSquareDegreePluralName = 'square degrees';

const
  cSquareDegreePrefixes  : TPrefixes  = ();
  cSquareDegreeExponents : TExponents = ();

const
  deg2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSteradian; FValue: Pi*Pi/32400); {$ELSE} Pi*Pi/32400; {$ENDIF}

type
  THertzUnit = record
    class operator *(const AValue: double; const ASelf: THertzUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: THertzUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsHertzSymbol     = '%sHz';
  rsHertzName       = '%shertz';
  rsHertzPluralName = '%shertz';

const
  cHertzPrefixes  : TPrefixes  = (pNone);
  cHertzExponents : TExponents = (1);

var
  Hz         : THertzUnit;

const
  THz        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uHertz; FValue: 1E+12); {$ELSE} 1E+12; {$ENDIF}
  GHz        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uHertz; FValue: 1E+09); {$ELSE} 1E+09; {$ENDIF}
  MHz        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uHertz; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}
  kHz        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uHertz; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}

type
  TReciprocalSecondUnit = record
    class operator *(const AValue: double; const ASelf: TReciprocalSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TReciprocalSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsReciprocalSecondSymbol     = '1/%ss';
  rsReciprocalSecondName       = 'reciprocal %ssecond';
  rsReciprocalSecondPluralName = 'reciprocal %sseconds';

const
  cReciprocalSecondPrefixes  : TPrefixes  = (pNone);
  cReciprocalSecondExponents : TExponents = (-1);

type
  TRadianPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TRadianPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TRadianPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsRadianPerSecondSymbol     = 'rad/%ss';
  rsRadianPerSecondName       = 'radian per %ssecond';
  rsRadianPerSecondPluralName = 'radians per %ssecond';

const
  cRadianPerSecondPrefixes  : TPrefixes  = (pNone);
  cRadianPerSecondExponents : TExponents = (-1);

type
  TSquareHertzUnit = record
    class operator *(const AValue: double; const ASelf: TSquareHertzUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareHertzUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareHertzSymbol     = '%sHz2';
  rsSquareHertzName       = 'square %shertz';
  rsSquareHertzPluralName = 'square %shertz';

const
  cSquareHertzPrefixes  : TPrefixes  = (pNone);
  cSquareHertzExponents : TExponents = (2);

var
  Hz2        : TSquareHertzUnit;

const
  THz2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareHertz; FValue: 1E+24); {$ELSE} 1E+24; {$ENDIF}
  GHz2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareHertz; FValue: 1E+18); {$ELSE} 1E+18; {$ENDIF}
  MHz2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareHertz; FValue: 1E+12); {$ELSE} 1E+12; {$ENDIF}
  kHz2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareHertz; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}

type
  TReciprocalSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TReciprocalSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TReciprocalSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsReciprocalSquareSecondSymbol     = '1/%ss2';
  rsReciprocalSquareSecondName       = 'reciprocal square %ssecond';
  rsReciprocalSquareSecondPluralName = 'reciprocal square %sseconds';

const
  cReciprocalSquareSecondPrefixes  : TPrefixes  = (pNone);
  cReciprocalSquareSecondExponents : TExponents = (-2);

type
  TRadianPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TRadianPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TRadianPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsRadianPerSquareSecondSymbol     = 'rad/%ss2';
  rsRadianPerSquareSecondName       = 'radian per square %ssecond';
  rsRadianPerSquareSecondPluralName = 'radians per square %ssecond';

const
  cRadianPerSquareSecondPrefixes  : TPrefixes  = (pNone);
  cRadianPerSquareSecondExponents : TExponents = (-2);

type
  TSteradianPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TSteradianPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSteradianPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSteradianPerSquareSecondSymbol     = 'sr/%ss2';
  rsSteradianPerSquareSecondName       = 'steradian per square %ssecond';
  rsSteradianPerSquareSecondPluralName = 'steradians per square %ssecond';

const
  cSteradianPerSquareSecondPrefixes  : TPrefixes  = (pNone);
  cSteradianPerSquareSecondExponents : TExponents = (-2);

type
  TMeterPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TMeterPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterPerSecondSymbol     = '%sm/%ss';
  rsMeterPerSecondName       = '%smeter per %ssecond';
  rsMeterPerSecondPluralName = '%smeters per %ssecond';

const
  cMeterPerSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerSecondExponents : TExponents = (1, -1);

type
  TMeterPerHourUnit = record
    class operator *(const AValue: double; const ASelf: TMeterPerHourUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterPerHourUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterPerHourSymbol     = '%sm/h';
  rsMeterPerHourName       = '%smeter per hour';
  rsMeterPerHourPluralName = '%smeters per hour';

const
  cMeterPerHourPrefixes  : TPrefixes  = (pNone);
  cMeterPerHourExponents : TExponents = (1);

type
  TMilePerHourUnit = record
    class operator *(const AValue: double; const ASelf: TMilePerHourUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMilePerHourUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMilePerHourSymbol     = 'mi/h';
  rsMilePerHourName       = 'mile per hour';
  rsMilePerHourPluralName = 'miles per hour';

const
  cMilePerHourPrefixes  : TPrefixes  = ();
  cMilePerHourExponents : TExponents = ();

type
  TNauticalMilePerHourUnit = record
    class operator *(const AValue: double; const ASelf: TNauticalMilePerHourUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNauticalMilePerHourUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNauticalMilePerHourSymbol     = 'nmi/h';
  rsNauticalMilePerHourName       = 'nautical mile per hour';
  rsNauticalMilePerHourPluralName = 'nautical miles per hour';

const
  cNauticalMilePerHourPrefixes  : TPrefixes  = ();
  cNauticalMilePerHourExponents : TExponents = ();

type
  TMeterPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TMeterPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterPerSquareSecondSymbol     = '%sm/%ss2';
  rsMeterPerSquareSecondName       = '%smeter per %ssecond squared';
  rsMeterPerSquareSecondPluralName = '%smeters per %ssecond squared';

const
  cMeterPerSquareSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerSquareSecondExponents : TExponents = (1, -2);

type
  TMeterPerSecondPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TMeterPerSecondPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterPerSecondPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterPerSecondPerSecondSymbol     = '%sm/%ss/%ss';
  rsMeterPerSecondPerSecondName       = '%smeter per %ssecond per %ssecond';
  rsMeterPerSecondPerSecondPluralName = '%smeters per %ssecond per %ssecond';

const
  cMeterPerSecondPerSecondPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cMeterPerSecondPerSecondExponents : TExponents = (1, -1, -1);

type
  TMeterPerHourPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TMeterPerHourPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterPerHourPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterPerHourPerSecondSymbol     = '%sm/h/%ss';
  rsMeterPerHourPerSecondName       = '%smeter per hour per %ssecond';
  rsMeterPerHourPerSecondPluralName = '%smeters per hour per %ssecond';

const
  cMeterPerHourPerSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerHourPerSecondExponents : TExponents = (1, -1);

type
  TMeterPerCubicSecondUnit = record
    class operator *(const AValue: double; const ASelf: TMeterPerCubicSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterPerCubicSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterPerCubicSecondSymbol     = '%sm/%ss3';
  rsMeterPerCubicSecondName       = '%smeter per cubic %ssecond';
  rsMeterPerCubicSecondPluralName = '%smeters per cubic %ssecond';

const
  cMeterPerCubicSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerCubicSecondExponents : TExponents = (1, -3);

type
  TMeterPerQuarticSecondUnit = record
    class operator *(const AValue: double; const ASelf: TMeterPerQuarticSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterPerQuarticSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterPerQuarticSecondSymbol     = '%sm/%ss4';
  rsMeterPerQuarticSecondName       = '%smeter per quartic %ssecond';
  rsMeterPerQuarticSecondPluralName = '%smeters per quartic %ssecond';

const
  cMeterPerQuarticSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerQuarticSecondExponents : TExponents = (1, -4);

type
  TMeterPerQuinticSecondUnit = record
    class operator *(const AValue: double; const ASelf: TMeterPerQuinticSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterPerQuinticSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterPerQuinticSecondSymbol     = '%sm/%ss5';
  rsMeterPerQuinticSecondName       = '%smeter per quintic %ssecond';
  rsMeterPerQuinticSecondPluralName = '%smeters per quintic %ssecond';

const
  cMeterPerQuinticSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerQuinticSecondExponents : TExponents = (1, -5);

type
  TMeterPerSexticSecondUnit = record
    class operator *(const AValue: double; const ASelf: TMeterPerSexticSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterPerSexticSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterPerSexticSecondSymbol     = '%sm/%ss6';
  rsMeterPerSexticSecondName       = '%smeter per sextic %ssecond';
  rsMeterPerSexticSecondPluralName = '%smeters per sextic %ssecond';

const
  cMeterPerSexticSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerSexticSecondExponents : TExponents = (1, -6);

type
  TSquareMeterPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMeterPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMeterPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMeterPerSquareSecondSymbol     = '%sm2/%ss2';
  rsSquareMeterPerSquareSecondName       = 'square %smeter per square %ssecond';
  rsSquareMeterPerSquareSecondPluralName = 'square %smeters per square %ssecond';

const
  cSquareMeterPerSquareSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterPerSquareSecondExponents : TExponents = (2, -2);

type
  TJoulePerKilogramUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerKilogramUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerKilogramUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerKilogramSymbol     = '%sJ/%sg';
  rsJoulePerKilogramName       = '%sjoule per %sgram';
  rsJoulePerKilogramPluralName = '%sjoules per %sgram';

const
  cJoulePerKilogramPrefixes  : TPrefixes  = (pNone, pKilo);
  cJoulePerKilogramExponents : TExponents = (1, -1);

type
  TGrayUnit = record
    class operator *(const AValue: double; const ASelf: TGrayUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TGrayUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsGraySymbol     = '%sGy';
  rsGrayName       = '%sgray';
  rsGrayPluralName = '%sgrays';

const
  cGrayPrefixes  : TPrefixes  = (pNone);
  cGrayExponents : TExponents = (1);

var
  Gy         : TGrayUnit;

const
  kGy        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeterPerSquareSecond; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}
  mGy        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeterPerSquareSecond; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  miGy       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeterPerSquareSecond; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  nGy        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeterPerSquareSecond; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}

type
  TSievertUnit = record
    class operator *(const AValue: double; const ASelf: TSievertUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSievertUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSievertSymbol     = '%sSv';
  rsSievertName       = '%ssievert';
  rsSievertPluralName = '%ssieverts';

const
  cSievertPrefixes  : TPrefixes  = (pNone);
  cSievertExponents : TExponents = (1);

var
  Sv         : TSievertUnit;

const
  kSv        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeterPerSquareSecond; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}
  mSv        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeterPerSquareSecond; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  miSv       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeterPerSquareSecond; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  nSv        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareMeterPerSquareSecond; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}

type
  TMeterSecondUnit = record
    class operator *(const AValue: double; const ASelf: TMeterSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterSecondSymbol     = '%sm.%ss';
  rsMeterSecondName       = '%smeter %ssecond';
  rsMeterSecondPluralName = '%smeter %sseconds';

const
  cMeterSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterSecondExponents : TExponents = (1, 1);

type
  TKilogramMeterUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramMeterSymbol     = '%sg.%sm';
  rsKilogramMeterName       = '%sgram %smeter';
  rsKilogramMeterPluralName = '%sgram %smeters';

const
  cKilogramMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramMeterExponents : TExponents = (1, 1);

type
  TKilogramPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerSecondSymbol     = '%sg/%ss';
  rsKilogramPerSecondName       = '%sgram per %ssecond';
  rsKilogramPerSecondPluralName = '%sgrams per %ssecond';

const
  cKilogramPerSecondPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerSecondExponents : TExponents = (1, -1);

type
  TJoulePerSquareMeterPerHertzUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerSquareMeterPerHertzUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerSquareMeterPerHertzUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerSquareMeterPerHertzSymbol     = '%sJ/%sm2/%sHz';
  rsJoulePerSquareMeterPerHertzName       = '%sjoule per square %smeter per %shertz';
  rsJoulePerSquareMeterPerHertzPluralName = '%sjoules per square %smeter per %shertz';

const
  cJoulePerSquareMeterPerHertzPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cJoulePerSquareMeterPerHertzExponents : TExponents = (1, -2, -1);

type
  TKilogramMeterPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramMeterPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramMeterPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramMeterPerSecondSymbol     = '%sg.%sm/%ss';
  rsKilogramMeterPerSecondName       = '%sgram %smeter per %ssecond';
  rsKilogramMeterPerSecondPluralName = '%sgram %smeters per %ssecond';

const
  cKilogramMeterPerSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramMeterPerSecondExponents : TExponents = (1, 1, -1);

type
  TNewtonSecondUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonSecondSymbol     = '%sN.%ss';
  rsNewtonSecondName       = '%snewton %ssecond';
  rsNewtonSecondPluralName = '%snewton %sseconds';

const
  cNewtonSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonSecondExponents : TExponents = (1, 1);

type
  TSquareKilogramSquareMeterPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TSquareKilogramSquareMeterPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareKilogramSquareMeterPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareKilogramSquareMeterPerSquareSecondSymbol     = '%sg2.%sm2/%ss2';
  rsSquareKilogramSquareMeterPerSquareSecondName       = 'square%sgram square%smeter per square%ssecond';
  rsSquareKilogramSquareMeterPerSquareSecondPluralName = 'square%sgram square%smeters per square%ssecond';

const
  cSquareKilogramSquareMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cSquareKilogramSquareMeterPerSquareSecondExponents : TExponents = (2, 2, -2);

type
  TReciprocalSquareRootMeterUnit = record
    class operator *(const AValue: double; const ASelf: TReciprocalSquareRootMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TReciprocalSquareRootMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsReciprocalSquareRootMeterSymbol     = '1/√%sm';
  rsReciprocalSquareRootMeterName       = 'reciprocal square root %smeter';
  rsReciprocalSquareRootMeterPluralName = 'reciprocal square root %smeters';

const
  cReciprocalSquareRootMeterPrefixes  : TPrefixes  = (pNone);
  cReciprocalSquareRootMeterExponents : TExponents = (-1);

type
  TReciprocalMeterUnit = record
    class operator *(const AValue: double; const ASelf: TReciprocalMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TReciprocalMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsReciprocalMeterSymbol     = '1/%sm';
  rsReciprocalMeterName       = 'reciprocal %smeter';
  rsReciprocalMeterPluralName = 'reciprocal %smeters';

const
  cReciprocalMeterPrefixes  : TPrefixes  = (pNone);
  cReciprocalMeterExponents : TExponents = (-1);

type
  TDioptreUnit = record
    class operator *(const AValue: double; const ASelf: TDioptreUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TDioptreUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsDioptreSymbol     = 'dpt';
  rsDioptreName       = '%sdioptre';
  rsDioptrePluralName = '%sdioptres';

const
  cDioptrePrefixes  : TPrefixes  = ();
  cDioptreExponents : TExponents = ();

type
  TReciprocalSquareRootCubicMeterUnit = record
    class operator *(const AValue: double; const ASelf: TReciprocalSquareRootCubicMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TReciprocalSquareRootCubicMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsReciprocalSquareRootCubicMeterSymbol     = '1/√%sm3';
  rsReciprocalSquareRootCubicMeterName       = 'reciprocal square root cubic %smeter';
  rsReciprocalSquareRootCubicMeterPluralName = 'reciprocal square root cubic %smeters';

const
  cReciprocalSquareRootCubicMeterPrefixes  : TPrefixes  = (pNone);
  cReciprocalSquareRootCubicMeterExponents : TExponents = (-3);

type
  TReciprocalSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TReciprocalSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TReciprocalSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsReciprocalSquareMeterSymbol     = '1/%sm2';
  rsReciprocalSquareMeterName       = 'reciprocal square %smeter';
  rsReciprocalSquareMeterPluralName = 'reciprocal square %smeters';

const
  cReciprocalSquareMeterPrefixes  : TPrefixes  = (pNone);
  cReciprocalSquareMeterExponents : TExponents = (-2);

type
  TReciprocalCubicMeterUnit = record
    class operator *(const AValue: double; const ASelf: TReciprocalCubicMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TReciprocalCubicMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsReciprocalCubicMeterSymbol     = '1/%sm3';
  rsReciprocalCubicMeterName       = 'reciprocal cubic %smeter';
  rsReciprocalCubicMeterPluralName = 'reciprocal cubic %smeters';

const
  cReciprocalCubicMeterPrefixes  : TPrefixes  = (pNone);
  cReciprocalCubicMeterExponents : TExponents = (-3);

type
  TReciprocalQuarticMeterUnit = record
    class operator *(const AValue: double; const ASelf: TReciprocalQuarticMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TReciprocalQuarticMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsReciprocalQuarticMeterSymbol     = '1/%sm4';
  rsReciprocalQuarticMeterName       = 'reciprocal quartic %smeter';
  rsReciprocalQuarticMeterPluralName = 'reciprocal quartic %smeters';

const
  cReciprocalQuarticMeterPrefixes  : TPrefixes  = (pNone);
  cReciprocalQuarticMeterExponents : TExponents = (-4);

type
  TKilogramSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSquareMeterSymbol     = '%sg.%sm2';
  rsKilogramSquareMeterName       = '%sgram square %smeter';
  rsKilogramSquareMeterPluralName = '%sgram square %smeters';

const
  cKilogramSquareMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramSquareMeterExponents : TExponents = (1, 2);

type
  TKilogramSquareMeterPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramSquareMeterPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSquareMeterPerSecondSymbol     = '%sg.%sm2/%ss';
  rsKilogramSquareMeterPerSecondName       = '%sgram square %smeter per %ssecond';
  rsKilogramSquareMeterPerSecondPluralName = '%sgram square %smeters per %ssecond';

const
  cKilogramSquareMeterPerSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramSquareMeterPerSecondExponents : TExponents = (1, 2, -1);

type
  TNewtonMeterSecondUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonMeterSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonMeterSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonMeterSecondSymbol     = '%sN.%sm.%ss';
  rsNewtonMeterSecondName       = '%snewton %smeter %ssecond';
  rsNewtonMeterSecondPluralName = '%snewton %smeter %sseconds';

const
  cNewtonMeterSecondPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cNewtonMeterSecondExponents : TExponents = (1, 1, 1);

type
  TSecondPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TSecondPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSecondPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSecondPerMeterSymbol     = '%ss/%sm';
  rsSecondPerMeterName       = '%ssecond per %smeter';
  rsSecondPerMeterPluralName = '%sseconds per %smeter';

const
  cSecondPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cSecondPerMeterExponents : TExponents = (1, -1);

type
  TKilogramPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerMeterSymbol     = '%sg/%sm';
  rsKilogramPerMeterName       = '%sgram per %smeter';
  rsKilogramPerMeterPluralName = '%sgrams per %smeter';

const
  cKilogramPerMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerMeterExponents : TExponents = (1, -1);

type
  TKilogramPerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerSquareMeterSymbol     = '%sg/%sm2';
  rsKilogramPerSquareMeterName       = '%sgram per square %smeter';
  rsKilogramPerSquareMeterPluralName = '%sgrams per square %smeter';

const
  cKilogramPerSquareMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerSquareMeterExponents : TExponents = (1, -2);

type
  TKilogramPerCubicMeterUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerCubicMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerCubicMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerCubicMeterSymbol     = '%sg/%sm3';
  rsKilogramPerCubicMeterName       = '%sgram per cubic %smeter';
  rsKilogramPerCubicMeterPluralName = '%sgrams per cubic %smeter';

const
  cKilogramPerCubicMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerCubicMeterExponents : TExponents = (1, -3);

type
  TPoundPerCubicInchUnit = record
    class operator *(const AValue: double; const ASelf: TPoundPerCubicInchUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TPoundPerCubicInchUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsPoundPerCubicInchSymbol     = 'lb/in3';
  rsPoundPerCubicInchName       = 'pound per cubic inch';
  rsPoundPerCubicInchPluralName = 'pounds per cubic inch';

const
  cPoundPerCubicInchPrefixes  : TPrefixes  = ();
  cPoundPerCubicInchExponents : TExponents = ();

type
  TNewtonUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonSymbol     = '%sN';
  rsNewtonName       = '%snewton';
  rsNewtonPluralName = '%snewtons';

const
  cNewtonPrefixes  : TPrefixes  = (pNone);
  cNewtonExponents : TExponents = (1);

var
  N          : TNewtonUnit;

const
  GN         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uNewton; FValue: 1E+09); {$ELSE} 1E+09; {$ENDIF}
  MN         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uNewton; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}
  kN         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uNewton; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}
  hN         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uNewton; FValue: 1E+02); {$ELSE} 1E+02; {$ENDIF}
  daN        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uNewton; FValue: 1E+01); {$ELSE} 1E+01; {$ENDIF}

type
  TPoundForceUnit = record
    class operator *(const AValue: double; const ASelf: TPoundForceUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TPoundForceUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsPoundForceSymbol     = 'lbf';
  rsPoundForceName       = 'pound-force';
  rsPoundForcePluralName = 'pounds-force';

const
  cPoundForcePrefixes  : TPrefixes  = ();
  cPoundForceExponents : TExponents = ();

const
  lbf        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uNewton; FValue: 4.4482216152605); {$ELSE} 4.4482216152605; {$ENDIF}

type
  TKilogramMeterPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramMeterPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramMeterPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramMeterPerSquareSecondSymbol     = '%sg.%sm/%ss2';
  rsKilogramMeterPerSquareSecondName       = '%sgram %smeter per square %ssecond';
  rsKilogramMeterPerSquareSecondPluralName = '%sgram %smeters per square %ssecond';

const
  cKilogramMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramMeterPerSquareSecondExponents : TExponents = (1, 1, -2);

type
  TNewtonRadianUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonRadianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonRadianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonRadianSymbol     = '%sN.%srad';
  rsNewtonRadianName       = '%snewton %sradian';
  rsNewtonRadianPluralName = '%snewton %sradians';

const
  cNewtonRadianPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonRadianExponents : TExponents = (1, 1);

type
  TSquareNewtonUnit = record
    class operator *(const AValue: double; const ASelf: TSquareNewtonUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareNewtonUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareNewtonSymbol     = '%sN2';
  rsSquareNewtonName       = 'square %snewton';
  rsSquareNewtonPluralName = 'square %snewtons';

const
  cSquareNewtonPrefixes  : TPrefixes  = (pNone);
  cSquareNewtonExponents : TExponents = (2);

var
  N2         : TSquareNewtonUnit;

const
  GN2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareNewton; FValue: 1E+18); {$ELSE} 1E+18; {$ENDIF}
  MN2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareNewton; FValue: 1E+12); {$ELSE} 1E+12; {$ENDIF}
  kN2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareNewton; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}
  hN2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareNewton; FValue: 1E+04); {$ELSE} 1E+04; {$ENDIF}
  daN2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareNewton; FValue: 1E+02); {$ELSE} 1E+02; {$ENDIF}

type
  TSquareKilogramSquareMeterPerQuarticSecondUnit = record
    class operator *(const AValue: double; const ASelf: TSquareKilogramSquareMeterPerQuarticSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareKilogramSquareMeterPerQuarticSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareKilogramSquareMeterPerQuarticSecondSymbol     = '%sg2.%sm2/%ss4';
  rsSquareKilogramSquareMeterPerQuarticSecondName       = 'square %sgram square %smeter per quartic %ssecond';
  rsSquareKilogramSquareMeterPerQuarticSecondPluralName = 'square %sgram square %smeters per quartic %ssecond';

const
  cSquareKilogramSquareMeterPerQuarticSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cSquareKilogramSquareMeterPerQuarticSecondExponents : TExponents = (2, 2, -4);

type
  TPascalUnit = record
    class operator *(const AValue: double; const ASelf: TPascalUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TPascalUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsPascalSymbol     = '%sPa';
  rsPascalName       = '%spascal';
  rsPascalPluralName = '%spascals';

const
  cPascalPrefixes  : TPrefixes  = (pNone);
  cPascalExponents : TExponents = (1);

var
  Pa         : TPascalUnit;

const
  TPa        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uPascal; FValue: 1E+12); {$ELSE} 1E+12; {$ENDIF}
  GPa        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uPascal; FValue: 1E+09); {$ELSE} 1E+09; {$ENDIF}
  MPa        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uPascal; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}
  kPa        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uPascal; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}

type
  TNewtonPerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonPerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonPerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonPerSquareMeterSymbol     = '%sN/%sm2';
  rsNewtonPerSquareMeterName       = '%snewton per square %smeter';
  rsNewtonPerSquareMeterPluralName = '%snewtons per square %smeter';

const
  cNewtonPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerSquareMeterExponents : TExponents = (1, -2);

type
  TBarUnit = record
    class operator *(const AValue: double; const ASelf: TBarUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TBarUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsBarSymbol     = '%sbar';
  rsBarName       = '%sbar';
  rsBarPluralName = '%sbars';

const
  cBarPrefixes  : TPrefixes  = (pNone);
  cBarExponents : TExponents = (1);

const
  bar        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uPascal; FValue: 1E+05); {$ELSE} 1E+05; {$ENDIF}

const
  kbar       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uPascal; FValue: 1E+05 * 1E+03); {$ELSE} 1E+05 * 1E+03; {$ENDIF}
  mbar       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uPascal; FValue: 1E+05 * 1E-03); {$ELSE} 1E+05 * 1E-03; {$ENDIF}

type
  TPoundPerSquareInchUnit = record
    class operator *(const AValue: double; const ASelf: TPoundPerSquareInchUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TPoundPerSquareInchUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsPoundPerSquareInchSymbol     = '%spsi';
  rsPoundPerSquareInchName       = '%spound per square inch';
  rsPoundPerSquareInchPluralName = '%spounds per square inch';

const
  cPoundPerSquareInchPrefixes  : TPrefixes  = (pNone);
  cPoundPerSquareInchExponents : TExponents = (1);

const
  psi        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uPascal; FValue: 6894.75729316836); {$ELSE} 6894.75729316836; {$ENDIF}

const
  kpsi       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uPascal; FValue: 6894.75729316836 * 1E+03); {$ELSE} 6894.75729316836 * 1E+03; {$ENDIF}

type
  TJoulePerCubicMeterUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerCubicMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerCubicMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerCubicMeterSymbol     = '%sJ/%sm3';
  rsJoulePerCubicMeterName       = '%sjoule per cubic %smeter';
  rsJoulePerCubicMeterPluralName = '%sjoules per cubic %smeter';

const
  cJoulePerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerCubicMeterExponents : TExponents = (1, -3);

type
  TKilogramPerMeterPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerMeterPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerMeterPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerMeterPerSquareSecondSymbol     = '%sg/%sm/%ss2';
  rsKilogramPerMeterPerSquareSecondName       = '%sgram per %smeter per square %ssecond';
  rsKilogramPerMeterPerSquareSecondPluralName = '%sgrams per %smeter per square %ssecond';

const
  cKilogramPerMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramPerMeterPerSquareSecondExponents : TExponents = (1, -1, -2);

type
  TJouleUnit = record
    class operator *(const AValue: double; const ASelf: TJouleUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJouleUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJouleSymbol     = '%sJ';
  rsJouleName       = '%sjoule';
  rsJoulePluralName = '%sjoules';

const
  cJoulePrefixes  : TPrefixes  = (pNone);
  cJouleExponents : TExponents = (1);

var
  J          : TJouleUnit;

const
  TJ         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 1E+12); {$ELSE} 1E+12; {$ENDIF}
  GJ         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 1E+09); {$ELSE} 1E+09; {$ENDIF}
  MJ         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}
  kJ         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}

type
  TWattHourUnit = record
    class operator *(const AValue: double; const ASelf: TWattHourUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattHourUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattHourSymbol     = '%sW.h';
  rsWattHourName       = '%swatt hour';
  rsWattHourPluralName = '%swatt hours';

const
  cWattHourPrefixes  : TPrefixes  = (pNone);
  cWattHourExponents : TExponents = (1);

type
  TWattSecondUnit = record
    class operator *(const AValue: double; const ASelf: TWattSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattSecondSymbol     = '%sW.%ss';
  rsWattSecondName       = '%swatt %ssecond';
  rsWattSecondPluralName = '%swatt %sseconds';

const
  cWattSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cWattSecondExponents : TExponents = (1, 1);

type
  TWattPerHertzUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerHertzUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerHertzUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerHertzSymbol     = '%sW/%shz';
  rsWattPerHertzName       = '%swatt per %shertz';
  rsWattPerHertzPluralName = '%swatts per %shertz';

const
  cWattPerHertzPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerHertzExponents : TExponents = (1, -1);

type
  TElectronvoltUnit = record
    class operator *(const AValue: double; const ASelf: TElectronvoltUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TElectronvoltUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsElectronvoltSymbol     = '%seV';
  rsElectronvoltName       = '%selectronvolt';
  rsElectronvoltPluralName = '%selectronvolts';

const
  cElectronvoltPrefixes  : TPrefixes  = (pNone);
  cElectronvoltExponents : TExponents = (1);

const
  eV         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 1.602176634E-019); {$ELSE} 1.602176634E-019; {$ENDIF}

const
  TeV        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 1.602176634E-019 * 1E+12); {$ELSE} 1.602176634E-019 * 1E+12; {$ENDIF}
  GeV        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 1.602176634E-019 * 1E+09); {$ELSE} 1.602176634E-019 * 1E+09; {$ENDIF}
  MeV        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 1.602176634E-019 * 1E+06); {$ELSE} 1.602176634E-019 * 1E+06; {$ENDIF}
  keV        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 1.602176634E-019 * 1E+03); {$ELSE} 1.602176634E-019 * 1E+03; {$ENDIF}

type
  TNewtonMeterUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonMeterSymbol     = '%sN.%sm';
  rsNewtonMeterName       = '%snewton %smeter';
  rsNewtonMeterPluralName = '%snewton %smeters';

const
  cNewtonMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonMeterExponents : TExponents = (1, 1);

type
  TPoundForceInchUnit = record
    class operator *(const AValue: double; const ASelf: TPoundForceInchUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TPoundForceInchUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsPoundForceInchSymbol     = 'lbf.in';
  rsPoundForceInchName       = 'pound-force inch';
  rsPoundForceInchPluralName = 'pound-force inches';

const
  cPoundForceInchPrefixes  : TPrefixes  = ();
  cPoundForceInchExponents : TExponents = ();

type
  TRydbergUnit = record
    class operator *(const AValue: double; const ASelf: TRydbergUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TRydbergUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsRydbergSymbol     = '%sRy';
  rsRydbergName       = '%srydberg';
  rsRydbergPluralName = '%srydbergs';

const
  cRydbergPrefixes  : TPrefixes  = (pNone);
  cRydbergExponents : TExponents = (1);

const
  Ry         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 2.1798723611035E-18); {$ELSE} 2.1798723611035E-18; {$ENDIF}

type
  TCalorieUnit = record
    class operator *(const AValue: double; const ASelf: TCalorieUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCalorieUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCalorieSymbol     = '%scal';
  rsCalorieName       = '%scalorie';
  rsCaloriePluralName = '%scalories';

const
  cCaloriePrefixes  : TPrefixes  = (pNone);
  cCalorieExponents : TExponents = (1);

const
  cal        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 4.184); {$ELSE} 4.184; {$ENDIF}

const
  Mcal       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 4.184 * 1E+06); {$ELSE} 4.184 * 1E+06; {$ENDIF}
  kcal       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uJoule; FValue: 4.184 * 1E+03); {$ELSE} 4.184 * 1E+03; {$ENDIF}

type
  TKilogramSquareMeterPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramSquareMeterPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSquareMeterPerSquareSecondSymbol     = '%sg.%sm2/%ss2';
  rsKilogramSquareMeterPerSquareSecondName       = '%sgram square %smeter per square %ssecond';
  rsKilogramSquareMeterPerSquareSecondPluralName = '%sgram square %smeters per square %ssecond';

const
  cKilogramSquareMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramSquareMeterPerSquareSecondExponents : TExponents = (1, 2, -2);

type
  TJoulePerRadianUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerRadianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerRadianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerRadianSymbol     = '%sJ/rad';
  rsJoulePerRadianName       = '%sjoule per radian';
  rsJoulePerRadianPluralName = '%sjoules per radian';

const
  cJoulePerRadianPrefixes  : TPrefixes  = (pNone);
  cJoulePerRadianExponents : TExponents = (1);

type
  TJoulePerDegreeUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerDegreeUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerDegreeUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerDegreeSymbol     = '%sJ/deg';
  rsJoulePerDegreeName       = '%sjoule per degree';
  rsJoulePerDegreePluralName = '%sjoules per degree';

const
  cJoulePerDegreePrefixes  : TPrefixes  = (pNone);
  cJoulePerDegreeExponents : TExponents = (1);

type
  TNewtonMeterPerRadianUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonMeterPerRadianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonMeterPerRadianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonMeterPerRadianSymbol     = '%sN.%sm/rad';
  rsNewtonMeterPerRadianName       = '%snewton %smeter per radian';
  rsNewtonMeterPerRadianPluralName = '%snewton %smeters per radian';

const
  cNewtonMeterPerRadianPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonMeterPerRadianExponents : TExponents = (1, 1);

type
  TNewtonMeterPerDegreeUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonMeterPerDegreeUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonMeterPerDegreeUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonMeterPerDegreeSymbol     = '%sN.%sm/deg';
  rsNewtonMeterPerDegreeName       = '%snewton %smeter per degree';
  rsNewtonMeterPerDegreePluralName = '%snewton %smeters per degree';

const
  cNewtonMeterPerDegreePrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonMeterPerDegreeExponents : TExponents = (1, 1);

type
  TKilogramSquareMeterPerSquareSecondPerRadianUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramSquareMeterPerSquareSecondPerRadianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerSquareSecondPerRadianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSquareMeterPerSquareSecondPerRadianSymbol     = '%sg.%sm2/%ss2/rad';
  rsKilogramSquareMeterPerSquareSecondPerRadianName       = '%sgram square %smeter per square %ssecond per radian';
  rsKilogramSquareMeterPerSquareSecondPerRadianPluralName = '%sgram square %smeters per square %ssecond per radian';

const
  cKilogramSquareMeterPerSquareSecondPerRadianPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramSquareMeterPerSquareSecondPerRadianExponents : TExponents = (1, 2, -2);

type
  TWattUnit = record
    class operator *(const AValue: double; const ASelf: TWattUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattSymbol     = '%sW';
  rsWattName       = '%swatt';
  rsWattPluralName = '%swatts';

const
  cWattPrefixes  : TPrefixes  = (pNone);
  cWattExponents : TExponents = (1);

var
  W          : TWattUnit;

const
  TW         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uWatt; FValue: 1E+12); {$ELSE} 1E+12; {$ENDIF}
  GW         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uWatt; FValue: 1E+09); {$ELSE} 1E+09; {$ENDIF}
  MW         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uWatt; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}
  kW         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uWatt; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}
  milliW     : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uWatt; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}

type
  TKilogramSquareMeterPerCubicSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramSquareMeterPerCubicSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerCubicSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSquareMeterPerCubicSecondSymbol     = '%sg.%sm2/%ss3';
  rsKilogramSquareMeterPerCubicSecondName       = '%sgram square %smeter per cubic %ssecond';
  rsKilogramSquareMeterPerCubicSecondPluralName = '%sgram square %smeters per cubic %ssecond';

const
  cKilogramSquareMeterPerCubicSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramSquareMeterPerCubicSecondExponents : TExponents = (1, 2, -3);

type
  TCoulombUnit = record
    class operator *(const AValue: double; const ASelf: TCoulombUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCoulombUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCoulombSymbol     = '%sC';
  rsCoulombName       = '%scoulomb';
  rsCoulombPluralName = '%scoulombs';

const
  cCoulombPrefixes  : TPrefixes  = (pNone);
  cCoulombExponents : TExponents = (1);

var
  C          : TCoulombUnit;

const
  kC         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCoulomb; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}
  hC         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCoulomb; FValue: 1E+02); {$ELSE} 1E+02; {$ENDIF}
  daC        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCoulomb; FValue: 1E+01); {$ELSE} 1E+01; {$ENDIF}
  dC         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCoulomb; FValue: 1E-01); {$ELSE} 1E-01; {$ENDIF}
  cC         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCoulomb; FValue: 1E-02); {$ELSE} 1E-02; {$ENDIF}
  mC         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCoulomb; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  miC        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCoulomb; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  nC         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCoulomb; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}
  pC         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uCoulomb; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}

type
  TAmpereHourUnit = record
    class operator *(const AValue: double; const ASelf: TAmpereHourUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TAmpereHourUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsAmpereHourSymbol     = '%sA.h';
  rsAmpereHourName       = '%sampere hour';
  rsAmpereHourPluralName = '%sampere hours';

const
  cAmpereHourPrefixes  : TPrefixes  = (pNone);
  cAmpereHourExponents : TExponents = (1);

type
  TAmpereSecondUnit = record
    class operator *(const AValue: double; const ASelf: TAmpereSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TAmpereSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsAmpereSecondSymbol     = '%sA.%ss';
  rsAmpereSecondName       = '%sampere %ssecond';
  rsAmpereSecondPluralName = '%sampere %sseconds';

const
  cAmpereSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cAmpereSecondExponents : TExponents = (1, 1);

type
  TSquareCoulombUnit = record
    class operator *(const AValue: double; const ASelf: TSquareCoulombUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareCoulombUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareCoulombSymbol     = '%sC2';
  rsSquareCoulombName       = 'square %scoulomb';
  rsSquareCoulombPluralName = 'square %scoulombs';

const
  cSquareCoulombPrefixes  : TPrefixes  = (pNone);
  cSquareCoulombExponents : TExponents = (2);

var
  C2         : TSquareCoulombUnit;

const
  kC2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareCoulomb; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}
  hC2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareCoulomb; FValue: 1E+04); {$ELSE} 1E+04; {$ENDIF}
  daC2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareCoulomb; FValue: 1E+02); {$ELSE} 1E+02; {$ENDIF}
  dC2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareCoulomb; FValue: 1E-02); {$ELSE} 1E-02; {$ENDIF}
  cC2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareCoulomb; FValue: 1E-04); {$ELSE} 1E-04; {$ENDIF}
  mC2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareCoulomb; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  miC2       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareCoulomb; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}
  nC2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareCoulomb; FValue: 1E-18); {$ELSE} 1E-18; {$ENDIF}
  pC2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareCoulomb; FValue: 1E-24); {$ELSE} 1E-24; {$ENDIF}

type
  TSquareAmpereSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TSquareAmpereSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareAmpereSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareAmpereSquareSecondSymbol     = '%sA2.%ss2';
  rsSquareAmpereSquareSecondName       = 'square %sampere square %ssecond';
  rsSquareAmpereSquareSecondPluralName = 'square %sampere square %sseconds';

const
  cSquareAmpereSquareSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareAmpereSquareSecondExponents : TExponents = (2, 2);

type
  TCoulombMeterUnit = record
    class operator *(const AValue: double; const ASelf: TCoulombMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCoulombMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCoulombMeterSymbol     = '%sC.%sm';
  rsCoulombMeterName       = '%scoulomb %smeter';
  rsCoulombMeterPluralName = '%scoulomb %smeters';

const
  cCoulombMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cCoulombMeterExponents : TExponents = (1, 1);

type
  TVoltUnit = record
    class operator *(const AValue: double; const ASelf: TVoltUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TVoltUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsVoltSymbol     = '%sV';
  rsVoltName       = '%svolt';
  rsVoltPluralName = '%svolts';

const
  cVoltPrefixes  : TPrefixes  = (pNone);
  cVoltExponents : TExponents = (1);

var
  V          : TVoltUnit;

const
  kV         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uVolt; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}
  mV         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uVolt; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}

type
  TJoulePerCoulombUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerCoulombUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerCoulombUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerCoulombSymbol     = '%sJ/%sC';
  rsJoulePerCoulombName       = '%sJoule per %scoulomb';
  rsJoulePerCoulombPluralName = '%sJoules per %scoulomb';

const
  cJoulePerCoulombPrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerCoulombExponents : TExponents = (1, -1);

type
  TKilogramSquareMeterPerAmperePerCubicSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramSquareMeterPerAmperePerCubicSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerAmperePerCubicSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSquareMeterPerAmperePerCubicSecondSymbol     = '%sg.%sm2/%sA/%ss3';
  rsKilogramSquareMeterPerAmperePerCubicSecondName       = '%sgram square %smeter per %sampere per cubic %ssecond';
  rsKilogramSquareMeterPerAmperePerCubicSecondPluralName = '%sgram square %smeters per %sampere per cubic %ssecond';

const
  cKilogramSquareMeterPerAmperePerCubicSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramSquareMeterPerAmperePerCubicSecondExponents : TExponents = (1, 2, -1, -3);

type
  TSquareVoltUnit = record
    class operator *(const AValue: double; const ASelf: TSquareVoltUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareVoltUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareVoltSymbol     = '%sV2';
  rsSquareVoltName       = 'square %svolt';
  rsSquareVoltPluralName = 'square %svolts';

const
  cSquareVoltPrefixes  : TPrefixes  = (pNone);
  cSquareVoltExponents : TExponents = (2);

var
  V2         : TSquareVoltUnit;

const
  kV2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareVolt; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}
  mV2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareVolt; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}

type
  TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondUnit = record
    class operator *(const AValue: double; const ASelf: TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondSymbol     = '%sg2.%sm3/%sA2/%ss6';
  rsSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondName       = 'square %sgram quartic %smeter per square %sampere per sextic %ssecond';
  rsSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondPluralName = 'square %sgram quartic %smeters per square %sampere per sextic %ssecond';

const
  cSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondExponents : TExponents = (2, 3, -2, -6);

type
  TFaradUnit = record
    class operator *(const AValue: double; const ASelf: TFaradUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TFaradUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsFaradSymbol     = '%sF';
  rsFaradName       = '%sfarad';
  rsFaradPluralName = '%sfarads';

const
  cFaradPrefixes  : TPrefixes  = (pNone);
  cFaradExponents : TExponents = (1);

var
  F          : TFaradUnit;

const
  mF         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uFarad; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  miF        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uFarad; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  nF         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uFarad; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}
  pF         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uFarad; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}

type
  TCoulombPerVoltUnit = record
    class operator *(const AValue: double; const ASelf: TCoulombPerVoltUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCoulombPerVoltUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCoulombPerVoltSymbol     = '%sC/%sV';
  rsCoulombPerVoltName       = '%scoulomb per %svolt';
  rsCoulombPerVoltPluralName = '%scoulombs per %svolt';

const
  cCoulombPerVoltPrefixes  : TPrefixes  = (pNone, pNone);
  cCoulombPerVoltExponents : TExponents = (1, -1);

type
  TSquareAmpereQuarticSecondPerKilogramPerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TSquareAmpereQuarticSecondPerKilogramPerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareAmpereQuarticSecondPerKilogramPerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareAmpereQuarticSecondPerKilogramPerSquareMeterSymbol     = '%sA2.%ss4/%sg/%sm2';
  rsSquareAmpereQuarticSecondPerKilogramPerSquareMeterName       = 'square %sampere quartic %ssecond per %sgram per square %smeter';
  rsSquareAmpereQuarticSecondPerKilogramPerSquareMeterPluralName = 'square %sampere quartic %sseconds per %sgram per square %smeter';

const
  cSquareAmpereQuarticSecondPerKilogramPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone, pKilo, pNone);
  cSquareAmpereQuarticSecondPerKilogramPerSquareMeterExponents : TExponents = (2, 4, -1, -2);

type
  TOhmUnit = record
    class operator *(const AValue: double; const ASelf: TOhmUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TOhmUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsOhmSymbol     = '%sΩ';
  rsOhmName       = '%sohm';
  rsOhmPluralName = '%sohms';

const
  cOhmPrefixes  : TPrefixes  = (pNone);
  cOhmExponents : TExponents = (1);

var
  ohm        : TOhmUnit;

const
  Gohm       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uOhm; FValue: 1E+09); {$ELSE} 1E+09; {$ENDIF}
  megaohm    : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uOhm; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}
  kohm       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uOhm; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}
  mohm       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uOhm; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  miohm      : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uOhm; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  nohm       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uOhm; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}

type
  TKilogramSquareMeterPerSquareAmperePerCubicSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramSquareMeterPerSquareAmperePerCubicSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerSquareAmperePerCubicSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSquareMeterPerSquareAmperePerCubicSecondSymbol     = '%sg.%sm2/%sA/%ss3';
  rsKilogramSquareMeterPerSquareAmperePerCubicSecondName       = '%sgram square %smeter per square %sampere per cubic %ssecond';
  rsKilogramSquareMeterPerSquareAmperePerCubicSecondPluralName = '%sgram square %smeters per square %sampere per cubic %ssecond';

const
  cKilogramSquareMeterPerSquareAmperePerCubicSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramSquareMeterPerSquareAmperePerCubicSecondExponents : TExponents = (1, 2, -1, -3);

type
  TSiemensUnit = record
    class operator *(const AValue: double; const ASelf: TSiemensUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSiemensUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSiemensSymbol     = '%sS';
  rsSiemensName       = '%ssiemens';
  rsSiemensPluralName = '%ssiemens';

const
  cSiemensPrefixes  : TPrefixes  = (pNone);
  cSiemensExponents : TExponents = (1);

var
  siemens    : TSiemensUnit;

const
  millisiemens : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSiemens; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  microsiemens : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSiemens; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
   nanosiemens : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSiemens; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}

type
  TSquareAmpereCubicSecondPerKilogramPerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TSquareAmpereCubicSecondPerKilogramPerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareAmpereCubicSecondPerKilogramPerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareAmpereCubicSecondPerKilogramPerSquareMeterSymbol     = '%sA2.%ss3/%sg/%sm2';
  rsSquareAmpereCubicSecondPerKilogramPerSquareMeterName       = 'square %sampere cubic %ssecond per %sgram per square %smeter';
  rsSquareAmpereCubicSecondPerKilogramPerSquareMeterPluralName = 'square %sampere cubic %sseconds per %sgram per square %smeter';

const
  cSquareAmpereCubicSecondPerKilogramPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone, pKilo, pNone);
  cSquareAmpereCubicSecondPerKilogramPerSquareMeterExponents : TExponents = (2, 3, -1, -2);

type
  TSiemensPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TSiemensPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSiemensPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSiemensPerMeterSymbol     = '%sS/%sm';
  rsSiemensPerMeterName       = '%ssiemens per %smeter';
  rsSiemensPerMeterPluralName = '%ssiemens per %smeter';

const
  cSiemensPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cSiemensPerMeterExponents : TExponents = (1, -1);

type
  TTeslaUnit = record
    class operator *(const AValue: double; const ASelf: TTeslaUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TTeslaUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsTeslaSymbol     = '%sT';
  rsTeslaName       = '%stesla';
  rsTeslaPluralName = '%steslas';

const
  cTeslaPrefixes  : TPrefixes  = (pNone);
  cTeslaExponents : TExponents = (1);

var
  T          : TTeslaUnit;

const
  mT         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uTesla; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  miT        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uTesla; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  nT         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uTesla; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}

type
  TWeberPerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TWeberPerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWeberPerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWeberPerSquareMeterSymbol     = '%sWb/%m2';
  rsWeberPerSquareMeterName       = '%sweber per square %smeter';
  rsWeberPerSquareMeterPluralName = '%swebers per square %smeter';

const
  cWeberPerSquareMeterPrefixes  : TPrefixes  = (pNone);
  cWeberPerSquareMeterExponents : TExponents = (1);

type
  TKilogramPerAmperePerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerAmperePerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerAmperePerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerAmperePerSquareSecondSymbol     = '%sg/%sA/%ss2';
  rsKilogramPerAmperePerSquareSecondName       = '%sgram per %sampere per square %ssecond';
  rsKilogramPerAmperePerSquareSecondPluralName = '%sgrams per %sampere per square %ssecond';

const
  cKilogramPerAmperePerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramPerAmperePerSquareSecondExponents : TExponents = (1, -1, -2);

type
  TWeberUnit = record
    class operator *(const AValue: double; const ASelf: TWeberUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWeberUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWeberSymbol     = '%sWb';
  rsWeberName       = '%sweber';
  rsWeberPluralName = '%swebers';

const
  cWeberPrefixes  : TPrefixes  = (pNone);
  cWeberExponents : TExponents = (1);

var
  Wb         : TWeberUnit;

type
  TKilogramSquareMeterPerAmperePerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramSquareMeterPerAmperePerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerAmperePerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSquareMeterPerAmperePerSquareSecondSymbol     = '%sg.%sm2/%sA/%ss2';
  rsKilogramSquareMeterPerAmperePerSquareSecondName       = '%sgram square %smeter per %sampere per square %ssecond';
  rsKilogramSquareMeterPerAmperePerSquareSecondPluralName = '%sgram square %smeters per %sampere per square %ssecond';

const
  cKilogramSquareMeterPerAmperePerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramSquareMeterPerAmperePerSquareSecondExponents : TExponents = (1, 2, -1, -2);

type
  THenryUnit = record
    class operator *(const AValue: double; const ASelf: THenryUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: THenryUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsHenrySymbol     = '%sH';
  rsHenryName       = '%shenry';
  rsHenryPluralName = '%shenries';

const
  cHenryPrefixes  : TPrefixes  = (pNone);
  cHenryExponents : TExponents = (1);

var
  H          : THenryUnit;

const
  mH         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uHenry; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  miH        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uHenry; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  nH         : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uHenry; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}

type
  TKilogramSquareMeterPerSquareAmperePerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramSquareMeterPerSquareAmperePerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerSquareAmperePerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSquareMeterPerSquareAmperePerSquareSecondSymbol     = '%sg.%sm2/%sA2/%ss2';
  rsKilogramSquareMeterPerSquareAmperePerSquareSecondName       = '%sgram square %smeter per square %sampere per square %ssecond';
  rsKilogramSquareMeterPerSquareAmperePerSquareSecondPluralName = '%sgram square %smeters per square %sampere per square %ssecond';

const
  cKilogramSquareMeterPerSquareAmperePerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramSquareMeterPerSquareAmperePerSquareSecondExponents : TExponents = (1, 2, -2, -2);

type
  TReciprocalHenryUnit = record
    class operator *(const AValue: double; const ASelf: TReciprocalHenryUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TReciprocalHenryUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsReciprocalHenrySymbol     = '1/%sH';
  rsReciprocalHenryName       = 'reciprocal %shenry';
  rsReciprocalHenryPluralName = 'reciprocal %shenries';

const
  cReciprocalHenryPrefixes  : TPrefixes  = (pNone);
  cReciprocalHenryExponents : TExponents = (-1);

type
  TLumenUnit = record
    class operator *(const AValue: double; const ASelf: TLumenUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TLumenUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsLumenSymbol     = '%slm';
  rsLumenName       = '%slumen';
  rsLumenPluralName = '%slumens';

const
  cLumenPrefixes  : TPrefixes  = (pNone);
  cLumenExponents : TExponents = (1);

var
  lm         : TLumenUnit;

type
  TCandelaSteradianUnit = record
    class operator *(const AValue: double; const ASelf: TCandelaSteradianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCandelaSteradianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCandelaSteradianSymbol     = '%scd.%ssr';
  rsCandelaSteradianName       = '%scandela %ssteradian';
  rsCandelaSteradianPluralName = '%scandela %ssteradians';

const
  cCandelaSteradianPrefixes  : TPrefixes  = (pNone, pNone);
  cCandelaSteradianExponents : TExponents = (1, 1);

type
  TLumenSecondUnit = record
    class operator *(const AValue: double; const ASelf: TLumenSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TLumenSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsLumenSecondSymbol     = '%slm.%ss';
  rsLumenSecondName       = '%slumen %ssecond';
  rsLumenSecondPluralName = '%slumen %sseconds';

const
  cLumenSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cLumenSecondExponents : TExponents = (1, 1);

type
  TLumenSecondPerCubicMeterUnit = record
    class operator *(const AValue: double; const ASelf: TLumenSecondPerCubicMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TLumenSecondPerCubicMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsLumenSecondPerCubicMeterSymbol     = '%slm.%ss/%sm3';
  rsLumenSecondPerCubicMeterName       = '%slumen %ssecond per cubic meter';
  rsLumenSecondPerCubicMeterPluralName = '%slumen %sseconds per cubic meter';

const
  cLumenSecondPerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cLumenSecondPerCubicMeterExponents : TExponents = (1, 1, -3);

type
  TLuxUnit = record
    class operator *(const AValue: double; const ASelf: TLuxUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TLuxUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsLuxSymbol     = '%slx';
  rsLuxName       = '%slux';
  rsLuxPluralName = '%slux';

const
  cLuxPrefixes  : TPrefixes  = (pNone);
  cLuxExponents : TExponents = (1);

var
  lx         : TLuxUnit;

type
  TCandelaSteradianPerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TCandelaSteradianPerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCandelaSteradianPerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCandelaSteradianPerSquareMeterSymbol     = '%scd.%ssr/%sm2';
  rsCandelaSteradianPerSquareMeterName       = '%scandela %ssteradian per square %smeter';
  rsCandelaSteradianPerSquareMeterPluralName = '%scandela %ssteradians per square %smeter';

const
  cCandelaSteradianPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cCandelaSteradianPerSquareMeterExponents : TExponents = (1, 1, -2);

type
  TLuxSecondUnit = record
    class operator *(const AValue: double; const ASelf: TLuxSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TLuxSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsLuxSecondSymbol     = '%slx.%ss';
  rsLuxSecondName       = '%slux %ssecond';
  rsLuxSecondPluralName = '%slux %sseconds';

const
  cLuxSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cLuxSecondExponents : TExponents = (1, 1);

type
  TBequerelUnit = record
    class operator *(const AValue: double; const ASelf: TBequerelUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TBequerelUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsBequerelSymbol     = '%sBq';
  rsBequerelName       = '%sbequerel';
  rsBequerelPluralName = '%sbequerels';

const
  cBequerelPrefixes  : TPrefixes  = (pNone);
  cBequerelExponents : TExponents = (1);

var
  Bq         : TBequerelUnit;

const
  kBq        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uHertz; FValue: 1E+03); {$ELSE} 1E+03; {$ENDIF}
  mBq        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uHertz; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  miBq       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uHertz; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}
  nBq        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uHertz; FValue: 1E-09); {$ELSE} 1E-09; {$ENDIF}
  pBq        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uHertz; FValue: 1E-12); {$ELSE} 1E-12; {$ENDIF}

type
  TKatalUnit = record
    class operator *(const AValue: double; const ASelf: TKatalUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKatalUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKatalSymbol     = '%skat';
  rsKatalName       = '%skatal';
  rsKatalPluralName = '%skatals';

const
  cKatalPrefixes  : TPrefixes  = (pNone);
  cKatalExponents : TExponents = (1);

var
  kat        : TKatalUnit;

type
  TMolePerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TMolePerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMolePerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMolePerSecondSymbol     = '%smol/%ss';
  rsMolePerSecondName       = '%smole per %ssecond';
  rsMolePerSecondPluralName = '%smoles per %ssecond';

const
  cMolePerSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMolePerSecondExponents : TExponents = (1, -1);

type
  TNewtonPerCubicMeterUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonPerCubicMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonPerCubicMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonPerCubicMeterSymbol     = '%sN/%sm3';
  rsNewtonPerCubicMeterName       = '%snewton per cubic %smeter';
  rsNewtonPerCubicMeterPluralName = '%snewtons per cubic %smeter';

const
  cNewtonPerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerCubicMeterExponents : TExponents = (1, -3);

type
  TPascalPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TPascalPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TPascalPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsPascalPerMeterSymbol     = '%sPa/%sm';
  rsPascalPerMeterName       = '%spascal per %smeter';
  rsPascalPerMeterPluralName = '%spascals per %smeter';

const
  cPascalPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cPascalPerMeterExponents : TExponents = (1, -1);

type
  TKilogramPerSquareMeterPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerSquareMeterPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerSquareMeterPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerSquareMeterPerSquareSecondSymbol     = '%sg/%sm2/%ss2';
  rsKilogramPerSquareMeterPerSquareSecondName       = '%sgram per square %smeter per square %ssecond';
  rsKilogramPerSquareMeterPerSquareSecondPluralName = '%sgrams per square %smeter per square %ssecond';

const
  cKilogramPerSquareMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramPerSquareMeterPerSquareSecondExponents : TExponents = (1, -2, -2);

type
  TNewtonPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonPerMeterSymbol     = '%sN/%sm';
  rsNewtonPerMeterName       = '%snewton per %smeter';
  rsNewtonPerMeterPluralName = '%snewtons per %smeter';

const
  cNewtonPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerMeterExponents : TExponents = (1, -1);

type
  TJoulePerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerSquareMeterSymbol     = '%sJ/%sm2';
  rsJoulePerSquareMeterName       = '%sjoule per square %smeter';
  rsJoulePerSquareMeterPluralName = '%sjoules per square %smeter';

const
  cJoulePerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerSquareMeterExponents : TExponents = (1, -2);

type
  TWattPerSquareMeterPerHertzUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerSquareMeterPerHertzUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerSquareMeterPerHertzUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerSquareMeterPerHertzSymbol     = '%sW/%sm2/%sHz';
  rsWattPerSquareMeterPerHertzName       = '%swatt per square %smeter per %shertz';
  rsWattPerSquareMeterPerHertzPluralName = '%swatts per square %smeter per %shertz';

const
  cWattPerSquareMeterPerHertzPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cWattPerSquareMeterPerHertzExponents : TExponents = (1, -2, -1);

type
  TPoundForcePerInchUnit = record
    class operator *(const AValue: double; const ASelf: TPoundForcePerInchUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TPoundForcePerInchUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsPoundForcePerInchSymbol     = 'lbf/in';
  rsPoundForcePerInchName       = 'pound-force per inch';
  rsPoundForcePerInchPluralName = 'pounds-force per inch';

const
  cPoundForcePerInchPrefixes  : TPrefixes  = ();
  cPoundForcePerInchExponents : TExponents = ();

type
  TKilogramPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerSquareSecondSymbol     = '%sg/%ss2';
  rsKilogramPerSquareSecondName       = '%sgram per square %ssecond';
  rsKilogramPerSquareSecondPluralName = '%sgrams per square %ssecond';

const
  cKilogramPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerSquareSecondExponents : TExponents = (1, -2);

type
  TCubicMeterPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TCubicMeterPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCubicMeterPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCubicMeterPerSecondSymbol     = '%sm3/%ss';
  rsCubicMeterPerSecondName       = 'cubic %smeter per %ssecond';
  rsCubicMeterPerSecondPluralName = 'cubic %smeters per %ssecond';

const
  cCubicMeterPerSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cCubicMeterPerSecondExponents : TExponents = (3, -1);

type
  TPoiseuilleUnit = record
    class operator *(const AValue: double; const ASelf: TPoiseuilleUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TPoiseuilleUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsPoiseuilleSymbol     = '%sPl';
  rsPoiseuilleName       = '%spoiseuille';
  rsPoiseuillePluralName = '%spoiseuilles';

const
  cPoiseuillePrefixes  : TPrefixes  = (pNone);
  cPoiseuilleExponents : TExponents = (1);

var
  Pl         : TPoiseuilleUnit;

const
  cPl        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uPoiseuille; FValue: 1E-02); {$ELSE} 1E-02; {$ENDIF}
  mPl        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uPoiseuille; FValue: 1E-03); {$ELSE} 1E-03; {$ENDIF}
  miPl       : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uPoiseuille; FValue: 1E-06); {$ELSE} 1E-06; {$ENDIF}

type
  TPascalSecondUnit = record
    class operator *(const AValue: double; const ASelf: TPascalSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TPascalSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsPascalSecondSymbol     = '%sPa.%ss';
  rsPascalSecondName       = '%spascal %ssecond';
  rsPascalSecondPluralName = '%spascal %sseconds';

const
  cPascalSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cPascalSecondExponents : TExponents = (1, 1);

type
  TKilogramPerMeterPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerMeterPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerMeterPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerMeterPerSecondSymbol     = '%sg/%sm/%ss';
  rsKilogramPerMeterPerSecondName       = '%sgram per %smeter per %ssecond';
  rsKilogramPerMeterPerSecondPluralName = '%sgrams per %smeter per %ssecond';

const
  cKilogramPerMeterPerSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramPerMeterPerSecondExponents : TExponents = (1, -1, -1);

type
  TSquareMeterPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMeterPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMeterPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMeterPerSecondSymbol     = '%sm2/%ss';
  rsSquareMeterPerSecondName       = 'square %smeter per %ssecond';
  rsSquareMeterPerSecondPluralName = 'square %smeters per %ssecond';

const
  cSquareMeterPerSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterPerSecondExponents : TExponents = (2, -1);

type
  TKilogramPerQuarticMeterUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerQuarticMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerQuarticMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerQuarticMeterSymbol     = '%sg/%sm4';
  rsKilogramPerQuarticMeterName       = '%sgram per quartic %smeter';
  rsKilogramPerQuarticMeterPluralName = '%sgrams per quartic %smeter';

const
  cKilogramPerQuarticMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerQuarticMeterExponents : TExponents = (1, -4);

type
  TQuarticMeterSecondUnit = record
    class operator *(const AValue: double; const ASelf: TQuarticMeterSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TQuarticMeterSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsQuarticMeterSecondSymbol     = '%sm4.%ss';
  rsQuarticMeterSecondName       = 'quartic %smeter %ssecond';
  rsQuarticMeterSecondPluralName = 'quartic %smeter %sseconds';

const
  cQuarticMeterSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cQuarticMeterSecondExponents : TExponents = (4, 1);

type
  TKilogramPerQuarticMeterPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerQuarticMeterPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerQuarticMeterPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerQuarticMeterPerSecondSymbol     = '%sg/%sm4/%ss';
  rsKilogramPerQuarticMeterPerSecondName       = '%sgram per quartic %smeter per %ssecond';
  rsKilogramPerQuarticMeterPerSecondPluralName = '%sgrams per quartic %smeter per %ssecond';

const
  cKilogramPerQuarticMeterPerSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramPerQuarticMeterPerSecondExponents : TExponents = (1, -4, -1);

type
  TCubicMeterPerKilogramUnit = record
    class operator *(const AValue: double; const ASelf: TCubicMeterPerKilogramUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCubicMeterPerKilogramUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCubicMeterPerKilogramSymbol     = '%sm3/%sg';
  rsCubicMeterPerKilogramName       = 'cubic %smeter per %sgram';
  rsCubicMeterPerKilogramPluralName = 'cubic %smeters per %sgram';

const
  cCubicMeterPerKilogramPrefixes  : TPrefixes  = (pNone, pKilo);
  cCubicMeterPerKilogramExponents : TExponents = (3, -1);

type
  TKilogramSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSquareSecondSymbol     = '%sg.%ss2';
  rsKilogramSquareSecondName       = '%sgram square %ssecond';
  rsKilogramSquareSecondPluralName = '%sgram square %sseconds';

const
  cKilogramSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramSquareSecondExponents : TExponents = (1, 2);

type
  TCubicMeterPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TCubicMeterPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCubicMeterPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCubicMeterPerSquareSecondSymbol     = '%sm3/%ss2';
  rsCubicMeterPerSquareSecondName       = 'cubic %smeter per square %ssecond';
  rsCubicMeterPerSquareSecondPluralName = 'cubic %smeters per square %ssecond';

const
  cCubicMeterPerSquareSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cCubicMeterPerSquareSecondExponents : TExponents = (3, -2);

type
  TNewtonSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonSquareMeterSymbol     = '%sN.%sm2';
  rsNewtonSquareMeterName       = '%snewton square %smeter';
  rsNewtonSquareMeterPluralName = '%snewton square %smeters';

const
  cNewtonSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonSquareMeterExponents : TExponents = (1, 2);

type
  TKilogramCubicMeterPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramCubicMeterPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramCubicMeterPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramCubicMeterPerSquareSecondSymbol     = '%sg.%sm3/%ss2';
  rsKilogramCubicMeterPerSquareSecondName       = '%sgram cubic %smeter per square %ssecond';
  rsKilogramCubicMeterPerSquareSecondPluralName = '%sgram cubic %smeters per square %ssecond';

const
  cKilogramCubicMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramCubicMeterPerSquareSecondExponents : TExponents = (1, 3, -2);

type
  TNewtonCubicMeterUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonCubicMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonCubicMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonCubicMeterSymbol     = '%sN.%sm3';
  rsNewtonCubicMeterName       = '%snewton cubic %smeter';
  rsNewtonCubicMeterPluralName = '%snewton cubic %smeters';

const
  cNewtonCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonCubicMeterExponents : TExponents = (1, 3);

type
  TKilogramQuarticMeterPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramQuarticMeterPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramQuarticMeterPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramQuarticMeterPerSquareSecondSymbol     = '%sg.%sm4/%ss2';
  rsKilogramQuarticMeterPerSquareSecondName       = '%sgram quartic %smeter per square %ssecond';
  rsKilogramQuarticMeterPerSquareSecondPluralName = '%sgram quartic %smeters per square %ssecond';

const
  cKilogramQuarticMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramQuarticMeterPerSquareSecondExponents : TExponents = (1, 4, -2);

type
  TNewtonPerSquareKilogramUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonPerSquareKilogramUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonPerSquareKilogramUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonPerSquareKilogramSymbol     = '%sN/%sg2';
  rsNewtonPerSquareKilogramName       = '%snewton per square %sgram';
  rsNewtonPerSquareKilogramPluralName = '%snewtons per square %sgram';

const
  cNewtonPerSquareKilogramPrefixes  : TPrefixes  = (pNone, pKilo);
  cNewtonPerSquareKilogramExponents : TExponents = (1, -2);

type
  TMeterPerKilogramPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TMeterPerKilogramPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterPerKilogramPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterPerKilogramPerSquareSecondSymbol     = '%sm/%sg/%ss2';
  rsMeterPerKilogramPerSquareSecondName       = '%smeter per %sgram per square %ssecond';
  rsMeterPerKilogramPerSquareSecondPluralName = '%smeters per %sgram per square %ssecond';

const
  cMeterPerKilogramPerSquareSecondPrefixes  : TPrefixes  = (pNone, pKilo, pNone);
  cMeterPerKilogramPerSquareSecondExponents : TExponents = (1, -1, -2);

type
  TSquareKilogramPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TSquareKilogramPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareKilogramPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareKilogramPerMeterSymbol     = '%sg2/%sm';
  rsSquareKilogramPerMeterName       = 'square %sgram per %smeter';
  rsSquareKilogramPerMeterPluralName = 'square %sgrams per %smeter';

const
  cSquareKilogramPerMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cSquareKilogramPerMeterExponents : TExponents = (2, -1);

type
  TSquareKilogramPerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TSquareKilogramPerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareKilogramPerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareKilogramPerSquareMeterSymbol     = '%sg2/%sm2';
  rsSquareKilogramPerSquareMeterName       = 'square %sgram per square %smeter';
  rsSquareKilogramPerSquareMeterPluralName = 'square %sgrams per square %smeter';

const
  cSquareKilogramPerSquareMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cSquareKilogramPerSquareMeterExponents : TExponents = (2, -2);

type
  TSquareMeterPerSquareKilogramUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMeterPerSquareKilogramUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMeterPerSquareKilogramUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMeterPerSquareKilogramSymbol     = '%sm2/%sg2';
  rsSquareMeterPerSquareKilogramName       = 'square %smeter per square %sgram';
  rsSquareMeterPerSquareKilogramPluralName = 'square %smeters per square %sgram';

const
  cSquareMeterPerSquareKilogramPrefixes  : TPrefixes  = (pNone, pKilo);
  cSquareMeterPerSquareKilogramExponents : TExponents = (2, -2);

type
  TNewtonSquareMeterPerSquareKilogramUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonSquareMeterPerSquareKilogramUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonSquareMeterPerSquareKilogramUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonSquareMeterPerSquareKilogramSymbol     = '%sN.%sm2/%sg2';
  rsNewtonSquareMeterPerSquareKilogramName       = '%snewton square %smeter per square %sgram';
  rsNewtonSquareMeterPerSquareKilogramPluralName = '%snewton square %smeters per square %sgram';

const
  cNewtonSquareMeterPerSquareKilogramPrefixes  : TPrefixes  = (pNone, pNone, pKilo);
  cNewtonSquareMeterPerSquareKilogramExponents : TExponents = (1, 2, -2);

type
  TCubicMeterPerKilogramPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TCubicMeterPerKilogramPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCubicMeterPerKilogramPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCubicMeterPerKilogramPerSquareSecondSymbol     = '%sm3/%sg/%ss2';
  rsCubicMeterPerKilogramPerSquareSecondName       = 'cubic %smeter per %sgram per square %ssecond';
  rsCubicMeterPerKilogramPerSquareSecondPluralName = 'cubic %smeters per %sgram per square %ssecond';

const
  cCubicMeterPerKilogramPerSquareSecondPrefixes  : TPrefixes  = (pNone, pKilo, pNone);
  cCubicMeterPerKilogramPerSquareSecondExponents : TExponents = (3, -1, -2);

type
  TReciprocalKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TReciprocalKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TReciprocalKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsReciprocalKelvinSymbol     = '1/%sK';
  rsReciprocalKelvinName       = 'reciprocal %skelvin';
  rsReciprocalKelvinPluralName = 'reciprocal %skelvin';

const
  cReciprocalKelvinPrefixes  : TPrefixes  = (pNone);
  cReciprocalKelvinExponents : TExponents = (-1);

type
  TKilogramKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramKelvinSymbol     = '%sg.%sK';
  rsKilogramKelvinName       = '%sgram %skelvin';
  rsKilogramKelvinPluralName = '%sgram %skelvins';

const
  cKilogramKelvinPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramKelvinExponents : TExponents = (1, 1);

type
  TJoulePerKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerKelvinSymbol     = '%sJ/%sK';
  rsJoulePerKelvinName       = '%sjoule per %skelvin';
  rsJoulePerKelvinPluralName = '%sjoules per %skelvin';

const
  cJoulePerKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerKelvinExponents : TExponents = (1, -1);

type
  TKilogramSquareMeterPerSquareSecondPerKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramSquareMeterPerSquareSecondPerKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerSquareSecondPerKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSquareMeterPerSquareSecondPerKelvinSymbol     = '%sg.%sm2/%ss2/%sK';
  rsKilogramSquareMeterPerSquareSecondPerKelvinName       = '%sgram square %smeter per square %ssecond per %skelvin';
  rsKilogramSquareMeterPerSquareSecondPerKelvinPluralName = '%sgram square %smeters per square %ssecond per %skelvin';

const
  cKilogramSquareMeterPerSquareSecondPerKelvinPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramSquareMeterPerSquareSecondPerKelvinExponents : TExponents = (1, 2, -2, -1);

type
  TJoulePerKilogramPerKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerKilogramPerKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerKilogramPerKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerKilogramPerKelvinSymbol     = '%sJ/%sg/%sK';
  rsJoulePerKilogramPerKelvinName       = '%sjoule per %sgram per %skelvin';
  rsJoulePerKilogramPerKelvinPluralName = '%sjoules per %sgram per %skelvin';

const
  cJoulePerKilogramPerKelvinPrefixes  : TPrefixes  = (pNone, pKilo, pNone);
  cJoulePerKilogramPerKelvinExponents : TExponents = (1, -1, -1);

type
  TSquareMeterPerSquareSecondPerKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMeterPerSquareSecondPerKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMeterPerSquareSecondPerKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMeterPerSquareSecondPerKelvinSymbol     = '%sm2/%ss2/%sK';
  rsSquareMeterPerSquareSecondPerKelvinName       = 'square %smeter per square %ssecond per %skelvin';
  rsSquareMeterPerSquareSecondPerKelvinPluralName = 'square %smeters per square %ssecond per %skelvin';

const
  cSquareMeterPerSquareSecondPerKelvinPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cSquareMeterPerSquareSecondPerKelvinExponents : TExponents = (2, -2, -1);

type
  TMeterKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TMeterKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterKelvinSymbol     = '%sm.%sK';
  rsMeterKelvinName       = '%smeter %skelvin';
  rsMeterKelvinPluralName = '%smeter %skelvins';

const
  cMeterKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterKelvinExponents : TExponents = (1, 1);

type
  TKelvinPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TKelvinPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKelvinPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKelvinPerMeterSymbol     = '%sK/%sm';
  rsKelvinPerMeterName       = '%skelvin per %smeter';
  rsKelvinPerMeterPluralName = '%skelvins per %smeter';

const
  cKelvinPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cKelvinPerMeterExponents : TExponents = (1, -1);

type
  TWattPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerMeterSymbol     = '%sW/%sm';
  rsWattPerMeterName       = '%swatt per %smeter';
  rsWattPerMeterPluralName = '%swatts per %smeter';

const
  cWattPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerMeterExponents : TExponents = (1, -1);

type
  TKilogramMeterPerCubicSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramMeterPerCubicSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramMeterPerCubicSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramMeterPerCubicSecondSymbol     = '%sg.%sm/%ss3';
  rsKilogramMeterPerCubicSecondName       = '%sgram %smeter per cubic %ssecond';
  rsKilogramMeterPerCubicSecondPluralName = '%sgram %smeters per cubic %ssecond';

const
  cKilogramMeterPerCubicSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramMeterPerCubicSecondExponents : TExponents = (1, 1, -3);

type
  TWattPerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerSquareMeterSymbol     = '%sW/%sm2';
  rsWattPerSquareMeterName       = '%swatt per square %smeter';
  rsWattPerSquareMeterPluralName = '%swatts per square %smeter';

const
  cWattPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerSquareMeterExponents : TExponents = (1, -2);

type
  TKilogramPerCubicSecondUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerCubicSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerCubicSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerCubicSecondSymbol     = '%sg/%ss3';
  rsKilogramPerCubicSecondName       = '%sgram per cubic %ssecond';
  rsKilogramPerCubicSecondPluralName = '%sgrams per cubic %ssecond';

const
  cKilogramPerCubicSecondPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerCubicSecondExponents : TExponents = (1, -3);

type
  TWattPerCubicMeterUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerCubicMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerCubicMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerCubicMeterSymbol     = '%sW/%sm3';
  rsWattPerCubicMeterName       = '%swatt per cubic %smeter';
  rsWattPerCubicMeterPluralName = '%swatts per cubic %smeter';

const
  cWattPerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerCubicMeterExponents : TExponents = (1, -3);

type
  TWattPerKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerKelvinSymbol     = '%sW/%sK';
  rsWattPerKelvinName       = '%swatt per %skelvin';
  rsWattPerKelvinPluralName = '%swatts per %skelvin';

const
  cWattPerKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerKelvinExponents : TExponents = (1, -1);

type
  TKilogramSquareMeterPerCubicSecondPerKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramSquareMeterPerCubicSecondPerKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerCubicSecondPerKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramSquareMeterPerCubicSecondPerKelvinSymbol     = '%sg.%sm2/%ss3/%sK';
  rsKilogramSquareMeterPerCubicSecondPerKelvinName       = '%sgram square %smeter per cubic %ssecond per %skelvin';
  rsKilogramSquareMeterPerCubicSecondPerKelvinPluralName = '%sgram square %smeters per cubic %ssecond per %skelvin';

const
  cKilogramSquareMeterPerCubicSecondPerKelvinPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramSquareMeterPerCubicSecondPerKelvinExponents : TExponents = (1, 2, -3, -1);

type
  TWattPerMeterPerKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerMeterPerKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerMeterPerKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerMeterPerKelvinSymbol     = '%sW/%sm/%sK';
  rsWattPerMeterPerKelvinName       = '%swatt per %smeter per %skelvin';
  rsWattPerMeterPerKelvinPluralName = '%swatts per %smeter per %skelvin';

const
  cWattPerMeterPerKelvinPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cWattPerMeterPerKelvinExponents : TExponents = (1, -1, -1);

type
  TKilogramMeterPerCubicSecondPerKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramMeterPerCubicSecondPerKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramMeterPerCubicSecondPerKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramMeterPerCubicSecondPerKelvinSymbol     = '%sg.%sm/%ss3/%sK';
  rsKilogramMeterPerCubicSecondPerKelvinName       = '%sgram %smeter per cubic %ssecond per %skelvin';
  rsKilogramMeterPerCubicSecondPerKelvinPluralName = '%sgram %smeters per cubic %ssecond per %skelvin';

const
  cKilogramMeterPerCubicSecondPerKelvinPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramMeterPerCubicSecondPerKelvinExponents : TExponents = (1, 1, -3, -1);

type
  TKelvinPerWattUnit = record
    class operator *(const AValue: double; const ASelf: TKelvinPerWattUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKelvinPerWattUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKelvinPerWattSymbol     = '%sK/%sW';
  rsKelvinPerWattName       = '%skelvin per %swatt';
  rsKelvinPerWattPluralName = '%skelvins per %swatt';

const
  cKelvinPerWattPrefixes  : TPrefixes  = (pNone, pNone);
  cKelvinPerWattExponents : TExponents = (1, -1);

type
  TMeterPerWattUnit = record
    class operator *(const AValue: double; const ASelf: TMeterPerWattUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterPerWattUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterPerWattSymbol     = '%sm/%sW';
  rsMeterPerWattName       = '%smeter per %swatt';
  rsMeterPerWattPluralName = '%smeters per %swatts';

const
  cMeterPerWattPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerWattExponents : TExponents = (1, -1);

type
  TMeterKelvinPerWattUnit = record
    class operator *(const AValue: double; const ASelf: TMeterKelvinPerWattUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterKelvinPerWattUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterKelvinPerWattSymbol     = '%sK.%sm/%sW';
  rsMeterKelvinPerWattName       = '%skelvin %smeter per %swatt';
  rsMeterKelvinPerWattPluralName = '%skelvin %smeters per %swatt';

const
  cMeterKelvinPerWattPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cMeterKelvinPerWattExponents : TExponents = (1, 1, -1);

type
  TSquareMeterKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMeterKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMeterKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMeterKelvinSymbol     = '%sm2.%sK';
  rsSquareMeterKelvinName       = 'square %smeter %skelvin';
  rsSquareMeterKelvinPluralName = 'square %smeter %skelvins';

const
  cSquareMeterKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterKelvinExponents : TExponents = (2, 1);

type
  TWattPerSquareMeterPerKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerSquareMeterPerKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerSquareMeterPerKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerSquareMeterPerKelvinSymbol     = '%sW/%sm2/%sK';
  rsWattPerSquareMeterPerKelvinName       = '%swatt per square %smeter per %skelvin';
  rsWattPerSquareMeterPerKelvinPluralName = '%swatts per square %smeter per %skelvin';

const
  cWattPerSquareMeterPerKelvinPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cWattPerSquareMeterPerKelvinExponents : TExponents = (1, -2, -1);

type
  TKilogramPerCubicSecondPerKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TKilogramPerCubicSecondPerKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKilogramPerCubicSecondPerKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKilogramPerCubicSecondPerKelvinSymbol     = '%sg/%ss3/%sK';
  rsKilogramPerCubicSecondPerKelvinName       = '%sgram per cubic %ssecond per %skelvin';
  rsKilogramPerCubicSecondPerKelvinPluralName = '%sgrams per cubic %ssecond per %skelvin';

const
  cKilogramPerCubicSecondPerKelvinPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramPerCubicSecondPerKelvinExponents : TExponents = (1, -3, -1);

type
  TSquareMeterQuarticKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMeterQuarticKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMeterQuarticKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMeterQuarticKelvinSymbol     = '%sm2.%sK4';
  rsSquareMeterQuarticKelvinName       = 'square %smeter quartic %skelvin';
  rsSquareMeterQuarticKelvinPluralName = 'square %smeter quartic %skelvins';

const
  cSquareMeterQuarticKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterQuarticKelvinExponents : TExponents = (2, 4);

type
  TWattPerQuarticKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerQuarticKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerQuarticKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerQuarticKelvinSymbol     = '%sW/%sK4';
  rsWattPerQuarticKelvinName       = '%swatt per quartic %skelvin';
  rsWattPerQuarticKelvinPluralName = '%swatts per quartic %skelvin';

const
  cWattPerQuarticKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerQuarticKelvinExponents : TExponents = (1, -4);

type
  TWattPerSquareMeterPerQuarticKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerSquareMeterPerQuarticKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerSquareMeterPerQuarticKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerSquareMeterPerQuarticKelvinSymbol     = '%sW/%sm2/%sK4';
  rsWattPerSquareMeterPerQuarticKelvinName       = '%swatt per square %smeter per quartic %skelvin';
  rsWattPerSquareMeterPerQuarticKelvinPluralName = '%swatts per square %smeter per quartic %skelvin';

const
  cWattPerSquareMeterPerQuarticKelvinPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cWattPerSquareMeterPerQuarticKelvinExponents : TExponents = (1, -2, -4);

type
  TJoulePerMoleUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerMoleUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerMoleUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerMoleSymbol     = '%sJ/%smol';
  rsJoulePerMoleName       = '%sjoule per %smole';
  rsJoulePerMolePluralName = '%sjoules per %smole';

const
  cJoulePerMolePrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerMoleExponents : TExponents = (1, -1);

type
  TMoleKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TMoleKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMoleKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMoleKelvinSymbol     = '%smol.%sK';
  rsMoleKelvinName       = '%smole %skelvin';
  rsMoleKelvinPluralName = '%smole %skelvins';

const
  cMoleKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cMoleKelvinExponents : TExponents = (1, 1);

type
  TJoulePerMolePerKelvinUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerMolePerKelvinUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerMolePerKelvinUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerMolePerKelvinSymbol     = '%sJ/%smol/%sK';
  rsJoulePerMolePerKelvinName       = '%sjoule per %smole per %skelvin';
  rsJoulePerMolePerKelvinPluralName = '%sjoules per %smole per %skelvin';

const
  cJoulePerMolePerKelvinPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cJoulePerMolePerKelvinExponents : TExponents = (1, -1, -1);

type
  TOhmMeterUnit = record
    class operator *(const AValue: double; const ASelf: TOhmMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TOhmMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsOhmMeterSymbol     = '%sΩ.%sm';
  rsOhmMeterName       = '%sohm %smeter';
  rsOhmMeterPluralName = '%sohm %smeters';

const
  cOhmMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cOhmMeterExponents : TExponents = (1, 1);

type
  TVoltPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TVoltPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TVoltPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsVoltPerMeterSymbol     = '%sV/%sm';
  rsVoltPerMeterName       = '%svolt per %smeter';
  rsVoltPerMeterPluralName = '%svolts per %smeter';

const
  cVoltPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cVoltPerMeterExponents : TExponents = (1, -1);

type
  TNewtonPerCoulombUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonPerCoulombUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonPerCoulombUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonPerCoulombSymbol     = '%sN/%sC';
  rsNewtonPerCoulombName       = '%snewton per %scoulomb';
  rsNewtonPerCoulombPluralName = '%snewtons per %scoulomb';

const
  cNewtonPerCoulombPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerCoulombExponents : TExponents = (1, -1);

type
  TCoulombPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TCoulombPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCoulombPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCoulombPerMeterSymbol     = '%sC/%sm';
  rsCoulombPerMeterName       = '%scoulomb per %smeter';
  rsCoulombPerMeterPluralName = '%scoulombs per %smeter';

const
  cCoulombPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cCoulombPerMeterExponents : TExponents = (1, -1);

type
  TSquareCoulombPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TSquareCoulombPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareCoulombPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareCoulombPerMeterSymbol     = '%sC2/%sm';
  rsSquareCoulombPerMeterName       = 'square %scoulomb per %smeter';
  rsSquareCoulombPerMeterPluralName = 'square %scoulombs per %smeter';

const
  cSquareCoulombPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareCoulombPerMeterExponents : TExponents = (2, -1);

type
  TCoulombPerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TCoulombPerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCoulombPerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCoulombPerSquareMeterSymbol     = '%sC/%sm2';
  rsCoulombPerSquareMeterName       = '%scoulomb per square %smeter';
  rsCoulombPerSquareMeterPluralName = '%scoulombs per square %smeter';

const
  cCoulombPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cCoulombPerSquareMeterExponents : TExponents = (1, -2);

type
  TSquareMeterPerSquareCoulombUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMeterPerSquareCoulombUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMeterPerSquareCoulombUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMeterPerSquareCoulombSymbol     = '%sm2/%sC2';
  rsSquareMeterPerSquareCoulombName       = 'square %smeter per square %scoulomb';
  rsSquareMeterPerSquareCoulombPluralName = 'square %smeters per square %scoulomb';

const
  cSquareMeterPerSquareCoulombPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterPerSquareCoulombExponents : TExponents = (2, -2);

type
  TNewtonPerSquareCoulombUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonPerSquareCoulombUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonPerSquareCoulombUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonPerSquareCoulombSymbol     = '%sN/%sC2';
  rsNewtonPerSquareCoulombName       = '%snewton per square %scoulomb';
  rsNewtonPerSquareCoulombPluralName = '%snewtons per square %scoulomb';

const
  cNewtonPerSquareCoulombPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerSquareCoulombExponents : TExponents = (1, -2);

type
  TNewtonSquareMeterPerSquareCoulombUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonSquareMeterPerSquareCoulombUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonSquareMeterPerSquareCoulombUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonSquareMeterPerSquareCoulombSymbol     = '%sN.%sm2/%sC2';
  rsNewtonSquareMeterPerSquareCoulombName       = '%snewton square %smeter per square %scoulomb';
  rsNewtonSquareMeterPerSquareCoulombPluralName = '%snewton square %smeters per square %scoulomb';

const
  cNewtonSquareMeterPerSquareCoulombPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cNewtonSquareMeterPerSquareCoulombExponents : TExponents = (1, 2, -2);

type
  TVoltMeterUnit = record
    class operator *(const AValue: double; const ASelf: TVoltMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TVoltMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsVoltMeterSymbol     = '%sV.%sm';
  rsVoltMeterName       = '%svolt %smeter';
  rsVoltMeterPluralName = '%svolt %smeters';

const
  cVoltMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cVoltMeterExponents : TExponents = (1, 1);

type
  TNewtonSquareMeterPerCoulombUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonSquareMeterPerCoulombUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonSquareMeterPerCoulombUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonSquareMeterPerCoulombSymbol     = '%sN.%sm2/%sC';
  rsNewtonSquareMeterPerCoulombName       = '%snewton square %smeter per %scoulomb';
  rsNewtonSquareMeterPerCoulombPluralName = '%snewton square %smeters per %scoulomb';

const
  cNewtonSquareMeterPerCoulombPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cNewtonSquareMeterPerCoulombExponents : TExponents = (1, 2, -1);

type
  TVoltMeterPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TVoltMeterPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TVoltMeterPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsVoltMeterPerSecondSymbol     = '%sV.%sm/%ss';
  rsVoltMeterPerSecondName       = '%svolt %smeter per %ssecond';
  rsVoltMeterPerSecondPluralName = '%svolt %smeters per %ssecond';

const
  cVoltMeterPerSecondPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cVoltMeterPerSecondExponents : TExponents = (1, 1, -1);

type
  TFaradPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TFaradPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TFaradPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsFaradPerMeterSymbol     = '%sF/%sm';
  rsFaradPerMeterName       = '%sfarad per %smeter';
  rsFaradPerMeterPluralName = '%sfarads per %smeter';

const
  cFaradPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cFaradPerMeterExponents : TExponents = (1, -1);

type
  TAmperePerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TAmperePerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TAmperePerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsAmperePerMeterSymbol     = '%sA/%sm';
  rsAmperePerMeterName       = '%sampere per %smeter';
  rsAmperePerMeterPluralName = '%samperes per %smeter';

const
  cAmperePerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cAmperePerMeterExponents : TExponents = (1, -1);

type
  TMeterPerAmpereUnit = record
    class operator *(const AValue: double; const ASelf: TMeterPerAmpereUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterPerAmpereUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterPerAmpereSymbol     = '%sm/%sA';
  rsMeterPerAmpereName       = '%smeter per %sampere';
  rsMeterPerAmperePluralName = '%smeters per %sampere';

const
  cMeterPerAmperePrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerAmpereExponents : TExponents = (1, -1);

type
  TTeslaMeterUnit = record
    class operator *(const AValue: double; const ASelf: TTeslaMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TTeslaMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsTeslaMeterSymbol     = '%sT.%sm';
  rsTeslaMeterName       = '%stesla %smeter';
  rsTeslaMeterPluralName = '%stesla %smeters';

const
  cTeslaMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cTeslaMeterExponents : TExponents = (1, 1);

type
  TNewtonPerAmpereUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonPerAmpereUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonPerAmpereUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonPerAmpereSymbol     = '%sN/%sA';
  rsNewtonPerAmpereName       = '%snewton per %sampere';
  rsNewtonPerAmperePluralName = '%snewtons per %sampere';

const
  cNewtonPerAmperePrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerAmpereExponents : TExponents = (1, -1);

type
  TTeslaPerAmpereUnit = record
    class operator *(const AValue: double; const ASelf: TTeslaPerAmpereUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TTeslaPerAmpereUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsTeslaPerAmpereSymbol     = '%sT/%sA';
  rsTeslaPerAmpereName       = '%stesla per %sampere';
  rsTeslaPerAmperePluralName = '%steslas per %sampere';

const
  cTeslaPerAmperePrefixes  : TPrefixes  = (pNone, pNone);
  cTeslaPerAmpereExponents : TExponents = (1, -1);

type
  THenryPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: THenryPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: THenryPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsHenryPerMeterSymbol     = '%sH/%sm';
  rsHenryPerMeterName       = '%shenry per %smeter';
  rsHenryPerMeterPluralName = '%shenries per %smeter';

const
  cHenryPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cHenryPerMeterExponents : TExponents = (1, -1);

type
  TTeslaMeterPerAmpereUnit = record
    class operator *(const AValue: double; const ASelf: TTeslaMeterPerAmpereUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TTeslaMeterPerAmpereUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsTeslaMeterPerAmpereSymbol     = '%sT.%sm/%sA';
  rsTeslaMeterPerAmpereName       = '%stesla %smeter per %sampere';
  rsTeslaMeterPerAmperePluralName = '%stesla %smeters per %sampere';

const
  cTeslaMeterPerAmperePrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cTeslaMeterPerAmpereExponents : TExponents = (1, 1, -1);

type
  TNewtonPerSquareAmpereUnit = record
    class operator *(const AValue: double; const ASelf: TNewtonPerSquareAmpereUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TNewtonPerSquareAmpereUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsNewtonPerSquareAmpereSymbol     = '%sN/%sA2';
  rsNewtonPerSquareAmpereName       = '%snewton per square %sampere';
  rsNewtonPerSquareAmperePluralName = '%snewtons per square %sampere';

const
  cNewtonPerSquareAmperePrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerSquareAmpereExponents : TExponents = (1, -2);

type
  TRadianPerMeterUnit = record
    class operator *(const AValue: double; const ASelf: TRadianPerMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TRadianPerMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsRadianPerMeterSymbol     = 'rad/%sm';
  rsRadianPerMeterName       = 'radian per %smeter';
  rsRadianPerMeterPluralName = 'radians per %smeter';

const
  cRadianPerMeterPrefixes  : TPrefixes  = (pNone);
  cRadianPerMeterExponents : TExponents = (-1);

type
  TSquareKilogramPerSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TSquareKilogramPerSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareKilogramPerSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareKilogramPerSquareSecondSymbol     = '%sg2/%ss2';
  rsSquareKilogramPerSquareSecondName       = 'square %sgram per square %ssecond';
  rsSquareKilogramPerSquareSecondPluralName = 'square %sgrams per square %ssecond';

const
  cSquareKilogramPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone);
  cSquareKilogramPerSquareSecondExponents : TExponents = (2, -2);

type
  TSquareSecondPerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TSquareSecondPerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareSecondPerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareSecondPerSquareMeterSymbol     = '%ss2/%sm2';
  rsSquareSecondPerSquareMeterName       = 'square %ssecond per square %smeter';
  rsSquareSecondPerSquareMeterPluralName = 'square %sseconds per square %smeter';

const
  cSquareSecondPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareSecondPerSquareMeterExponents : TExponents = (2, -2);

type
  TSquareJouleUnit = record
    class operator *(const AValue: double; const ASelf: TSquareJouleUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareJouleUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareJouleSymbol     = '%sJ2';
  rsSquareJouleName       = 'square %sjoule';
  rsSquareJoulePluralName = 'square %sjoules';

const
  cSquareJoulePrefixes  : TPrefixes  = (pNone);
  cSquareJouleExponents : TExponents = (2);

var
  J2         : TSquareJouleUnit;

const
  TJ2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareJoule; FValue: 1E+24); {$ELSE} 1E+24; {$ENDIF}
  GJ2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareJoule; FValue: 1E+18); {$ELSE} 1E+18; {$ENDIF}
  MJ2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareJoule; FValue: 1E+12); {$ELSE} 1E+12; {$ENDIF}
  kJ2        : TQuantity = {$IFOPT D+} (FUnitOfMeasurement: uSquareJoule; FValue: 1E+06); {$ELSE} 1E+06; {$ENDIF}

type
  TJouleSecondUnit = record
    class operator *(const AValue: double; const ASelf: TJouleSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJouleSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJouleSecondSymbol     = '%sJ.%ss';
  rsJouleSecondName       = '%sjoule %ssecond';
  rsJouleSecondPluralName = '%sjoule %sseconds';

const
  cJouleSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cJouleSecondExponents : TExponents = (1, 1);

type
  TJoulePerHertzUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerHertzUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerHertzUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerHertzSymbol     = '%sJ/%sHz';
  rsJoulePerHertzName       = '%sjoule per %shertz';
  rsJoulePerHertzPluralName = '%sjoules per %shertz';

const
  cJoulePerHertzPrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerHertzExponents : TExponents = (1, -1);

type
  TElectronvoltSecondUnit = record
    class operator *(const AValue: double; const ASelf: TElectronvoltSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TElectronvoltSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsElectronvoltSecondSymbol     = '%seV.%ss';
  rsElectronvoltSecondName       = '%selectronvolt %ssecond';
  rsElectronvoltSecondPluralName = '%selectronvolt %sseconds';

const
  cElectronvoltSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cElectronvoltSecondExponents : TExponents = (1, 1);

type
  TElectronvoltMeterPerSpeedOfLightUnit = record
    class operator *(const AValue: double; const ASelf: TElectronvoltMeterPerSpeedOfLightUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TElectronvoltMeterPerSpeedOfLightUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsElectronvoltMeterPerSpeedOfLightSymbol     = '%seV.%sm/c';
  rsElectronvoltMeterPerSpeedOfLightName       = '%selectronvolt %smeter per speed of  light';
  rsElectronvoltMeterPerSpeedOfLightPluralName = '%selectronvolt %smeters per speed of  light';

const
  cElectronvoltMeterPerSpeedOfLightPrefixes  : TPrefixes  = (pNone, pNone);
  cElectronvoltMeterPerSpeedOfLightExponents : TExponents = (1, 1);

type
  TSquareJouleSquareSecondUnit = record
    class operator *(const AValue: double; const ASelf: TSquareJouleSquareSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareJouleSquareSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareJouleSquareSecondSymbol     = '%sJ2.%ss2';
  rsSquareJouleSquareSecondName       = 'square %sjoule square %ssecond';
  rsSquareJouleSquareSecondPluralName = 'square %sjoule square %sseconds';

const
  cSquareJouleSquareSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareJouleSquareSecondExponents : TExponents = (2, 2);

type
  TCoulombPerKilogramUnit = record
    class operator *(const AValue: double; const ASelf: TCoulombPerKilogramUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCoulombPerKilogramUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCoulombPerKilogramSymbol     = '%sC/%sg';
  rsCoulombPerKilogramName       = '%scoulomb per %sgram';
  rsCoulombPerKilogramPluralName = '%scoulombs per %sgram';

const
  cCoulombPerKilogramPrefixes  : TPrefixes  = (pNone, pKilo);
  cCoulombPerKilogramExponents : TExponents = (1, -1);

type
  TSquareMeterAmpereUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMeterAmpereUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMeterAmpereUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMeterAmpereSymbol     = '%sm2.%sA';
  rsSquareMeterAmpereName       = 'square %smeter %sampere';
  rsSquareMeterAmperePluralName = 'square %smeter %samperes';

const
  cSquareMeterAmperePrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterAmpereExponents : TExponents = (2, 1);

type
  TJoulePerTeslaUnit = record
    class operator *(const AValue: double; const ASelf: TJoulePerTeslaUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TJoulePerTeslaUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsJoulePerTeslaSymbol     = '%sJ/%sT';
  rsJoulePerTeslaName       = '%sjoule per %stesla';
  rsJoulePerTeslaPluralName = '%sjoules per %stesla';

const
  cJoulePerTeslaPrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerTeslaExponents : TExponents = (1, -1);

type
  TLumenPerWattUnit = record
    class operator *(const AValue: double; const ASelf: TLumenPerWattUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TLumenPerWattUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsLumenPerWattSymbol     = '%slm/%sW';
  rsLumenPerWattName       = '%slumen per %swatt';
  rsLumenPerWattPluralName = '%slumens per %swatt';

const
  cLumenPerWattPrefixes  : TPrefixes  = (pNone, pNone);
  cLumenPerWattExponents : TExponents = (1, -1);

type
  TReciprocalMoleUnit = record
    class operator *(const AValue: double; const ASelf: TReciprocalMoleUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TReciprocalMoleUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsReciprocalMoleSymbol     = '1/%smol';
  rsReciprocalMoleName       = 'reciprocal %smole';
  rsReciprocalMolePluralName = 'reciprocal %smoles';

const
  cReciprocalMolePrefixes  : TPrefixes  = (pNone);
  cReciprocalMoleExponents : TExponents = (-1);

type
  TAmperePerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TAmperePerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TAmperePerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsAmperePerSquareMeterSymbol     = '%sA/%sm2';
  rsAmperePerSquareMeterName       = '%sampere per square %smeter';
  rsAmperePerSquareMeterPluralName = '%samperes per square %smeter';

const
  cAmperePerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cAmperePerSquareMeterExponents : TExponents = (1, -2);

type
  TMolePerCubicMeterUnit = record
    class operator *(const AValue: double; const ASelf: TMolePerCubicMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMolePerCubicMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMolePerCubicMeterSymbol     = '%smol/%sm3';
  rsMolePerCubicMeterName       = '%smole per cubic %smeter';
  rsMolePerCubicMeterPluralName = '%smoles per cubic %smeter';

const
  cMolePerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cMolePerCubicMeterExponents : TExponents = (1, -3);

type
  TCandelaPerSquareMeterUnit = record
    class operator *(const AValue: double; const ASelf: TCandelaPerSquareMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCandelaPerSquareMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCandelaPerSquareMeterSymbol     = '%scd/%sm2';
  rsCandelaPerSquareMeterName       = '%scandela per square %smeter';
  rsCandelaPerSquareMeterPluralName = '%scandelas per square %smeter';

const
  cCandelaPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cCandelaPerSquareMeterExponents : TExponents = (1, -2);

type
  TCoulombPerCubicMeterUnit = record
    class operator *(const AValue: double; const ASelf: TCoulombPerCubicMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCoulombPerCubicMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCoulombPerCubicMeterSymbol     = '%sC/%sm3';
  rsCoulombPerCubicMeterName       = '%scoulomb per cubic %smeter';
  rsCoulombPerCubicMeterPluralName = '%scoulombs per cubic %smeter';

const
  cCoulombPerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cCoulombPerCubicMeterExponents : TExponents = (1, -3);

type
  TGrayPerSecondUnit = record
    class operator *(const AValue: double; const ASelf: TGrayPerSecondUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TGrayPerSecondUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsGrayPerSecondSymbol     = '%sGy/%ss';
  rsGrayPerSecondName       = '%sgray per %ssecond';
  rsGrayPerSecondPluralName = '%sgrays per %ssecond';

const
  cGrayPerSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cGrayPerSecondExponents : TExponents = (1, -1);

type
  TSteradianHertzUnit = record
    class operator *(const AValue: double; const ASelf: TSteradianHertzUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSteradianHertzUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSteradianHertzSymbol     = 'sr.%sHz';
  rsSteradianHertzName       = 'steradian %shertz';
  rsSteradianHertzPluralName = 'steradian %shertz';

const
  cSteradianHertzPrefixes  : TPrefixes  = (pNone);
  cSteradianHertzExponents : TExponents = (1);

type
  TMeterSteradianUnit = record
    class operator *(const AValue: double; const ASelf: TMeterSteradianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TMeterSteradianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsMeterSteradianSymbol     = '%sm.sr';
  rsMeterSteradianName       = '%smeter steradian';
  rsMeterSteradianPluralName = '%smeter steradians';

const
  cMeterSteradianPrefixes  : TPrefixes  = (pNone);
  cMeterSteradianExponents : TExponents = (1);

type
  TSquareMeterSteradianUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMeterSteradianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMeterSteradianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMeterSteradianSymbol     = '%sm2.sr';
  rsSquareMeterSteradianName       = 'square %smeter steradian';
  rsSquareMeterSteradianPluralName = 'square %smeter steradians';

const
  cSquareMeterSteradianPrefixes  : TPrefixes  = (pNone);
  cSquareMeterSteradianExponents : TExponents = (2);

type
  TCubicMeterSteradianUnit = record
    class operator *(const AValue: double; const ASelf: TCubicMeterSteradianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCubicMeterSteradianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCubicMeterSteradianSymbol     = '%sm3.sr';
  rsCubicMeterSteradianName       = 'cubic %smeter steradian';
  rsCubicMeterSteradianPluralName = 'cubic %smeter steradians';

const
  cCubicMeterSteradianPrefixes  : TPrefixes  = (pNone);
  cCubicMeterSteradianExponents : TExponents = (3);

type
  TSquareMeterSteradianHertzUnit = record
    class operator *(const AValue: double; const ASelf: TSquareMeterSteradianHertzUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TSquareMeterSteradianHertzUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsSquareMeterSteradianHertzSymbol     = '%sm2.sr.%shertz';
  rsSquareMeterSteradianHertzName       = 'square %smeter steradian %shertz';
  rsSquareMeterSteradianHertzPluralName = 'square %smeter steradian %shertz';

const
  cSquareMeterSteradianHertzPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterSteradianHertzExponents : TExponents = (2, 1);

type
  TWattPerSteradianUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerSteradianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerSteradianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerSteradianSymbol     = '%sW/sr';
  rsWattPerSteradianName       = '%swatt per steradian';
  rsWattPerSteradianPluralName = '%swatts per steradian';

const
  cWattPerSteradianPrefixes  : TPrefixes  = (pNone);
  cWattPerSteradianExponents : TExponents = (1);

type
  TWattPerSteradianPerHertzUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerSteradianPerHertzUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerSteradianPerHertzUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerSteradianPerHertzSymbol     = '%sW/sr/%sHz';
  rsWattPerSteradianPerHertzName       = '%swatt per steradian per %shertz';
  rsWattPerSteradianPerHertzPluralName = '%swatts per steradian per %shertz';

const
  cWattPerSteradianPerHertzPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerSteradianPerHertzExponents : TExponents = (1, -1);

type
  TWattPerMeterPerSteradianUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerMeterPerSteradianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerMeterPerSteradianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerMeterPerSteradianSymbol     = '%sW/sr/%sm';
  rsWattPerMeterPerSteradianName       = '%swatt per steradian per %smeter';
  rsWattPerMeterPerSteradianPluralName = '%swatts per steradian per %smeter';

const
  cWattPerMeterPerSteradianPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerMeterPerSteradianExponents : TExponents = (1, -1);

type
  TWattPerSquareMeterPerSteradianUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerSquareMeterPerSteradianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerSquareMeterPerSteradianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerSquareMeterPerSteradianSymbol     = '%sW/%sm2/sr';
  rsWattPerSquareMeterPerSteradianName       = '%swatt per square %smeter per steradian';
  rsWattPerSquareMeterPerSteradianPluralName = '%swatts per square %smeter per steradian';

const
  cWattPerSquareMeterPerSteradianPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerSquareMeterPerSteradianExponents : TExponents = (1, -2);

type
  TWattPerCubicMeterPerSteradianUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerCubicMeterPerSteradianUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerCubicMeterPerSteradianUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerCubicMeterPerSteradianSymbol     = '%sW/%sm3/sr';
  rsWattPerCubicMeterPerSteradianName       = '%swatt per cubic %smeter per steradian';
  rsWattPerCubicMeterPerSteradianPluralName = '%swatts per cubic %smeter per steradian';

const
  cWattPerCubicMeterPerSteradianPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerCubicMeterPerSteradianExponents : TExponents = (1, -3);

type
  TWattPerSquareMeterPerSteradianPerHertzUnit = record
    class operator *(const AValue: double; const ASelf: TWattPerSquareMeterPerSteradianPerHertzUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TWattPerSquareMeterPerSteradianPerHertzUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsWattPerSquareMeterPerSteradianPerHertzSymbol     = '%sW/%sm2/sr/%sHz';
  rsWattPerSquareMeterPerSteradianPerHertzName       = '%swatt per square %smeter per steradian per %shertz';
  rsWattPerSquareMeterPerSteradianPerHertzPluralName = '%swatts per square %smeter per steradian per %shertz';

const
  cWattPerSquareMeterPerSteradianPerHertzPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cWattPerSquareMeterPerSteradianPerHertzExponents : TExponents = (1, -2, -1);

type
  TKatalPerCubicMeterUnit = record
    class operator *(const AValue: double; const ASelf: TKatalPerCubicMeterUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TKatalPerCubicMeterUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsKatalPerCubicMeterSymbol     = '%skat/%sm3';
  rsKatalPerCubicMeterName       = '%skatal per cubic %smeter';
  rsKatalPerCubicMeterPluralName = '%skatals per cubic %smeter';

const
  cKatalPerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cKatalPerCubicMeterExponents : TExponents = (1, -3);

type
  TCoulombPerMoleUnit = record
    class operator *(const AValue: double; const ASelf: TCoulombPerMoleUnit): TQuantity; inline;
  {$IFOPT D+}
    class operator *(const AValue: TQuantity; const ASelf: TCoulombPerMoleUnit): TQuantity; inline;
  {$ENDIF}
  end;

const
  rsCoulombPerMoleSymbol     = '%sC/%smol';
  rsCoulombPerMoleName       = '%scoulomb per %smole';
  rsCoulombPerMolePluralName = '%scoulombs per %smole';

const
  cCoulombPerMolePrefixes  : TPrefixes  = (pNone, pNone);
  cCoulombPerMoleExponents : TExponents = (1, -1);

{ Helpers }

function SecondToString(const AValue: TQuantity): string;
function SecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SecondToVerboseString(const AValue: TQuantity): string;
function SecondToFloat(const AValue: TQuantity): double;
function DayToString(const AValue: TQuantity): string;
function DayVerboseToString(const AValue: TQuantity): string;
function DayToFloat(const AValue: TQuantity): double;
function HourToString(const AValue: TQuantity): string;
function HourVerboseToString(const AValue: TQuantity): string;
function HourToFloat(const AValue: TQuantity): double;
function MinuteToString(const AValue: TQuantity): string;
function MinuteVerboseToString(const AValue: TQuantity): string;
function MinuteToFloat(const AValue: TQuantity): double;
function SquareSecondToString(const AValue: TQuantity): string;
function SquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareSecondToVerboseString(const AValue: TQuantity): string;
function SquareSecondToFloat(const AValue: TQuantity): double;
function SquareDayToString(const AValue: TQuantity): string;
function SquareDayVerboseToString(const AValue: TQuantity): string;
function SquareDayToFloat(const AValue: TQuantity): double;
function SquareHourToString(const AValue: TQuantity): string;
function SquareHourVerboseToString(const AValue: TQuantity): string;
function SquareHourToFloat(const AValue: TQuantity): double;
function SquareMinuteToString(const AValue: TQuantity): string;
function SquareMinuteVerboseToString(const AValue: TQuantity): string;
function SquareMinuteToFloat(const AValue: TQuantity): double;
function CubicSecondToString(const AValue: TQuantity): string;
function CubicSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CubicSecondToVerboseString(const AValue: TQuantity): string;
function CubicSecondToFloat(const AValue: TQuantity): double;
function QuarticSecondToString(const AValue: TQuantity): string;
function QuarticSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function QuarticSecondToVerboseString(const AValue: TQuantity): string;
function QuarticSecondToFloat(const AValue: TQuantity): double;
function QuinticSecondToString(const AValue: TQuantity): string;
function QuinticSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function QuinticSecondToVerboseString(const AValue: TQuantity): string;
function QuinticSecondToFloat(const AValue: TQuantity): double;
function SexticSecondToString(const AValue: TQuantity): string;
function SexticSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SexticSecondToVerboseString(const AValue: TQuantity): string;
function SexticSecondToFloat(const AValue: TQuantity): double;
function MeterToString(const AValue: TQuantity): string;
function MeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterToVerboseString(const AValue: TQuantity): string;
function MeterToFloat(const AValue: TQuantity): double;
function AstronomicalToString(const AValue: TQuantity): string;
function AstronomicalVerboseToString(const AValue: TQuantity): string;
function AstronomicalToFloat(const AValue: TQuantity): double;
function InchToString(const AValue: TQuantity): string;
function InchVerboseToString(const AValue: TQuantity): string;
function InchToFloat(const AValue: TQuantity): double;
function FootToString(const AValue: TQuantity): string;
function FootVerboseToString(const AValue: TQuantity): string;
function FootToFloat(const AValue: TQuantity): double;
function YardToString(const AValue: TQuantity): string;
function YardVerboseToString(const AValue: TQuantity): string;
function YardToFloat(const AValue: TQuantity): double;
function MileToString(const AValue: TQuantity): string;
function MileVerboseToString(const AValue: TQuantity): string;
function MileToFloat(const AValue: TQuantity): double;
function NauticalMileToString(const AValue: TQuantity): string;
function NauticalMileVerboseToString(const AValue: TQuantity): string;
function NauticalMileToFloat(const AValue: TQuantity): double;
function AngstromToString(const AValue: TQuantity): string;
function AngstromVerboseToString(const AValue: TQuantity): string;
function AngstromToFloat(const AValue: TQuantity): double;
function SquareRootMeterToString(const AValue: TQuantity): string;
function SquareRootMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareRootMeterToVerboseString(const AValue: TQuantity): string;
function SquareRootMeterToFloat(const AValue: TQuantity): double;
function SquareMeterToString(const AValue: TQuantity): string;
function SquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareMeterToVerboseString(const AValue: TQuantity): string;
function SquareMeterToFloat(const AValue: TQuantity): double;
function SquareInchToString(const AValue: TQuantity): string;
function SquareInchVerboseToString(const AValue: TQuantity): string;
function SquareInchToFloat(const AValue: TQuantity): double;
function SquareFootToString(const AValue: TQuantity): string;
function SquareFootVerboseToString(const AValue: TQuantity): string;
function SquareFootToFloat(const AValue: TQuantity): double;
function SquareYardToString(const AValue: TQuantity): string;
function SquareYardVerboseToString(const AValue: TQuantity): string;
function SquareYardToFloat(const AValue: TQuantity): double;
function SquareMileToString(const AValue: TQuantity): string;
function SquareMileVerboseToString(const AValue: TQuantity): string;
function SquareMileToFloat(const AValue: TQuantity): double;
function CubicMeterToString(const AValue: TQuantity): string;
function CubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CubicMeterToVerboseString(const AValue: TQuantity): string;
function CubicMeterToFloat(const AValue: TQuantity): double;
function CubicInchToString(const AValue: TQuantity): string;
function CubicInchVerboseToString(const AValue: TQuantity): string;
function CubicInchToFloat(const AValue: TQuantity): double;
function CubicFootToString(const AValue: TQuantity): string;
function CubicFootVerboseToString(const AValue: TQuantity): string;
function CubicFootToFloat(const AValue: TQuantity): double;
function CubicYardToString(const AValue: TQuantity): string;
function CubicYardVerboseToString(const AValue: TQuantity): string;
function CubicYardToFloat(const AValue: TQuantity): double;
function LitreToString(const AValue: TQuantity): string;
function LitreVerboseToString(const AValue: TQuantity): string;
function LitreToFloat(const AValue: TQuantity): double;
function GallonToString(const AValue: TQuantity): string;
function GallonVerboseToString(const AValue: TQuantity): string;
function GallonToFloat(const AValue: TQuantity): double;
function QuarticMeterToString(const AValue: TQuantity): string;
function QuarticMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function QuarticMeterToVerboseString(const AValue: TQuantity): string;
function QuarticMeterToFloat(const AValue: TQuantity): double;
function QuinticMeterToString(const AValue: TQuantity): string;
function QuinticMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function QuinticMeterToVerboseString(const AValue: TQuantity): string;
function QuinticMeterToFloat(const AValue: TQuantity): double;
function SexticMeterToString(const AValue: TQuantity): string;
function SexticMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SexticMeterToVerboseString(const AValue: TQuantity): string;
function SexticMeterToFloat(const AValue: TQuantity): double;
function KilogramToString(const AValue: TQuantity): string;
function KilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramToVerboseString(const AValue: TQuantity): string;
function KilogramToFloat(const AValue: TQuantity): double;
function TonneToString(const AValue: TQuantity): string;
function TonneVerboseToString(const AValue: TQuantity): string;
function TonneToFloat(const AValue: TQuantity): double;
function PoundToString(const AValue: TQuantity): string;
function PoundVerboseToString(const AValue: TQuantity): string;
function PoundToFloat(const AValue: TQuantity): double;
function OunceToString(const AValue: TQuantity): string;
function OunceVerboseToString(const AValue: TQuantity): string;
function OunceToFloat(const AValue: TQuantity): double;
function StoneToString(const AValue: TQuantity): string;
function StoneVerboseToString(const AValue: TQuantity): string;
function StoneToFloat(const AValue: TQuantity): double;
function TonToString(const AValue: TQuantity): string;
function TonVerboseToString(const AValue: TQuantity): string;
function TonToFloat(const AValue: TQuantity): double;
function ElectronvoltPerSquareSpeedOfLightToString(const AValue: TQuantity): string;
function ElectronvoltPerSquareSpeedOfLightVerboseToString(const AValue: TQuantity): string;
function ElectronvoltPerSquareSpeedOfLightToFloat(const AValue: TQuantity): double;
function SquareKilogramToString(const AValue: TQuantity): string;
function SquareKilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareKilogramToVerboseString(const AValue: TQuantity): string;
function SquareKilogramToFloat(const AValue: TQuantity): double;
function AmpereToString(const AValue: TQuantity): string;
function AmpereToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function AmpereToVerboseString(const AValue: TQuantity): string;
function AmpereToFloat(const AValue: TQuantity): double;
function SquareAmpereToString(const AValue: TQuantity): string;
function SquareAmpereToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareAmpereToVerboseString(const AValue: TQuantity): string;
function SquareAmpereToFloat(const AValue: TQuantity): double;
function KelvinToString(const AValue: TQuantity): string;
function KelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KelvinToVerboseString(const AValue: TQuantity): string;
function KelvinToFloat(const AValue: TQuantity): double;
function DegreeCelsiusToString(const AValue: TQuantity): string;
function DegreeCelsiusVerboseToString(const AValue: TQuantity): string;
function DegreeCelsiusToFloat(const AValue: TQuantity): double;
function DegreeFahrenheitToString(const AValue: TQuantity): string;
function DegreeFahrenheitVerboseToString(const AValue: TQuantity): string;
function DegreeFahrenheitToFloat(const AValue: TQuantity): double;
function SquareKelvinToString(const AValue: TQuantity): string;
function SquareKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareKelvinToVerboseString(const AValue: TQuantity): string;
function SquareKelvinToFloat(const AValue: TQuantity): double;
function CubicKelvinToString(const AValue: TQuantity): string;
function CubicKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CubicKelvinToVerboseString(const AValue: TQuantity): string;
function CubicKelvinToFloat(const AValue: TQuantity): double;
function QuarticKelvinToString(const AValue: TQuantity): string;
function QuarticKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function QuarticKelvinToVerboseString(const AValue: TQuantity): string;
function QuarticKelvinToFloat(const AValue: TQuantity): double;
function MoleToString(const AValue: TQuantity): string;
function MoleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MoleToVerboseString(const AValue: TQuantity): string;
function MoleToFloat(const AValue: TQuantity): double;
function CandelaToString(const AValue: TQuantity): string;
function CandelaToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CandelaToVerboseString(const AValue: TQuantity): string;
function CandelaToFloat(const AValue: TQuantity): double;
function RadianToString(const AValue: TQuantity): string;
function RadianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function RadianToVerboseString(const AValue: TQuantity): string;
function RadianToFloat(const AValue: TQuantity): double;
function DegreeToString(const AValue: TQuantity): string;
function DegreeVerboseToString(const AValue: TQuantity): string;
function DegreeToFloat(const AValue: TQuantity): double;
function SteradianToString(const AValue: TQuantity): string;
function SteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SteradianToVerboseString(const AValue: TQuantity): string;
function SteradianToFloat(const AValue: TQuantity): double;
function SquareDegreeToString(const AValue: TQuantity): string;
function SquareDegreeVerboseToString(const AValue: TQuantity): string;
function SquareDegreeToFloat(const AValue: TQuantity): double;
function HertzToString(const AValue: TQuantity): string;
function HertzToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function HertzToVerboseString(const AValue: TQuantity): string;
function HertzToFloat(const AValue: TQuantity): double;
function ReciprocalSecondToString(const AValue: TQuantity): string;
function ReciprocalSecondVerboseToString(const AValue: TQuantity): string;
function ReciprocalSecondToFloat(const AValue: TQuantity): double;
function RadianPerSecondToString(const AValue: TQuantity): string;
function RadianPerSecondVerboseToString(const AValue: TQuantity): string;
function RadianPerSecondToFloat(const AValue: TQuantity): double;
function SquareHertzToString(const AValue: TQuantity): string;
function SquareHertzToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareHertzToVerboseString(const AValue: TQuantity): string;
function SquareHertzToFloat(const AValue: TQuantity): double;
function ReciprocalSquareSecondToString(const AValue: TQuantity): string;
function ReciprocalSquareSecondVerboseToString(const AValue: TQuantity): string;
function ReciprocalSquareSecondToFloat(const AValue: TQuantity): double;
function RadianPerSquareSecondToString(const AValue: TQuantity): string;
function RadianPerSquareSecondVerboseToString(const AValue: TQuantity): string;
function RadianPerSquareSecondToFloat(const AValue: TQuantity): double;
function SteradianPerSquareSecondToString(const AValue: TQuantity): string;
function SteradianPerSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SteradianPerSquareSecondToVerboseString(const AValue: TQuantity): string;
function SteradianPerSquareSecondToFloat(const AValue: TQuantity): double;
function MeterPerSecondToString(const AValue: TQuantity): string;
function MeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterPerSecondToVerboseString(const AValue: TQuantity): string;
function MeterPerSecondToFloat(const AValue: TQuantity): double;
function MeterPerHourToString(const AValue: TQuantity): string;
function MeterPerHourVerboseToString(const AValue: TQuantity): string;
function MeterPerHourToFloat(const AValue: TQuantity): double;
function MilePerHourToString(const AValue: TQuantity): string;
function MilePerHourVerboseToString(const AValue: TQuantity): string;
function MilePerHourToFloat(const AValue: TQuantity): double;
function NauticalMilePerHourToString(const AValue: TQuantity): string;
function NauticalMilePerHourVerboseToString(const AValue: TQuantity): string;
function NauticalMilePerHourToFloat(const AValue: TQuantity): double;
function MeterPerSquareSecondToString(const AValue: TQuantity): string;
function MeterPerSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterPerSquareSecondToVerboseString(const AValue: TQuantity): string;
function MeterPerSquareSecondToFloat(const AValue: TQuantity): double;
function MeterPerSecondPerSecondToString(const AValue: TQuantity): string;
function MeterPerSecondPerSecondVerboseToString(const AValue: TQuantity): string;
function MeterPerSecondPerSecondToFloat(const AValue: TQuantity): double;
function MeterPerHourPerSecondToString(const AValue: TQuantity): string;
function MeterPerHourPerSecondVerboseToString(const AValue: TQuantity): string;
function MeterPerHourPerSecondToFloat(const AValue: TQuantity): double;
function MeterPerCubicSecondToString(const AValue: TQuantity): string;
function MeterPerCubicSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterPerCubicSecondToVerboseString(const AValue: TQuantity): string;
function MeterPerCubicSecondToFloat(const AValue: TQuantity): double;
function MeterPerQuarticSecondToString(const AValue: TQuantity): string;
function MeterPerQuarticSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterPerQuarticSecondToVerboseString(const AValue: TQuantity): string;
function MeterPerQuarticSecondToFloat(const AValue: TQuantity): double;
function MeterPerQuinticSecondToString(const AValue: TQuantity): string;
function MeterPerQuinticSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterPerQuinticSecondToVerboseString(const AValue: TQuantity): string;
function MeterPerQuinticSecondToFloat(const AValue: TQuantity): double;
function MeterPerSexticSecondToString(const AValue: TQuantity): string;
function MeterPerSexticSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterPerSexticSecondToVerboseString(const AValue: TQuantity): string;
function MeterPerSexticSecondToFloat(const AValue: TQuantity): double;
function SquareMeterPerSquareSecondToString(const AValue: TQuantity): string;
function SquareMeterPerSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareMeterPerSquareSecondToVerboseString(const AValue: TQuantity): string;
function SquareMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
function JoulePerKilogramToString(const AValue: TQuantity): string;
function JoulePerKilogramVerboseToString(const AValue: TQuantity): string;
function JoulePerKilogramToFloat(const AValue: TQuantity): double;
function GrayToString(const AValue: TQuantity): string;
function GrayVerboseToString(const AValue: TQuantity): string;
function GrayToFloat(const AValue: TQuantity): double;
function SievertToString(const AValue: TQuantity): string;
function SievertVerboseToString(const AValue: TQuantity): string;
function SievertToFloat(const AValue: TQuantity): double;
function MeterSecondToString(const AValue: TQuantity): string;
function MeterSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterSecondToVerboseString(const AValue: TQuantity): string;
function MeterSecondToFloat(const AValue: TQuantity): double;
function KilogramMeterToString(const AValue: TQuantity): string;
function KilogramMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramMeterToVerboseString(const AValue: TQuantity): string;
function KilogramMeterToFloat(const AValue: TQuantity): double;
function KilogramPerSecondToString(const AValue: TQuantity): string;
function KilogramPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramPerSecondToVerboseString(const AValue: TQuantity): string;
function KilogramPerSecondToFloat(const AValue: TQuantity): double;
function JoulePerSquareMeterPerHertzToString(const AValue: TQuantity): string;
function JoulePerSquareMeterPerHertzVerboseToString(const AValue: TQuantity): string;
function JoulePerSquareMeterPerHertzToFloat(const AValue: TQuantity): double;
function KilogramMeterPerSecondToString(const AValue: TQuantity): string;
function KilogramMeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramMeterPerSecondToVerboseString(const AValue: TQuantity): string;
function KilogramMeterPerSecondToFloat(const AValue: TQuantity): double;
function NewtonSecondToString(const AValue: TQuantity): string;
function NewtonSecondVerboseToString(const AValue: TQuantity): string;
function NewtonSecondToFloat(const AValue: TQuantity): double;
function SquareKilogramSquareMeterPerSquareSecondToString(const AValue: TQuantity): string;
function SquareKilogramSquareMeterPerSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareKilogramSquareMeterPerSquareSecondToVerboseString(const AValue: TQuantity): string;
function SquareKilogramSquareMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
function ReciprocalSquareRootMeterToString(const AValue: TQuantity): string;
function ReciprocalSquareRootMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function ReciprocalSquareRootMeterToVerboseString(const AValue: TQuantity): string;
function ReciprocalSquareRootMeterToFloat(const AValue: TQuantity): double;
function ReciprocalMeterToString(const AValue: TQuantity): string;
function ReciprocalMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function ReciprocalMeterToVerboseString(const AValue: TQuantity): string;
function ReciprocalMeterToFloat(const AValue: TQuantity): double;
function DioptreToString(const AValue: TQuantity): string;
function DioptreVerboseToString(const AValue: TQuantity): string;
function DioptreToFloat(const AValue: TQuantity): double;
function ReciprocalSquareRootCubicMeterToString(const AValue: TQuantity): string;
function ReciprocalSquareRootCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function ReciprocalSquareRootCubicMeterToVerboseString(const AValue: TQuantity): string;
function ReciprocalSquareRootCubicMeterToFloat(const AValue: TQuantity): double;
function ReciprocalSquareMeterToString(const AValue: TQuantity): string;
function ReciprocalSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function ReciprocalSquareMeterToVerboseString(const AValue: TQuantity): string;
function ReciprocalSquareMeterToFloat(const AValue: TQuantity): double;
function ReciprocalCubicMeterToString(const AValue: TQuantity): string;
function ReciprocalCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function ReciprocalCubicMeterToVerboseString(const AValue: TQuantity): string;
function ReciprocalCubicMeterToFloat(const AValue: TQuantity): double;
function ReciprocalQuarticMeterToString(const AValue: TQuantity): string;
function ReciprocalQuarticMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function ReciprocalQuarticMeterToVerboseString(const AValue: TQuantity): string;
function ReciprocalQuarticMeterToFloat(const AValue: TQuantity): double;
function KilogramSquareMeterToString(const AValue: TQuantity): string;
function KilogramSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramSquareMeterToVerboseString(const AValue: TQuantity): string;
function KilogramSquareMeterToFloat(const AValue: TQuantity): double;
function KilogramSquareMeterPerSecondToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramSquareMeterPerSecondToVerboseString(const AValue: TQuantity): string;
function KilogramSquareMeterPerSecondToFloat(const AValue: TQuantity): double;
function NewtonMeterSecondToString(const AValue: TQuantity): string;
function NewtonMeterSecondVerboseToString(const AValue: TQuantity): string;
function NewtonMeterSecondToFloat(const AValue: TQuantity): double;
function SecondPerMeterToString(const AValue: TQuantity): string;
function SecondPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SecondPerMeterToVerboseString(const AValue: TQuantity): string;
function SecondPerMeterToFloat(const AValue: TQuantity): double;
function KilogramPerMeterToString(const AValue: TQuantity): string;
function KilogramPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramPerMeterToVerboseString(const AValue: TQuantity): string;
function KilogramPerMeterToFloat(const AValue: TQuantity): double;
function KilogramPerSquareMeterToString(const AValue: TQuantity): string;
function KilogramPerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramPerSquareMeterToVerboseString(const AValue: TQuantity): string;
function KilogramPerSquareMeterToFloat(const AValue: TQuantity): double;
function KilogramPerCubicMeterToString(const AValue: TQuantity): string;
function KilogramPerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramPerCubicMeterToVerboseString(const AValue: TQuantity): string;
function KilogramPerCubicMeterToFloat(const AValue: TQuantity): double;
function PoundPerCubicInchToString(const AValue: TQuantity): string;
function PoundPerCubicInchVerboseToString(const AValue: TQuantity): string;
function PoundPerCubicInchToFloat(const AValue: TQuantity): double;
function NewtonToString(const AValue: TQuantity): string;
function NewtonToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function NewtonToVerboseString(const AValue: TQuantity): string;
function NewtonToFloat(const AValue: TQuantity): double;
function PoundForceToString(const AValue: TQuantity): string;
function PoundForceVerboseToString(const AValue: TQuantity): string;
function PoundForceToFloat(const AValue: TQuantity): double;
function KilogramMeterPerSquareSecondToString(const AValue: TQuantity): string;
function KilogramMeterPerSquareSecondVerboseToString(const AValue: TQuantity): string;
function KilogramMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
function NewtonRadianToString(const AValue: TQuantity): string;
function NewtonRadianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function NewtonRadianToVerboseString(const AValue: TQuantity): string;
function NewtonRadianToFloat(const AValue: TQuantity): double;
function SquareNewtonToString(const AValue: TQuantity): string;
function SquareNewtonToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareNewtonToVerboseString(const AValue: TQuantity): string;
function SquareNewtonToFloat(const AValue: TQuantity): double;
function SquareKilogramSquareMeterPerQuarticSecondToString(const AValue: TQuantity): string;
function SquareKilogramSquareMeterPerQuarticSecondVerboseToString(const AValue: TQuantity): string;
function SquareKilogramSquareMeterPerQuarticSecondToFloat(const AValue: TQuantity): double;
function PascalToString(const AValue: TQuantity): string;
function PascalToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function PascalToVerboseString(const AValue: TQuantity): string;
function PascalToFloat(const AValue: TQuantity): double;
function NewtonPerSquareMeterToString(const AValue: TQuantity): string;
function NewtonPerSquareMeterVerboseToString(const AValue: TQuantity): string;
function NewtonPerSquareMeterToFloat(const AValue: TQuantity): double;
function BarToString(const AValue: TQuantity): string;
function BarVerboseToString(const AValue: TQuantity): string;
function BarToFloat(const AValue: TQuantity): double;
function PoundPerSquareInchToString(const AValue: TQuantity): string;
function PoundPerSquareInchVerboseToString(const AValue: TQuantity): string;
function PoundPerSquareInchToFloat(const AValue: TQuantity): double;
function JoulePerCubicMeterToString(const AValue: TQuantity): string;
function JoulePerCubicMeterVerboseToString(const AValue: TQuantity): string;
function JoulePerCubicMeterToFloat(const AValue: TQuantity): double;
function KilogramPerMeterPerSquareSecondToString(const AValue: TQuantity): string;
function KilogramPerMeterPerSquareSecondVerboseToString(const AValue: TQuantity): string;
function KilogramPerMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
function JouleToString(const AValue: TQuantity): string;
function JouleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function JouleToVerboseString(const AValue: TQuantity): string;
function JouleToFloat(const AValue: TQuantity): double;
function WattHourToString(const AValue: TQuantity): string;
function WattHourVerboseToString(const AValue: TQuantity): string;
function WattHourToFloat(const AValue: TQuantity): double;
function WattSecondToString(const AValue: TQuantity): string;
function WattSecondVerboseToString(const AValue: TQuantity): string;
function WattSecondToFloat(const AValue: TQuantity): double;
function WattPerHertzToString(const AValue: TQuantity): string;
function WattPerHertzVerboseToString(const AValue: TQuantity): string;
function WattPerHertzToFloat(const AValue: TQuantity): double;
function ElectronvoltToString(const AValue: TQuantity): string;
function ElectronvoltVerboseToString(const AValue: TQuantity): string;
function ElectronvoltToFloat(const AValue: TQuantity): double;
function NewtonMeterToString(const AValue: TQuantity): string;
function NewtonMeterVerboseToString(const AValue: TQuantity): string;
function NewtonMeterToFloat(const AValue: TQuantity): double;
function PoundForceInchToString(const AValue: TQuantity): string;
function PoundForceInchVerboseToString(const AValue: TQuantity): string;
function PoundForceInchToFloat(const AValue: TQuantity): double;
function RydbergToString(const AValue: TQuantity): string;
function RydbergVerboseToString(const AValue: TQuantity): string;
function RydbergToFloat(const AValue: TQuantity): double;
function CalorieToString(const AValue: TQuantity): string;
function CalorieVerboseToString(const AValue: TQuantity): string;
function CalorieToFloat(const AValue: TQuantity): double;
function KilogramSquareMeterPerSquareSecondToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerSquareSecondVerboseToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
function JoulePerRadianToString(const AValue: TQuantity): string;
function JoulePerRadianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function JoulePerRadianToVerboseString(const AValue: TQuantity): string;
function JoulePerRadianToFloat(const AValue: TQuantity): double;
function JoulePerDegreeToString(const AValue: TQuantity): string;
function JoulePerDegreeVerboseToString(const AValue: TQuantity): string;
function JoulePerDegreeToFloat(const AValue: TQuantity): double;
function NewtonMeterPerRadianToString(const AValue: TQuantity): string;
function NewtonMeterPerRadianVerboseToString(const AValue: TQuantity): string;
function NewtonMeterPerRadianToFloat(const AValue: TQuantity): double;
function NewtonMeterPerDegreeToString(const AValue: TQuantity): string;
function NewtonMeterPerDegreeVerboseToString(const AValue: TQuantity): string;
function NewtonMeterPerDegreeToFloat(const AValue: TQuantity): double;
function KilogramSquareMeterPerSquareSecondPerRadianToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerSquareSecondPerRadianVerboseToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerSquareSecondPerRadianToFloat(const AValue: TQuantity): double;
function WattToString(const AValue: TQuantity): string;
function WattToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattToVerboseString(const AValue: TQuantity): string;
function WattToFloat(const AValue: TQuantity): double;
function KilogramSquareMeterPerCubicSecondToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerCubicSecondVerboseToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerCubicSecondToFloat(const AValue: TQuantity): double;
function CoulombToString(const AValue: TQuantity): string;
function CoulombToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CoulombToVerboseString(const AValue: TQuantity): string;
function CoulombToFloat(const AValue: TQuantity): double;
function AmpereHourToString(const AValue: TQuantity): string;
function AmpereHourVerboseToString(const AValue: TQuantity): string;
function AmpereHourToFloat(const AValue: TQuantity): double;
function AmpereSecondToString(const AValue: TQuantity): string;
function AmpereSecondVerboseToString(const AValue: TQuantity): string;
function AmpereSecondToFloat(const AValue: TQuantity): double;
function SquareCoulombToString(const AValue: TQuantity): string;
function SquareCoulombToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareCoulombToVerboseString(const AValue: TQuantity): string;
function SquareCoulombToFloat(const AValue: TQuantity): double;
function SquareAmpereSquareSecondToString(const AValue: TQuantity): string;
function SquareAmpereSquareSecondVerboseToString(const AValue: TQuantity): string;
function SquareAmpereSquareSecondToFloat(const AValue: TQuantity): double;
function CoulombMeterToString(const AValue: TQuantity): string;
function CoulombMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CoulombMeterToVerboseString(const AValue: TQuantity): string;
function CoulombMeterToFloat(const AValue: TQuantity): double;
function VoltToString(const AValue: TQuantity): string;
function VoltToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function VoltToVerboseString(const AValue: TQuantity): string;
function VoltToFloat(const AValue: TQuantity): double;
function JoulePerCoulombToString(const AValue: TQuantity): string;
function JoulePerCoulombVerboseToString(const AValue: TQuantity): string;
function JoulePerCoulombToFloat(const AValue: TQuantity): double;
function KilogramSquareMeterPerAmperePerCubicSecondToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerAmperePerCubicSecondVerboseToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerAmperePerCubicSecondToFloat(const AValue: TQuantity): double;
function SquareVoltToString(const AValue: TQuantity): string;
function SquareVoltToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareVoltToVerboseString(const AValue: TQuantity): string;
function SquareVoltToFloat(const AValue: TQuantity): double;
function SquareKilogramQuarticMeterPerSquareAmperePerSexticSecondToString(const AValue: TQuantity): string;
function SquareKilogramQuarticMeterPerSquareAmperePerSexticSecondVerboseToString(const AValue: TQuantity): string;
function SquareKilogramQuarticMeterPerSquareAmperePerSexticSecondToFloat(const AValue: TQuantity): double;
function FaradToString(const AValue: TQuantity): string;
function FaradToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function FaradToVerboseString(const AValue: TQuantity): string;
function FaradToFloat(const AValue: TQuantity): double;
function CoulombPerVoltToString(const AValue: TQuantity): string;
function CoulombPerVoltVerboseToString(const AValue: TQuantity): string;
function CoulombPerVoltToFloat(const AValue: TQuantity): double;
function SquareAmpereQuarticSecondPerKilogramPerSquareMeterToString(const AValue: TQuantity): string;
function SquareAmpereQuarticSecondPerKilogramPerSquareMeterVerboseToString(const AValue: TQuantity): string;
function SquareAmpereQuarticSecondPerKilogramPerSquareMeterToFloat(const AValue: TQuantity): double;
function OhmToString(const AValue: TQuantity): string;
function OhmToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function OhmToVerboseString(const AValue: TQuantity): string;
function OhmToFloat(const AValue: TQuantity): double;
function KilogramSquareMeterPerSquareAmperePerCubicSecondToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerSquareAmperePerCubicSecondVerboseToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerSquareAmperePerCubicSecondToFloat(const AValue: TQuantity): double;
function SiemensToString(const AValue: TQuantity): string;
function SiemensToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SiemensToVerboseString(const AValue: TQuantity): string;
function SiemensToFloat(const AValue: TQuantity): double;
function SquareAmpereCubicSecondPerKilogramPerSquareMeterToString(const AValue: TQuantity): string;
function SquareAmpereCubicSecondPerKilogramPerSquareMeterVerboseToString(const AValue: TQuantity): string;
function SquareAmpereCubicSecondPerKilogramPerSquareMeterToFloat(const AValue: TQuantity): double;
function SiemensPerMeterToString(const AValue: TQuantity): string;
function SiemensPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SiemensPerMeterToVerboseString(const AValue: TQuantity): string;
function SiemensPerMeterToFloat(const AValue: TQuantity): double;
function TeslaToString(const AValue: TQuantity): string;
function TeslaToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function TeslaToVerboseString(const AValue: TQuantity): string;
function TeslaToFloat(const AValue: TQuantity): double;
function WeberPerSquareMeterToString(const AValue: TQuantity): string;
function WeberPerSquareMeterVerboseToString(const AValue: TQuantity): string;
function WeberPerSquareMeterToFloat(const AValue: TQuantity): double;
function KilogramPerAmperePerSquareSecondToString(const AValue: TQuantity): string;
function KilogramPerAmperePerSquareSecondVerboseToString(const AValue: TQuantity): string;
function KilogramPerAmperePerSquareSecondToFloat(const AValue: TQuantity): double;
function WeberToString(const AValue: TQuantity): string;
function WeberToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WeberToVerboseString(const AValue: TQuantity): string;
function WeberToFloat(const AValue: TQuantity): double;
function KilogramSquareMeterPerAmperePerSquareSecondToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerAmperePerSquareSecondVerboseToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerAmperePerSquareSecondToFloat(const AValue: TQuantity): double;
function HenryToString(const AValue: TQuantity): string;
function HenryToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function HenryToVerboseString(const AValue: TQuantity): string;
function HenryToFloat(const AValue: TQuantity): double;
function KilogramSquareMeterPerSquareAmperePerSquareSecondToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerSquareAmperePerSquareSecondVerboseToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerSquareAmperePerSquareSecondToFloat(const AValue: TQuantity): double;
function ReciprocalHenryToString(const AValue: TQuantity): string;
function ReciprocalHenryToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function ReciprocalHenryToVerboseString(const AValue: TQuantity): string;
function ReciprocalHenryToFloat(const AValue: TQuantity): double;
function LumenToString(const AValue: TQuantity): string;
function LumenToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function LumenToVerboseString(const AValue: TQuantity): string;
function LumenToFloat(const AValue: TQuantity): double;
function CandelaSteradianToString(const AValue: TQuantity): string;
function CandelaSteradianVerboseToString(const AValue: TQuantity): string;
function CandelaSteradianToFloat(const AValue: TQuantity): double;
function LumenSecondToString(const AValue: TQuantity): string;
function LumenSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function LumenSecondToVerboseString(const AValue: TQuantity): string;
function LumenSecondToFloat(const AValue: TQuantity): double;
function LumenSecondPerCubicMeterToString(const AValue: TQuantity): string;
function LumenSecondPerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function LumenSecondPerCubicMeterToVerboseString(const AValue: TQuantity): string;
function LumenSecondPerCubicMeterToFloat(const AValue: TQuantity): double;
function LuxToString(const AValue: TQuantity): string;
function LuxToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function LuxToVerboseString(const AValue: TQuantity): string;
function LuxToFloat(const AValue: TQuantity): double;
function CandelaSteradianPerSquareMeterToString(const AValue: TQuantity): string;
function CandelaSteradianPerSquareMeterVerboseToString(const AValue: TQuantity): string;
function CandelaSteradianPerSquareMeterToFloat(const AValue: TQuantity): double;
function LuxSecondToString(const AValue: TQuantity): string;
function LuxSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function LuxSecondToVerboseString(const AValue: TQuantity): string;
function LuxSecondToFloat(const AValue: TQuantity): double;
function BequerelToString(const AValue: TQuantity): string;
function BequerelVerboseToString(const AValue: TQuantity): string;
function BequerelToFloat(const AValue: TQuantity): double;
function KatalToString(const AValue: TQuantity): string;
function KatalToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KatalToVerboseString(const AValue: TQuantity): string;
function KatalToFloat(const AValue: TQuantity): double;
function MolePerSecondToString(const AValue: TQuantity): string;
function MolePerSecondVerboseToString(const AValue: TQuantity): string;
function MolePerSecondToFloat(const AValue: TQuantity): double;
function NewtonPerCubicMeterToString(const AValue: TQuantity): string;
function NewtonPerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function NewtonPerCubicMeterToVerboseString(const AValue: TQuantity): string;
function NewtonPerCubicMeterToFloat(const AValue: TQuantity): double;
function PascalPerMeterToString(const AValue: TQuantity): string;
function PascalPerMeterVerboseToString(const AValue: TQuantity): string;
function PascalPerMeterToFloat(const AValue: TQuantity): double;
function KilogramPerSquareMeterPerSquareSecondToString(const AValue: TQuantity): string;
function KilogramPerSquareMeterPerSquareSecondVerboseToString(const AValue: TQuantity): string;
function KilogramPerSquareMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
function NewtonPerMeterToString(const AValue: TQuantity): string;
function NewtonPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function NewtonPerMeterToVerboseString(const AValue: TQuantity): string;
function NewtonPerMeterToFloat(const AValue: TQuantity): double;
function JoulePerSquareMeterToString(const AValue: TQuantity): string;
function JoulePerSquareMeterVerboseToString(const AValue: TQuantity): string;
function JoulePerSquareMeterToFloat(const AValue: TQuantity): double;
function WattPerSquareMeterPerHertzToString(const AValue: TQuantity): string;
function WattPerSquareMeterPerHertzVerboseToString(const AValue: TQuantity): string;
function WattPerSquareMeterPerHertzToFloat(const AValue: TQuantity): double;
function PoundForcePerInchToString(const AValue: TQuantity): string;
function PoundForcePerInchVerboseToString(const AValue: TQuantity): string;
function PoundForcePerInchToFloat(const AValue: TQuantity): double;
function KilogramPerSquareSecondToString(const AValue: TQuantity): string;
function KilogramPerSquareSecondVerboseToString(const AValue: TQuantity): string;
function KilogramPerSquareSecondToFloat(const AValue: TQuantity): double;
function CubicMeterPerSecondToString(const AValue: TQuantity): string;
function CubicMeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CubicMeterPerSecondToVerboseString(const AValue: TQuantity): string;
function CubicMeterPerSecondToFloat(const AValue: TQuantity): double;
function PoiseuilleToString(const AValue: TQuantity): string;
function PoiseuilleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function PoiseuilleToVerboseString(const AValue: TQuantity): string;
function PoiseuilleToFloat(const AValue: TQuantity): double;
function PascalSecondToString(const AValue: TQuantity): string;
function PascalSecondVerboseToString(const AValue: TQuantity): string;
function PascalSecondToFloat(const AValue: TQuantity): double;
function KilogramPerMeterPerSecondToString(const AValue: TQuantity): string;
function KilogramPerMeterPerSecondVerboseToString(const AValue: TQuantity): string;
function KilogramPerMeterPerSecondToFloat(const AValue: TQuantity): double;
function SquareMeterPerSecondToString(const AValue: TQuantity): string;
function SquareMeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareMeterPerSecondToVerboseString(const AValue: TQuantity): string;
function SquareMeterPerSecondToFloat(const AValue: TQuantity): double;
function KilogramPerQuarticMeterToString(const AValue: TQuantity): string;
function KilogramPerQuarticMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramPerQuarticMeterToVerboseString(const AValue: TQuantity): string;
function KilogramPerQuarticMeterToFloat(const AValue: TQuantity): double;
function QuarticMeterSecondToString(const AValue: TQuantity): string;
function QuarticMeterSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function QuarticMeterSecondToVerboseString(const AValue: TQuantity): string;
function QuarticMeterSecondToFloat(const AValue: TQuantity): double;
function KilogramPerQuarticMeterPerSecondToString(const AValue: TQuantity): string;
function KilogramPerQuarticMeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramPerQuarticMeterPerSecondToVerboseString(const AValue: TQuantity): string;
function KilogramPerQuarticMeterPerSecondToFloat(const AValue: TQuantity): double;
function CubicMeterPerKilogramToString(const AValue: TQuantity): string;
function CubicMeterPerKilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CubicMeterPerKilogramToVerboseString(const AValue: TQuantity): string;
function CubicMeterPerKilogramToFloat(const AValue: TQuantity): double;
function KilogramSquareSecondToString(const AValue: TQuantity): string;
function KilogramSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramSquareSecondToVerboseString(const AValue: TQuantity): string;
function KilogramSquareSecondToFloat(const AValue: TQuantity): double;
function CubicMeterPerSquareSecondToString(const AValue: TQuantity): string;
function CubicMeterPerSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CubicMeterPerSquareSecondToVerboseString(const AValue: TQuantity): string;
function CubicMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
function NewtonSquareMeterToString(const AValue: TQuantity): string;
function NewtonSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function NewtonSquareMeterToVerboseString(const AValue: TQuantity): string;
function NewtonSquareMeterToFloat(const AValue: TQuantity): double;
function KilogramCubicMeterPerSquareSecondToString(const AValue: TQuantity): string;
function KilogramCubicMeterPerSquareSecondVerboseToString(const AValue: TQuantity): string;
function KilogramCubicMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
function NewtonCubicMeterToString(const AValue: TQuantity): string;
function NewtonCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function NewtonCubicMeterToVerboseString(const AValue: TQuantity): string;
function NewtonCubicMeterToFloat(const AValue: TQuantity): double;
function KilogramQuarticMeterPerSquareSecondToString(const AValue: TQuantity): string;
function KilogramQuarticMeterPerSquareSecondVerboseToString(const AValue: TQuantity): string;
function KilogramQuarticMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
function NewtonPerSquareKilogramToString(const AValue: TQuantity): string;
function NewtonPerSquareKilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function NewtonPerSquareKilogramToVerboseString(const AValue: TQuantity): string;
function NewtonPerSquareKilogramToFloat(const AValue: TQuantity): double;
function MeterPerKilogramPerSquareSecondToString(const AValue: TQuantity): string;
function MeterPerKilogramPerSquareSecondVerboseToString(const AValue: TQuantity): string;
function MeterPerKilogramPerSquareSecondToFloat(const AValue: TQuantity): double;
function SquareKilogramPerMeterToString(const AValue: TQuantity): string;
function SquareKilogramPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareKilogramPerMeterToVerboseString(const AValue: TQuantity): string;
function SquareKilogramPerMeterToFloat(const AValue: TQuantity): double;
function SquareKilogramPerSquareMeterToString(const AValue: TQuantity): string;
function SquareKilogramPerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareKilogramPerSquareMeterToVerboseString(const AValue: TQuantity): string;
function SquareKilogramPerSquareMeterToFloat(const AValue: TQuantity): double;
function SquareMeterPerSquareKilogramToString(const AValue: TQuantity): string;
function SquareMeterPerSquareKilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareMeterPerSquareKilogramToVerboseString(const AValue: TQuantity): string;
function SquareMeterPerSquareKilogramToFloat(const AValue: TQuantity): double;
function NewtonSquareMeterPerSquareKilogramToString(const AValue: TQuantity): string;
function NewtonSquareMeterPerSquareKilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function NewtonSquareMeterPerSquareKilogramToVerboseString(const AValue: TQuantity): string;
function NewtonSquareMeterPerSquareKilogramToFloat(const AValue: TQuantity): double;
function CubicMeterPerKilogramPerSquareSecondToString(const AValue: TQuantity): string;
function CubicMeterPerKilogramPerSquareSecondVerboseToString(const AValue: TQuantity): string;
function CubicMeterPerKilogramPerSquareSecondToFloat(const AValue: TQuantity): double;
function ReciprocalKelvinToString(const AValue: TQuantity): string;
function ReciprocalKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function ReciprocalKelvinToVerboseString(const AValue: TQuantity): string;
function ReciprocalKelvinToFloat(const AValue: TQuantity): double;
function KilogramKelvinToString(const AValue: TQuantity): string;
function KilogramKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KilogramKelvinToVerboseString(const AValue: TQuantity): string;
function KilogramKelvinToFloat(const AValue: TQuantity): double;
function JoulePerKelvinToString(const AValue: TQuantity): string;
function JoulePerKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function JoulePerKelvinToVerboseString(const AValue: TQuantity): string;
function JoulePerKelvinToFloat(const AValue: TQuantity): double;
function KilogramSquareMeterPerSquareSecondPerKelvinToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerSquareSecondPerKelvinVerboseToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerSquareSecondPerKelvinToFloat(const AValue: TQuantity): double;
function JoulePerKilogramPerKelvinToString(const AValue: TQuantity): string;
function JoulePerKilogramPerKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function JoulePerKilogramPerKelvinToVerboseString(const AValue: TQuantity): string;
function JoulePerKilogramPerKelvinToFloat(const AValue: TQuantity): double;
function SquareMeterPerSquareSecondPerKelvinToString(const AValue: TQuantity): string;
function SquareMeterPerSquareSecondPerKelvinVerboseToString(const AValue: TQuantity): string;
function SquareMeterPerSquareSecondPerKelvinToFloat(const AValue: TQuantity): double;
function MeterKelvinToString(const AValue: TQuantity): string;
function MeterKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterKelvinToVerboseString(const AValue: TQuantity): string;
function MeterKelvinToFloat(const AValue: TQuantity): double;
function KelvinPerMeterToString(const AValue: TQuantity): string;
function KelvinPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KelvinPerMeterToVerboseString(const AValue: TQuantity): string;
function KelvinPerMeterToFloat(const AValue: TQuantity): double;
function WattPerMeterToString(const AValue: TQuantity): string;
function WattPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerMeterToVerboseString(const AValue: TQuantity): string;
function WattPerMeterToFloat(const AValue: TQuantity): double;
function KilogramMeterPerCubicSecondToString(const AValue: TQuantity): string;
function KilogramMeterPerCubicSecondVerboseToString(const AValue: TQuantity): string;
function KilogramMeterPerCubicSecondToFloat(const AValue: TQuantity): double;
function WattPerSquareMeterToString(const AValue: TQuantity): string;
function WattPerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerSquareMeterToVerboseString(const AValue: TQuantity): string;
function WattPerSquareMeterToFloat(const AValue: TQuantity): double;
function KilogramPerCubicSecondToString(const AValue: TQuantity): string;
function KilogramPerCubicSecondVerboseToString(const AValue: TQuantity): string;
function KilogramPerCubicSecondToFloat(const AValue: TQuantity): double;
function WattPerCubicMeterToString(const AValue: TQuantity): string;
function WattPerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerCubicMeterToVerboseString(const AValue: TQuantity): string;
function WattPerCubicMeterToFloat(const AValue: TQuantity): double;
function WattPerKelvinToString(const AValue: TQuantity): string;
function WattPerKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerKelvinToVerboseString(const AValue: TQuantity): string;
function WattPerKelvinToFloat(const AValue: TQuantity): double;
function KilogramSquareMeterPerCubicSecondPerKelvinToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerCubicSecondPerKelvinVerboseToString(const AValue: TQuantity): string;
function KilogramSquareMeterPerCubicSecondPerKelvinToFloat(const AValue: TQuantity): double;
function WattPerMeterPerKelvinToString(const AValue: TQuantity): string;
function WattPerMeterPerKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerMeterPerKelvinToVerboseString(const AValue: TQuantity): string;
function WattPerMeterPerKelvinToFloat(const AValue: TQuantity): double;
function KilogramMeterPerCubicSecondPerKelvinToString(const AValue: TQuantity): string;
function KilogramMeterPerCubicSecondPerKelvinVerboseToString(const AValue: TQuantity): string;
function KilogramMeterPerCubicSecondPerKelvinToFloat(const AValue: TQuantity): double;
function KelvinPerWattToString(const AValue: TQuantity): string;
function KelvinPerWattToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KelvinPerWattToVerboseString(const AValue: TQuantity): string;
function KelvinPerWattToFloat(const AValue: TQuantity): double;
function MeterPerWattToString(const AValue: TQuantity): string;
function MeterPerWattToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterPerWattToVerboseString(const AValue: TQuantity): string;
function MeterPerWattToFloat(const AValue: TQuantity): double;
function MeterKelvinPerWattToString(const AValue: TQuantity): string;
function MeterKelvinPerWattToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterKelvinPerWattToVerboseString(const AValue: TQuantity): string;
function MeterKelvinPerWattToFloat(const AValue: TQuantity): double;
function SquareMeterKelvinToString(const AValue: TQuantity): string;
function SquareMeterKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareMeterKelvinToVerboseString(const AValue: TQuantity): string;
function SquareMeterKelvinToFloat(const AValue: TQuantity): double;
function WattPerSquareMeterPerKelvinToString(const AValue: TQuantity): string;
function WattPerSquareMeterPerKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerSquareMeterPerKelvinToVerboseString(const AValue: TQuantity): string;
function WattPerSquareMeterPerKelvinToFloat(const AValue: TQuantity): double;
function KilogramPerCubicSecondPerKelvinToString(const AValue: TQuantity): string;
function KilogramPerCubicSecondPerKelvinVerboseToString(const AValue: TQuantity): string;
function KilogramPerCubicSecondPerKelvinToFloat(const AValue: TQuantity): double;
function SquareMeterQuarticKelvinToString(const AValue: TQuantity): string;
function SquareMeterQuarticKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareMeterQuarticKelvinToVerboseString(const AValue: TQuantity): string;
function SquareMeterQuarticKelvinToFloat(const AValue: TQuantity): double;
function WattPerQuarticKelvinToString(const AValue: TQuantity): string;
function WattPerQuarticKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerQuarticKelvinToVerboseString(const AValue: TQuantity): string;
function WattPerQuarticKelvinToFloat(const AValue: TQuantity): double;
function WattPerSquareMeterPerQuarticKelvinToString(const AValue: TQuantity): string;
function WattPerSquareMeterPerQuarticKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerSquareMeterPerQuarticKelvinToVerboseString(const AValue: TQuantity): string;
function WattPerSquareMeterPerQuarticKelvinToFloat(const AValue: TQuantity): double;
function JoulePerMoleToString(const AValue: TQuantity): string;
function JoulePerMoleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function JoulePerMoleToVerboseString(const AValue: TQuantity): string;
function JoulePerMoleToFloat(const AValue: TQuantity): double;
function MoleKelvinToString(const AValue: TQuantity): string;
function MoleKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MoleKelvinToVerboseString(const AValue: TQuantity): string;
function MoleKelvinToFloat(const AValue: TQuantity): double;
function JoulePerMolePerKelvinToString(const AValue: TQuantity): string;
function JoulePerMolePerKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function JoulePerMolePerKelvinToVerboseString(const AValue: TQuantity): string;
function JoulePerMolePerKelvinToFloat(const AValue: TQuantity): double;
function OhmMeterToString(const AValue: TQuantity): string;
function OhmMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function OhmMeterToVerboseString(const AValue: TQuantity): string;
function OhmMeterToFloat(const AValue: TQuantity): double;
function VoltPerMeterToString(const AValue: TQuantity): string;
function VoltPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function VoltPerMeterToVerboseString(const AValue: TQuantity): string;
function VoltPerMeterToFloat(const AValue: TQuantity): double;
function NewtonPerCoulombToString(const AValue: TQuantity): string;
function NewtonPerCoulombVerboseToString(const AValue: TQuantity): string;
function NewtonPerCoulombToFloat(const AValue: TQuantity): double;
function CoulombPerMeterToString(const AValue: TQuantity): string;
function CoulombPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CoulombPerMeterToVerboseString(const AValue: TQuantity): string;
function CoulombPerMeterToFloat(const AValue: TQuantity): double;
function SquareCoulombPerMeterToString(const AValue: TQuantity): string;
function SquareCoulombPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareCoulombPerMeterToVerboseString(const AValue: TQuantity): string;
function SquareCoulombPerMeterToFloat(const AValue: TQuantity): double;
function CoulombPerSquareMeterToString(const AValue: TQuantity): string;
function CoulombPerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CoulombPerSquareMeterToVerboseString(const AValue: TQuantity): string;
function CoulombPerSquareMeterToFloat(const AValue: TQuantity): double;
function SquareMeterPerSquareCoulombToString(const AValue: TQuantity): string;
function SquareMeterPerSquareCoulombToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareMeterPerSquareCoulombToVerboseString(const AValue: TQuantity): string;
function SquareMeterPerSquareCoulombToFloat(const AValue: TQuantity): double;
function NewtonPerSquareCoulombToString(const AValue: TQuantity): string;
function NewtonPerSquareCoulombToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function NewtonPerSquareCoulombToVerboseString(const AValue: TQuantity): string;
function NewtonPerSquareCoulombToFloat(const AValue: TQuantity): double;
function NewtonSquareMeterPerSquareCoulombToString(const AValue: TQuantity): string;
function NewtonSquareMeterPerSquareCoulombToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function NewtonSquareMeterPerSquareCoulombToVerboseString(const AValue: TQuantity): string;
function NewtonSquareMeterPerSquareCoulombToFloat(const AValue: TQuantity): double;
function VoltMeterToString(const AValue: TQuantity): string;
function VoltMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function VoltMeterToVerboseString(const AValue: TQuantity): string;
function VoltMeterToFloat(const AValue: TQuantity): double;
function NewtonSquareMeterPerCoulombToString(const AValue: TQuantity): string;
function NewtonSquareMeterPerCoulombVerboseToString(const AValue: TQuantity): string;
function NewtonSquareMeterPerCoulombToFloat(const AValue: TQuantity): double;
function VoltMeterPerSecondToString(const AValue: TQuantity): string;
function VoltMeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function VoltMeterPerSecondToVerboseString(const AValue: TQuantity): string;
function VoltMeterPerSecondToFloat(const AValue: TQuantity): double;
function FaradPerMeterToString(const AValue: TQuantity): string;
function FaradPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function FaradPerMeterToVerboseString(const AValue: TQuantity): string;
function FaradPerMeterToFloat(const AValue: TQuantity): double;
function AmperePerMeterToString(const AValue: TQuantity): string;
function AmperePerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function AmperePerMeterToVerboseString(const AValue: TQuantity): string;
function AmperePerMeterToFloat(const AValue: TQuantity): double;
function MeterPerAmpereToString(const AValue: TQuantity): string;
function MeterPerAmpereToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterPerAmpereToVerboseString(const AValue: TQuantity): string;
function MeterPerAmpereToFloat(const AValue: TQuantity): double;
function TeslaMeterToString(const AValue: TQuantity): string;
function TeslaMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function TeslaMeterToVerboseString(const AValue: TQuantity): string;
function TeslaMeterToFloat(const AValue: TQuantity): double;
function NewtonPerAmpereToString(const AValue: TQuantity): string;
function NewtonPerAmpereVerboseToString(const AValue: TQuantity): string;
function NewtonPerAmpereToFloat(const AValue: TQuantity): double;
function TeslaPerAmpereToString(const AValue: TQuantity): string;
function TeslaPerAmpereToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function TeslaPerAmpereToVerboseString(const AValue: TQuantity): string;
function TeslaPerAmpereToFloat(const AValue: TQuantity): double;
function HenryPerMeterToString(const AValue: TQuantity): string;
function HenryPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function HenryPerMeterToVerboseString(const AValue: TQuantity): string;
function HenryPerMeterToFloat(const AValue: TQuantity): double;
function TeslaMeterPerAmpereToString(const AValue: TQuantity): string;
function TeslaMeterPerAmpereVerboseToString(const AValue: TQuantity): string;
function TeslaMeterPerAmpereToFloat(const AValue: TQuantity): double;
function NewtonPerSquareAmpereToString(const AValue: TQuantity): string;
function NewtonPerSquareAmpereVerboseToString(const AValue: TQuantity): string;
function NewtonPerSquareAmpereToFloat(const AValue: TQuantity): double;
function RadianPerMeterToString(const AValue: TQuantity): string;
function RadianPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function RadianPerMeterToVerboseString(const AValue: TQuantity): string;
function RadianPerMeterToFloat(const AValue: TQuantity): double;
function SquareKilogramPerSquareSecondToString(const AValue: TQuantity): string;
function SquareKilogramPerSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareKilogramPerSquareSecondToVerboseString(const AValue: TQuantity): string;
function SquareKilogramPerSquareSecondToFloat(const AValue: TQuantity): double;
function SquareSecondPerSquareMeterToString(const AValue: TQuantity): string;
function SquareSecondPerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareSecondPerSquareMeterToVerboseString(const AValue: TQuantity): string;
function SquareSecondPerSquareMeterToFloat(const AValue: TQuantity): double;
function SquareJouleToString(const AValue: TQuantity): string;
function SquareJouleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareJouleToVerboseString(const AValue: TQuantity): string;
function SquareJouleToFloat(const AValue: TQuantity): double;
function JouleSecondToString(const AValue: TQuantity): string;
function JouleSecondVerboseToString(const AValue: TQuantity): string;
function JouleSecondToFloat(const AValue: TQuantity): double;
function JoulePerHertzToString(const AValue: TQuantity): string;
function JoulePerHertzVerboseToString(const AValue: TQuantity): string;
function JoulePerHertzToFloat(const AValue: TQuantity): double;
function ElectronvoltSecondToString(const AValue: TQuantity): string;
function ElectronvoltSecondVerboseToString(const AValue: TQuantity): string;
function ElectronvoltSecondToFloat(const AValue: TQuantity): double;
function ElectronvoltMeterPerSpeedOfLightToString(const AValue: TQuantity): string;
function ElectronvoltMeterPerSpeedOfLightVerboseToString(const AValue: TQuantity): string;
function ElectronvoltMeterPerSpeedOfLightToFloat(const AValue: TQuantity): double;
function SquareJouleSquareSecondToString(const AValue: TQuantity): string;
function SquareJouleSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareJouleSquareSecondToVerboseString(const AValue: TQuantity): string;
function SquareJouleSquareSecondToFloat(const AValue: TQuantity): double;
function CoulombPerKilogramToString(const AValue: TQuantity): string;
function CoulombPerKilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CoulombPerKilogramToVerboseString(const AValue: TQuantity): string;
function CoulombPerKilogramToFloat(const AValue: TQuantity): double;
function SquareMeterAmpereToString(const AValue: TQuantity): string;
function SquareMeterAmpereToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareMeterAmpereToVerboseString(const AValue: TQuantity): string;
function SquareMeterAmpereToFloat(const AValue: TQuantity): double;
function JoulePerTeslaToString(const AValue: TQuantity): string;
function JoulePerTeslaVerboseToString(const AValue: TQuantity): string;
function JoulePerTeslaToFloat(const AValue: TQuantity): double;
function LumenPerWattToString(const AValue: TQuantity): string;
function LumenPerWattToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function LumenPerWattToVerboseString(const AValue: TQuantity): string;
function LumenPerWattToFloat(const AValue: TQuantity): double;
function ReciprocalMoleToString(const AValue: TQuantity): string;
function ReciprocalMoleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function ReciprocalMoleToVerboseString(const AValue: TQuantity): string;
function ReciprocalMoleToFloat(const AValue: TQuantity): double;
function AmperePerSquareMeterToString(const AValue: TQuantity): string;
function AmperePerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function AmperePerSquareMeterToVerboseString(const AValue: TQuantity): string;
function AmperePerSquareMeterToFloat(const AValue: TQuantity): double;
function MolePerCubicMeterToString(const AValue: TQuantity): string;
function MolePerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MolePerCubicMeterToVerboseString(const AValue: TQuantity): string;
function MolePerCubicMeterToFloat(const AValue: TQuantity): double;
function CandelaPerSquareMeterToString(const AValue: TQuantity): string;
function CandelaPerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CandelaPerSquareMeterToVerboseString(const AValue: TQuantity): string;
function CandelaPerSquareMeterToFloat(const AValue: TQuantity): double;
function CoulombPerCubicMeterToString(const AValue: TQuantity): string;
function CoulombPerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CoulombPerCubicMeterToVerboseString(const AValue: TQuantity): string;
function CoulombPerCubicMeterToFloat(const AValue: TQuantity): double;
function GrayPerSecondToString(const AValue: TQuantity): string;
function GrayPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function GrayPerSecondToVerboseString(const AValue: TQuantity): string;
function GrayPerSecondToFloat(const AValue: TQuantity): double;
function SteradianHertzToString(const AValue: TQuantity): string;
function SteradianHertzToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SteradianHertzToVerboseString(const AValue: TQuantity): string;
function SteradianHertzToFloat(const AValue: TQuantity): double;
function MeterSteradianToString(const AValue: TQuantity): string;
function MeterSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function MeterSteradianToVerboseString(const AValue: TQuantity): string;
function MeterSteradianToFloat(const AValue: TQuantity): double;
function SquareMeterSteradianToString(const AValue: TQuantity): string;
function SquareMeterSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareMeterSteradianToVerboseString(const AValue: TQuantity): string;
function SquareMeterSteradianToFloat(const AValue: TQuantity): double;
function CubicMeterSteradianToString(const AValue: TQuantity): string;
function CubicMeterSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CubicMeterSteradianToVerboseString(const AValue: TQuantity): string;
function CubicMeterSteradianToFloat(const AValue: TQuantity): double;
function SquareMeterSteradianHertzToString(const AValue: TQuantity): string;
function SquareMeterSteradianHertzToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function SquareMeterSteradianHertzToVerboseString(const AValue: TQuantity): string;
function SquareMeterSteradianHertzToFloat(const AValue: TQuantity): double;
function WattPerSteradianToString(const AValue: TQuantity): string;
function WattPerSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerSteradianToVerboseString(const AValue: TQuantity): string;
function WattPerSteradianToFloat(const AValue: TQuantity): double;
function WattPerSteradianPerHertzToString(const AValue: TQuantity): string;
function WattPerSteradianPerHertzToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerSteradianPerHertzToVerboseString(const AValue: TQuantity): string;
function WattPerSteradianPerHertzToFloat(const AValue: TQuantity): double;
function WattPerMeterPerSteradianToString(const AValue: TQuantity): string;
function WattPerMeterPerSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerMeterPerSteradianToVerboseString(const AValue: TQuantity): string;
function WattPerMeterPerSteradianToFloat(const AValue: TQuantity): double;
function WattPerSquareMeterPerSteradianToString(const AValue: TQuantity): string;
function WattPerSquareMeterPerSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerSquareMeterPerSteradianToVerboseString(const AValue: TQuantity): string;
function WattPerSquareMeterPerSteradianToFloat(const AValue: TQuantity): double;
function WattPerCubicMeterPerSteradianToString(const AValue: TQuantity): string;
function WattPerCubicMeterPerSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerCubicMeterPerSteradianToVerboseString(const AValue: TQuantity): string;
function WattPerCubicMeterPerSteradianToFloat(const AValue: TQuantity): double;
function WattPerSquareMeterPerSteradianPerHertzToString(const AValue: TQuantity): string;
function WattPerSquareMeterPerSteradianPerHertzToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function WattPerSquareMeterPerSteradianPerHertzToVerboseString(const AValue: TQuantity): string;
function WattPerSquareMeterPerSteradianPerHertzToFloat(const AValue: TQuantity): double;
function KatalPerCubicMeterToString(const AValue: TQuantity): string;
function KatalPerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function KatalPerCubicMeterToVerboseString(const AValue: TQuantity): string;
function KatalPerCubicMeterToFloat(const AValue: TQuantity): double;
function CoulombPerMoleToString(const AValue: TQuantity): string;
function CoulombPerMoleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
function CoulombPerMoleToVerboseString(const AValue: TQuantity): string;
function CoulombPerMoleToFloat(const AValue: TQuantity): double;

{ Power functions }

implementation

const

  { Mul Table }

  MulTable : array[0..161, 0..161] of longint = (
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uMeterSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uKilogramSquareSecond, uKilogramSquareSecond, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterSteradian, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uJoulePerRadian, uFarad, uFarad, uSecond, uSecond, uSecond, uSiemens, uSecond, uLumen, uLumen, uLumen, uLumen, uSecond, uSecond, uKilogramSquareSecond, uCubicMeterSteradian, uSecond, uSquareMeterSteradian, uKilogramSquareSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uJoulePerRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSquareMeterSteradian, uTesla, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSquareCoulomb, uSecond, uSquareCoulomb, uSecond, uWattPerMeterPerKelvin, uOhmMeter, uSecond, uOhmMeter, uSecond, uCoulomb, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uCoulomb, uSecond, uLumen, uSquareCoulomb, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uJoulePerRadian, uSecond, uNewtonRadian, uTesla, uSecond, uSecond, uSecond, uSquareCoulomb),
    (uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uMeterSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uKilogramSquareSecond, uKilogramSquareSecond, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterSteradian, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uJoulePerRadian, uFarad, uFarad, uSecond, uSecond, uSecond, uSiemens, uSecond, uLumen, uLumen, uLumen, uLumen, uSecond, uSecond, uKilogramSquareSecond, uCubicMeterSteradian, uSecond, uSquareMeterSteradian, uKilogramSquareSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uJoulePerRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSquareMeterSteradian, uTesla, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSquareCoulomb, uSecond, uSquareCoulomb, uSecond, uWattPerMeterPerKelvin, uOhmMeter, uSecond, uOhmMeter, uSecond, uCoulomb, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uCoulomb, uSecond, uLumen, uSquareCoulomb, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uJoulePerRadian, uSecond, uNewtonRadian, uTesla, uSecond, uSecond, uSecond, uSquareCoulomb),
    (uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uMeterSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uKilogramSquareSecond, uKilogramSquareSecond, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterSteradian, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uJoulePerRadian, uFarad, uFarad, uSecond, uSecond, uSecond, uSiemens, uSecond, uLumen, uLumen, uLumen, uLumen, uSecond, uSecond, uKilogramSquareSecond, uCubicMeterSteradian, uSecond, uSquareMeterSteradian, uKilogramSquareSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uJoulePerRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSquareMeterSteradian, uTesla, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSquareCoulomb, uSecond, uSquareCoulomb, uSecond, uWattPerMeterPerKelvin, uOhmMeter, uSecond, uOhmMeter, uSecond, uCoulomb, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uCoulomb, uSecond, uLumen, uSquareCoulomb, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uJoulePerRadian, uSecond, uNewtonRadian, uTesla, uSecond, uSecond, uSecond, uSquareCoulomb),
    (uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uMeterSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uKilogramSquareSecond, uKilogramSquareSecond, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterSteradian, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uJoulePerRadian, uFarad, uFarad, uSecond, uSecond, uSecond, uSiemens, uSecond, uLumen, uLumen, uLumen, uLumen, uSecond, uSecond, uKilogramSquareSecond, uCubicMeterSteradian, uSecond, uSquareMeterSteradian, uKilogramSquareSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uJoulePerRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSquareMeterSteradian, uTesla, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSquareCoulomb, uSecond, uSquareCoulomb, uSecond, uWattPerMeterPerKelvin, uOhmMeter, uSecond, uOhmMeter, uSecond, uCoulomb, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uCoulomb, uSecond, uLumen, uSquareCoulomb, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uJoulePerRadian, uSecond, uNewtonRadian, uTesla, uSecond, uSecond, uSecond, uSquareCoulomb),
    (uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uMeterSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uKilogramSquareSecond, uKilogramSquareSecond, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterSteradian, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uJoulePerRadian, uFarad, uFarad, uSecond, uSecond, uSecond, uSiemens, uSecond, uLumen, uLumen, uLumen, uLumen, uSecond, uSecond, uKilogramSquareSecond, uCubicMeterSteradian, uSecond, uSquareMeterSteradian, uKilogramSquareSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uJoulePerRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSquareMeterSteradian, uTesla, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSquareCoulomb, uSecond, uSquareCoulomb, uSecond, uWattPerMeterPerKelvin, uOhmMeter, uSecond, uOhmMeter, uSecond, uCoulomb, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uCoulomb, uSecond, uLumen, uSquareCoulomb, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uJoulePerRadian, uSecond, uNewtonRadian, uTesla, uSecond, uSecond, uSecond, uSquareCoulomb),
    (uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uMeterSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uKilogramSquareSecond, uKilogramSquareSecond, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterSteradian, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uJoulePerRadian, uFarad, uFarad, uSecond, uSecond, uSecond, uSiemens, uSecond, uLumen, uLumen, uLumen, uLumen, uSecond, uSecond, uKilogramSquareSecond, uCubicMeterSteradian, uSecond, uSquareMeterSteradian, uKilogramSquareSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uJoulePerRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSquareMeterSteradian, uTesla, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSquareCoulomb, uSecond, uSquareCoulomb, uSecond, uWattPerMeterPerKelvin, uOhmMeter, uSecond, uOhmMeter, uSecond, uCoulomb, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uCoulomb, uSecond, uLumen, uSquareCoulomb, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uJoulePerRadian, uSecond, uNewtonRadian, uTesla, uSecond, uSecond, uSecond, uSquareCoulomb),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uKilogram, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uKilogram, uKilogramSquareSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uKilogram, uKilogram, uPascal, uKilogram, uKilogram, uKilogram, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uKilogramSquareSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSquareKilogramPerMeter, uSecond, uSecond, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uCubicMeterPerSecond, uKilogram, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramKelvin, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogram, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogram, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uKilogram, uKilogramSquareSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uKilogram, uKilogram, uPascal, uKilogram, uKilogram, uKilogram, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uKilogramSquareSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSquareKilogramPerMeter, uSecond, uSecond, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uCubicMeterPerSecond, uKilogram, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramKelvin, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogram, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uAmpere, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uCoulomb, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uAmpere, uAmpere, uSecond, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uAmpere, uCoulombMeter, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uAmpere, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uCoulomb, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uAmpere, uAmpere, uSecond, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uAmpere, uCoulombMeter, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uKelvin, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uKilogramKelvin, uSecond, uSecond, uSquareMeterQuarticKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSquareMeterQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uMoleKelvin, uSecond, uSecond, uSquareMeterQuarticKelvin, uKelvin, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uMoleKelvin, uSecond),
    (uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uKelvin, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uKilogramKelvin, uSecond, uSecond, uSquareMeterQuarticKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSquareMeterQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uMoleKelvin, uSecond, uSecond, uSquareMeterQuarticKelvin, uKelvin, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uMoleKelvin, uSecond),
    (uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uKelvin, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uKilogramKelvin, uSecond, uSecond, uSquareMeterQuarticKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSquareMeterQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uMoleKelvin, uSecond, uSecond, uSquareMeterQuarticKelvin, uKelvin, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uMoleKelvin, uSecond),
    (uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uKelvin, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uKilogramKelvin, uSecond, uSecond, uSquareMeterQuarticKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSquareMeterQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uMoleKelvin, uSecond, uSecond, uSquareMeterQuarticKelvin, uKelvin, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uMoleKelvin, uSecond),
    (uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uMoleKelvin, uMoleKelvin, uMoleKelvin, uSecond, uSecond, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCandela, uLumen, uLumen, uLumen, uLumen, uLumen, uLumen, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uLumen, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uMeterSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uKilogramSquareSecond, uKilogramSquareSecond, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterSteradian, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uJoulePerRadian, uFarad, uFarad, uSecond, uSecond, uSecond, uSiemens, uSecond, uLumen, uLumen, uLumen, uLumen, uSecond, uSecond, uKilogramSquareSecond, uCubicMeterSteradian, uSecond, uSquareMeterSteradian, uKilogramSquareSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uJoulePerRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSquareMeterSteradian, uTesla, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSquareCoulomb, uSecond, uSquareCoulomb, uSecond, uWattPerMeterPerKelvin, uOhmMeter, uSecond, uOhmMeter, uSecond, uCoulomb, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uCoulomb, uSecond, uLumen, uSquareCoulomb, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uJoulePerRadian, uSecond, uNewtonRadian, uTesla, uSecond, uSecond, uSecond, uSquareCoulomb),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSquareMeterAmpere, uSquareMeterAmpere, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uCubicMeterSteradian, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSquareJoule, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonSquareMeter, uNewtonCubicMeter, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uKilogramMeter, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramSquareMeterPerSecond, uSecond, uKilogramMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uCubicMeterPerSecond, uSecond, uJoulePerRadian, uSecond, uSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uCubicMeterSteradian, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uVolt, uWattPerMeterPerKelvin, uJoulePerRadian, uSecond, uSecond),
    (uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uMeterSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSecond, uSecond, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uMeterSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uKilogramSquareSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uCubicMeterSteradian, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSquareMeterSteradian, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uCoulombMeter, uSecond, uSecond, uSecond, uCubicMeterSteradian, uMeterSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uSecond, uJoulePerRadian, uNewtonRadian, uTesla, uSecond, uSecond, uSecond),
    (uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uKilogramMeter, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uSquareJoule, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uKilogramMeter, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogram, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uKilogram, uKilogramSquareSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uKilogram, uKilogram, uPascal, uKilogram, uKilogram, uKilogram, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uKilogramSquareSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSquareKilogramPerMeter, uSecond, uSecond, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uCubicMeterPerSecond, uKilogram, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramKelvin, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogram, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uKilogramMeter, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uSquareJoule, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uKilogramMeter, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSquareJoule, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uPascal, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uSecond, uKilogram, uPascal, uKilogram, uSecond, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uKilogram, uKilogramMeter, uSecond, uPascal, uPascal, uPascal, uKilogram, uTesla, uSecond, uNewtonPerCubicMeter, uKilogramMeter, uNewtonRadian, uKilogramMeter, uSecond, uSecond, uCoulomb, uWattPerMeterPerKelvin, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uNewtonRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSquareMeterPerSquareSecond, uNewtonPerCubicMeter, uMeter, uPascal, uCubicMeterSteradian, uSecond, uSquareMeterPerSquareSecond, uSecond, uSquareMeterPerSquareSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uNewtonRadian, uSecond, uKelvin, uSecond, uKilogram, uPascal, uNewtonPerCubicMeter, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uMeter, uWattPerCubicMeterPerSteradian, uMeterKelvin, uWattPerMeterPerKelvin, uSecond, uNewtonRadian, uSecond, uSecond, uVolt, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSquareRootMeter, uTesla, uSecond, uTesla, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uMeter, uReciprocalSquareRootCubicMeter, uSecond, uMeterSecond, uSquareMeterSteradian, uMeter, uWattPerMeterPerKelvin, uNewtonRadian, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uKilogramMeter, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uSquareJoule, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uKilogramMeter, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonCubicMeter, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSecond, uSquareJoule, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uNewtonCubicMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uMeterSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uKilogramSquareSecond, uKilogramSquareSecond, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterSteradian, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uJoulePerRadian, uFarad, uFarad, uSecond, uSecond, uSecond, uSiemens, uSecond, uLumen, uLumen, uLumen, uLumen, uSecond, uSecond, uKilogramSquareSecond, uCubicMeterSteradian, uSecond, uSquareMeterSteradian, uKilogramSquareSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uJoulePerRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSquareMeterSteradian, uTesla, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSquareCoulomb, uSecond, uSquareCoulomb, uSecond, uWattPerMeterPerKelvin, uOhmMeter, uSecond, uOhmMeter, uSecond, uCoulomb, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uCoulomb, uSecond, uLumen, uSquareCoulomb, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uJoulePerRadian, uSecond, uNewtonRadian, uTesla, uSecond, uSecond, uSecond, uSquareCoulomb),
    (uKilogram, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uKilogram, uKilogramSquareSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uKilogram, uKilogram, uPascal, uKilogram, uKilogram, uKilogram, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uKilogramSquareSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSquareKilogramPerMeter, uSecond, uSecond, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uCubicMeterPerSecond, uKilogram, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramKelvin, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogram, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogram, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uKilogram, uKilogramSquareSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uKilogram, uKilogram, uPascal, uKilogram, uKilogram, uKilogram, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uKilogramSquareSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSquareKilogramPerMeter, uSecond, uSecond, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uCubicMeterPerSecond, uKilogram, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramKelvin, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogram, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogram, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uKilogram, uKilogramSquareSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uKilogram, uKilogram, uPascal, uKilogram, uKilogram, uKilogram, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uKilogramSquareSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSquareKilogramPerMeter, uSecond, uSecond, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uCubicMeterPerSecond, uKilogram, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramKelvin, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogram, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uKilogramMeter, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uSquareJoule, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uKilogramMeter, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uNewtonRadian, uNewtonRadian, uNewtonRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uNewtonRadian, uTesla, uNewtonRadian, uNewtonRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSquareVolt, uSecond, uSquareVolt, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSquareJoule, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uPascal, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uPascal, uPascal, uPascal, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uKilogramMeter, uKilogramSquareSecond, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSecond, uPascal, uPascal, uNewtonPerCubicMeter, uPascal, uPascal, uPascal, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramSquareMeterPerSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uKilogramMeter, uSquareMeterPerSquareSecond, uPascal, uSecond, uSecond, uNewtonRadian, uKilogramKelvin, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uPascal, uKilogramSquareSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonCubicMeter, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSecond, uSquareJoule, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uNewtonCubicMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonCubicMeter, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSecond, uSquareJoule, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uNewtonCubicMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uCoulombMeter, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSquareCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulomb, uSecond, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter),
    (uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSquareCoulomb, uSecond, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uCoulombMeter, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uVolt, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uOhmMeter, uVolt, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uJoulePerRadian, uVolt, uVolt, uVolt, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uVolt, uWattPerMeterPerKelvin, uVolt, uVolt, uVolt, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSquareMeterQuarticKelvin, uSquareMeterPerSquareSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSquareVolt, uSquareVolt, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSquareVolt, uSecond, uSquareVolt, uSquareVolt, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uFarad, uFarad, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uFarad, uSecond, uFarad, uFarad, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond),
    (uVolt, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uOhmMeter, uVolt, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uJoulePerRadian, uVolt, uVolt, uVolt, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uVolt, uWattPerMeterPerKelvin, uVolt, uVolt, uVolt, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSquareMeterQuarticKelvin, uSquareMeterPerSquareSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSiemens, uFarad, uFarad, uFarad, uFarad, uFarad, uFarad, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uFarad, uSiemens, uSiemens, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSiemens, uSecond, uSiemens, uSiemens, uSiemens, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSiemens, uFarad, uFarad, uFarad, uFarad, uFarad, uFarad, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uFarad, uSiemens, uSiemens, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSiemens, uSecond, uSiemens, uSiemens, uSiemens, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uTesla, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uTesla, uTesla, uTesla, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uTesla, uSecond, uTesla, uTesla, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uTesla, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uLumen, uTesla, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uTesla, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uReciprocalHenry, uSiemens, uSiemens, uSiemens, uSiemens, uSiemens, uSiemens, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSiemens, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uReciprocalHenry, uReciprocalHenry, uSecond, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uSecond, uSecond, uSiemens, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uLumen, uLumen, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uLumen, uSecond, uLumen, uLumen, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCandela, uLumen, uLumen, uLumen, uLumen, uLumen, uLumen, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uLumen, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCandela, uLumen, uLumen, uLumen, uLumen, uLumen, uLumen, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uLumen, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCandela, uLumen, uLumen, uLumen, uLumen, uLumen, uLumen, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uLumen, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCandela, uLumen, uLumen, uLumen, uLumen, uLumen, uLumen, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uLumen, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uMoleKelvin, uMoleKelvin, uMoleKelvin, uSecond, uSecond, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uNewtonPerCubicMeter, uPascal, uPascal, uPascal, uPascal, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uPascal, uPascal, uPascal, uPascal, uPascal, uPascal, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uSecond, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogram, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramMeter, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uKilogram, uMeter, uNewtonPerCubicMeter, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uKilogram, uNewtonPerCubicMeter, uSecond, uKilogramSquareSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogram, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uKilogram, uKilogramSquareSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uKilogram, uKilogram, uPascal, uKilogram, uKilogram, uKilogram, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uKilogramSquareSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSquareKilogramPerMeter, uSecond, uSecond, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uCubicMeterPerSecond, uKilogram, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramKelvin, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogram, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCubicMeterPerSecond, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uCubicMeterSteradian, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uNewtonCubicMeter, uNewtonSquareMeter, uNewtonCubicMeter, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uNewtonCubicMeter, uSecond, uCubicMeterSteradian, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonCubicMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uNewtonSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uNewtonSquareMeter, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uVolt, uSecond, uSecond, uSecond),
    (uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uPascal, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uPascal, uPascal, uPascal, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uKilogramMeter, uKilogramSquareSecond, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSecond, uPascal, uPascal, uNewtonPerCubicMeter, uPascal, uPascal, uPascal, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramSquareMeterPerSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uKilogramMeter, uSquareMeterPerSquareSecond, uPascal, uSecond, uSecond, uNewtonRadian, uKilogramKelvin, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uPascal, uKilogramSquareSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSquareMeterAmpere, uSquareMeterAmpere, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uCubicMeterSteradian, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSquareJoule, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonSquareMeter, uNewtonCubicMeter, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uKilogramMeter, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramSquareMeterPerSecond, uSecond, uKilogramMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uCubicMeterPerSecond, uSecond, uJoulePerRadian, uSecond, uSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uCubicMeterSteradian, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uVolt, uWattPerMeterPerKelvin, uJoulePerRadian, uSecond, uSecond),
    (uKilogram, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uKilogram, uKilogramSquareSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uKilogram, uKilogram, uPascal, uKilogram, uKilogram, uKilogram, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uKilogramSquareSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSquareKilogramPerMeter, uSecond, uSecond, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uCubicMeterPerSecond, uKilogram, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramKelvin, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogram, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uQuarticMeterSecond, uQuarticMeterSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uQuarticMeterSecond, uCubicMeterSteradian, uQuarticMeterSecond, uQuarticMeterSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uNewtonPerCubicMeter, uSecond, uKilogramSquareSecond, uSecond, uPascal, uSecond, uPascal, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uReciprocalSquareRootCubicMeter, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCubicMeterPerSecond, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uCubicMeterSteradian, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uNewtonCubicMeter, uNewtonSquareMeter, uNewtonCubicMeter, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uNewtonCubicMeter, uSecond, uCubicMeterSteradian, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonCubicMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uNewtonSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uNewtonSquareMeter, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uVolt, uSecond, uSecond, uSecond),
    (uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCubicMeterPerSecond, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uCubicMeterSteradian, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uNewtonCubicMeter, uNewtonSquareMeter, uNewtonCubicMeter, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uNewtonCubicMeter, uSecond, uCubicMeterSteradian, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonCubicMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uNewtonSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uNewtonSquareMeter, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uVolt, uSecond, uSecond, uSecond),
    (uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uSecond, uSecond, uSquareJoule, uSecond, uSquareJoule, uSecond, uNewtonSquareMeter, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSquareJoule, uSquareJoule, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareJoule, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uJoulePerKilogramPerKelvin, uNewtonSquareMeter, uSquareRootMeter, uCubicMeterPerSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSquareRootMeter, uNewtonSquareMeterPerSquareKilogram, uMeter, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uKilogramMeter, uNewtonSquareMeterPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uNewtonPerSquareKilogram, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uNewtonSquareMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uNewtonSquareMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSquareMeterAmpere, uSquareMeterAmpere, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uCubicMeterSteradian, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSquareJoule, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonSquareMeter, uNewtonCubicMeter, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uKilogramMeter, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramSquareMeterPerSecond, uSecond, uKilogramMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uCubicMeterPerSecond, uSecond, uJoulePerRadian, uSecond, uSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uCubicMeterSteradian, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uVolt, uWattPerMeterPerKelvin, uJoulePerRadian, uSecond, uSecond),
    (uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uCubicMeterPerSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uCubicMeterPerSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uNewtonSquareMeter, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uJoulePerRadian, uSecond, uNewtonRadian, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uNewtonSquareMeterPerSquareCoulomb, uJoulePerKilogramPerKelvin, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond),
    (uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uKelvin, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uKilogramKelvin, uSecond, uSecond, uSquareMeterQuarticKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSquareMeterQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uMoleKelvin, uSecond, uSecond, uSquareMeterQuarticKelvin, uKelvin, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uMoleKelvin, uSecond),
    (uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uKilogramMeter, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uSquareJoule, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uKilogramMeter, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogram, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramMeter, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uKilogram, uKilogramSquareSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uKilogram, uKilogram, uPascal, uKilogram, uKilogram, uKilogram, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uKilogramSquareSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSquareKilogramPerMeter, uSecond, uSecond, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uCubicMeterPerSecond, uKilogram, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramKelvin, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogram, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uPascal, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uPascal, uPascal, uPascal, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uKilogramMeter, uKilogramSquareSecond, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSecond, uPascal, uPascal, uNewtonPerCubicMeter, uPascal, uPascal, uPascal, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramSquareMeterPerSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uKilogramMeter, uSquareMeterPerSquareSecond, uPascal, uSecond, uSecond, uNewtonRadian, uKilogramKelvin, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uPascal, uKilogramSquareSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uVolt, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uOhmMeter, uVolt, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uJoulePerRadian, uVolt, uVolt, uVolt, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uVolt, uWattPerMeterPerKelvin, uVolt, uVolt, uVolt, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSquareMeterQuarticKelvin, uSquareMeterPerSquareSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uWattPerMeterPerKelvin, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uVolt, uWattPerMeterPerKelvin, uVolt, uVolt, uVolt, uVolt, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uNewtonRadian, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uVolt, uVolt, uVolt, uVolt, uVolt, uVolt, uOhmMeter, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uMeter, uMeterKelvin, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uWattPerMeterPerKelvin, uJoulePerRadian, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uKelvinPerWatt, uKelvinPerWatt, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uKelvinPerWatt, uSecond, uKelvinPerWatt, uKelvinPerWatt, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uMeterKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond),
    (uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uKelvinPerWatt, uKelvinPerWatt, uKelvinPerWatt, uSecond, uLumenPerWatt, uMeterPerWatt, uSecond, uMeterPerWatt, uMeterPerWatt, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uMeterPerWatt, uSecond, uMeterPerWatt, uMeterPerWatt, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSecond, uSecond, uLumenPerWatt, uLumenPerWatt, uLumenPerWatt, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSquareMeterSteradian, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareMeterPerSquareSecond, uKelvin, uSquareMeterSteradian, uSecond, uSecond, uCubicMeterPerSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uMeterSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterSteradian, uMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond),
    (uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uKelvinPerWatt, uKelvinPerWatt, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uKelvinPerWatt, uSecond, uKelvinPerWatt, uKelvinPerWatt, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uMeterKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond),
    (uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSquareMeterAmpere, uSquareMeterAmpere, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uCubicMeterSteradian, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSquareJoule, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonSquareMeter, uNewtonCubicMeter, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uKilogramMeter, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramSquareMeterPerSecond, uSecond, uKilogramMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uCubicMeterPerSecond, uSecond, uJoulePerRadian, uSecond, uSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uCubicMeterSteradian, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uVolt, uWattPerMeterPerKelvin, uJoulePerRadian, uSecond, uSecond),
    (uWattPerSquareMeterPerKelvin, uTesla, uTesla, uTesla, uTesla, uTesla, uTesla, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uTesla, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uVolt, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uVolt, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSquareRootMeter, uKelvin, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uVolt, uWattPerSquareMeterPerKelvin, uNewtonRadian, uJoulePerRadian, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uMeterKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uVolt, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uOhmMeter, uVolt, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uJoulePerRadian, uVolt, uVolt, uVolt, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uVolt, uWattPerMeterPerKelvin, uVolt, uVolt, uVolt, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSquareMeterQuarticKelvin, uSquareMeterPerSquareSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uMoleKelvin, uMoleKelvin, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uMoleKelvin, uSecond, uMoleKelvin, uMoleKelvin, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerMolePerKelvin, uJoulePerMolePerKelvin, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uJoulePerMolePerKelvin, uSecond, uJoulePerMolePerKelvin, uJoulePerMolePerKelvin, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond),
    (uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uOhmMeter, uVolt, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uWattPerMeterPerKelvin, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uVolt, uWattPerMeterPerKelvin, uVolt, uVolt, uVolt, uVolt, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uNewtonRadian, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uVolt, uVolt, uVolt, uVolt, uVolt, uVolt, uOhmMeter, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uMeter, uMeterKelvin, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uWattPerMeterPerKelvin, uJoulePerRadian, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uCoulombMeter, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSquareCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulomb, uSecond, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter),
    (uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSecond, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uCoulombMeter, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSquareCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulomb, uSecond, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter),
    (uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uJoulePerRadian, uSecond, uNewtonRadian, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uNewtonSquareMeterPerSquareCoulomb, uJoulePerKilogramPerKelvin, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonPerSquareCoulomb, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uWattPerMeterPerKelvin, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uVolt, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uSecond, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uNewtonPerSquareCoulomb, uVolt, uOhmMeter, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSquareVolt, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uOhmMeter, uVolt, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSquareVolt, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uFarad, uFarad, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uFarad, uSecond, uFarad, uFarad, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond),
    (uAmpere, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uCoulomb, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uAmpere, uAmpere, uSecond, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uAmpere, uCoulombMeter, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uKilogramMeter, uKilogramMeter, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uMeter, uMeterSecond, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uMeter, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uMeterSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uJoulePerRadian, uSecond, uKilogram, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uCoulombMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uKilogram, uCubicMeterPerSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uMeterKelvin, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogram, uOhmMeter, uVolt, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uCoulombMeter, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uMeter, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uCoulombMeter, uCubicMeterPerSecond, uMeter, uSquareMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uOhmMeter, uSecond, uVolt, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonRadian, uSecond, uCoulombMeter),
    (uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uNewtonRadian, uNewtonRadian, uNewtonRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uNewtonRadian, uTesla, uNewtonRadian, uNewtonRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSquareVolt, uSecond, uSquareVolt, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uTesla, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uTesla, uTesla, uTesla, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uTesla, uSecond, uTesla, uTesla, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uTesla, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uLumen, uTesla, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uTesla, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uNewtonRadian, uNewtonRadian, uNewtonRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uNewtonRadian, uTesla, uNewtonRadian, uNewtonRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSquareVolt, uSecond, uSquareVolt, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uNewtonSquareMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uKilogramSquareMeterPerSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond),
    (uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSquareJoule, uSquareJoule, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSquareJoule, uSecond, uSquareJoule, uSquareJoule, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSquareJoule, uSquareJoule, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSquareJoule, uSecond, uSquareJoule, uSquareJoule, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uCoulombMeter, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSquareCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulomb, uSecond, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter),
    (uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSquareMeterAmpere, uSquareMeterAmpere, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSquareMeterAmpere, uSecond, uSquareMeterAmpere, uSquareMeterAmpere, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uLumenPerWatt, uLumenPerWatt, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uLumenPerWatt, uSecond, uLumenPerWatt, uLumenPerWatt, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uLumen, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uAmpere, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uCoulomb, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uAmpere, uAmpere, uSecond, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uAmpere, uCoulombMeter, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uMoleKelvin, uMoleKelvin, uMoleKelvin, uSecond, uSecond, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCandela, uLumen, uLumen, uLumen, uLumen, uLumen, uLumen, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uLumen, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uCoulombMeter, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSquareCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulomb, uSecond, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter),
    (uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSquareMeterAmpere, uSquareMeterAmpere, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uCubicMeterSteradian, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSquareJoule, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonSquareMeter, uNewtonCubicMeter, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uKilogramMeter, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramSquareMeterPerSecond, uSecond, uKilogramMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uCubicMeterPerSecond, uSecond, uJoulePerRadian, uSecond, uSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uCubicMeterSteradian, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uVolt, uWattPerMeterPerKelvin, uJoulePerRadian, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uKilogram, uKilogram, uAmpere, uAmpere, uKelvin, uKelvin, uKelvin, uKelvin, uMole, uCandela, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeterSecond, uKilogramMeter, uKilogram, uKilogramMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogramMeter, uNewtonRadian, uSquareKilogramSquareMeterPerSquareSecond, uPascal, uKilogramSquareMeterPerSecond, uJoulePerRadian, uKilogramSquareMeterPerSecond, uCoulomb, uSquareCoulomb, uCoulombMeter, uVolt, uSquareVolt, uFarad, uVolt, uSiemens, uSiemens, uTesla, uJoulePerRadian, uJoulePerRadian, uReciprocalHenry, uLumen, uCandela, uCandela, uCandela, uCandela, uMole, uNewtonPerCubicMeter, uKilogram, uCubicMeterPerSecond, uPascal, uSquareMeterPerSquareSecond, uKilogram, uQuarticMeterSecond, uKilogramPerQuarticMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareSecond, uCubicMeterPerSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonPerSquareKilogram, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uKilogramKelvin, uJoulePerRadian, uJoulePerKilogramPerKelvin, uMeterKelvin, uKelvin, uKilogramMeter, uKilogram, uPascal, uVolt, uWattPerMeterPerKelvin, uKelvinPerWatt, uMeterPerWatt, uKelvinPerWatt, uSquareMeterPerSquareSecond, uWattPerSquareMeterPerKelvin, uSquareMeterQuarticKelvin, uVolt, uWattPerSquareMeterPerQuarticKelvin, uJoulePerRadian, uMoleKelvin, uJoulePerMolePerKelvin, uOhmMeter, uWattPerMeterPerKelvin, uCoulomb, uSquareCoulombPerMeter, uCoulomb, uJoulePerKilogramPerKelvin, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uFarad, uAmpere, uMeter, uNewtonRadian, uTesla, uNewtonRadian, uSquareRootMeter, uSquareKilogramPerMeter, uSquareSecondPerSquareMeter, uSquareJoule, uSquareJoule, uCoulomb, uSquareMeterAmpere, uLumenPerWatt, uSquareRootMeter, uAmpere, uMole, uCandela, uCoulomb, uSquareMeterPerSquareSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uVolt, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uMole, uCoulomb),
    (uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uMeterSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSecond, uSecond, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uMeterSecond, uSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uKilogramSquareSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uCubicMeterSteradian, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSquareMeterSteradian, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uCoulombMeter, uSecond, uSecond, uSecond, uCubicMeterSteradian, uMeterSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uSecond, uJoulePerRadian, uNewtonRadian, uTesla, uSecond, uSecond, uSecond),
    (uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSquareMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSquareMeterSteradian, uMeterSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uNewtonRadian, uSecond, uSecond, uSecond),
    (uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uCubicMeterSteradian, uQuarticMeterSecond, uQuarticMeterSecond, uQuarticMeterSecond, uQuarticMeterSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uQuarticMeterSecond, uQuarticMeterSecond, uQuarticMeterSecond, uQuarticMeterSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uCubicMeterSteradian, uSquareMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond),
    (uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSquareMeterAmpere, uSquareMeterAmpere, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uCubicMeterSteradian, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSquareJoule, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonSquareMeter, uNewtonCubicMeter, uSquareMeterSteradian, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSquareJoule, uKilogramMeter, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramSquareMeterPerSecond, uSecond, uKilogramMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uCubicMeterPerSecond, uSecond, uJoulePerRadian, uSecond, uSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uCubicMeterSteradian, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uVolt, uWattPerMeterPerKelvin, uJoulePerRadian, uSecond, uSecond),
    (uVolt, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uOhmMeter, uVolt, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uJoulePerRadian, uVolt, uVolt, uVolt, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uVolt, uWattPerMeterPerKelvin, uVolt, uVolt, uVolt, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSquareMeterQuarticKelvin, uSquareMeterPerSquareSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uNewtonRadian, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uWattPerMeterPerKelvin, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uVolt, uWattPerMeterPerKelvin, uVolt, uVolt, uVolt, uVolt, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uNewtonRadian, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uVolt, uVolt, uVolt, uVolt, uVolt, uVolt, uOhmMeter, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uMeter, uMeterKelvin, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uWattPerMeterPerKelvin, uJoulePerRadian, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uWattPerSquareMeterPerKelvin, uTesla, uTesla, uTesla, uTesla, uTesla, uTesla, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uTesla, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uVolt, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uVolt, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSquareRootMeter, uKelvin, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uVolt, uWattPerSquareMeterPerKelvin, uNewtonRadian, uJoulePerRadian, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uTesla, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uSecond, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uVolt, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uNewtonRadian, uJoulePerRadian, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uTesla, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uTesla, uTesla, uTesla, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uTesla, uSecond, uTesla, uTesla, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uTesla, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uLumen, uTesla, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uTesla, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uMoleKelvin, uMoleKelvin, uMoleKelvin, uSecond, uSecond, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uCoulombMeter, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSquareCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulomb, uSecond, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter)
  );

  { Div Table }

  DivTable : array[0..161, 0..161] of longint = (
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond),
    (uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond),
    (uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond),
    (uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond),
    (uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond),
    (uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogram, uKilogram, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uPascal, uNewtonPerCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uKilogram, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSecond, uMeter, uNewtonPerCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSquareSecondPerSquareMeter, uSecond, uKilogram, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uKilogram, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond),
    (uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogram, uKilogram, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uPascal, uNewtonPerCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uKilogram, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSecond, uMeter, uNewtonPerCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSquareSecondPerSquareMeter, uSecond, uKilogram, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uKilogram, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond),
    (uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uAmpere, uSecond, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uAmpere, uSecond, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uKelvin, uMeterKelvin, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerKelvin, uSecond, uKelvinPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uKelvin, uMeterKelvin, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerKelvin, uSecond, uKelvinPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uKelvin, uMeterKelvin, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerKelvin, uSecond, uKelvinPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uKelvin, uMeterKelvin, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerKelvin, uSecond, uKelvinPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond),
    (uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uCandela, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareRootMeter, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSquareRootMeter, uPascal, uSquareMeterPerSquareSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uMeterPerWatt, uSecond, uSecond, uVolt, uSecond, uSquareRootMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeterSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uMeterSecond, uSquareMeterSteradian, uMeterSecond, uMeterSecond, uMeterSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uMeterPerWatt, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uPascal, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareSecondPerSquareMeter, uSecond, uSquareMeterPerSquareSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uMeter, uNewtonPerCubicMeter, uSquareMeterPerSquareSecond, uPascal, uMeter, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uPascal, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSquareSecondPerSquareMeter, uSecond, uSquareSecondPerSquareMeter, uKilogramMeter, uNewtonPerSquareKilogram, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogram, uKilogram, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uPascal, uNewtonPerCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uKilogram, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSecond, uMeter, uNewtonPerCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSquareSecondPerSquareMeter, uSecond, uKilogram, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uKilogram, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond),
    (uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uPascal, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareSecondPerSquareMeter, uSecond, uSquareMeterPerSquareSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uMeter, uNewtonPerCubicMeter, uSquareMeterPerSquareSecond, uPascal, uMeter, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uPascal, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSquareSecondPerSquareMeter, uSecond, uSquareSecondPerSquareMeter, uKilogramMeter, uNewtonPerSquareKilogram, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uSquareRootMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uKilogramMeter, uKilogram, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uSecond, uSquareRootMeter, uNewtonSquareMeter, uKilogram, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uKilogramSquareMeterPerSecond, uSecond, uNewtonSquareMeter, uSquareKilogramPerMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uNewtonPerCubicMeter, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareKilogramPerMeter, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uPascal, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareSecondPerSquareMeter, uSecond, uSquareMeterPerSquareSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uMeter, uNewtonPerCubicMeter, uSquareMeterPerSquareSecond, uPascal, uMeter, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uPascal, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSquareSecondPerSquareMeter, uSecond, uSquareSecondPerSquareMeter, uKilogramMeter, uNewtonPerSquareKilogram, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogram, uSecond, uMeter, uSquareMeterPerSquareSecond, uMeter, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uMeter, uSquareRootMeter, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uSecond, uSecond, uCubicMeterPerSecond, uSquareRootMeter, uSquareSecondPerSquareMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uPascal, uCubicMeterPerSecond, uKilogram, uSquareMeterPerSquareSecond, uSecond, uSecond, uPascal, uSecond, uPascal, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uMeter, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond),
    (uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogram, uKilogram, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uPascal, uNewtonPerCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uKilogram, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSecond, uMeter, uNewtonPerCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSquareSecondPerSquareMeter, uSecond, uKilogram, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uKilogram, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond),
    (uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogram, uKilogram, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uPascal, uNewtonPerCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uKilogram, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSecond, uMeter, uNewtonPerCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSquareSecondPerSquareMeter, uSecond, uKilogram, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uKilogram, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond),
    (uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogram, uKilogram, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uPascal, uNewtonPerCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uKilogram, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSecond, uMeter, uNewtonPerCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSquareSecondPerSquareMeter, uSecond, uKilogram, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uKilogram, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond),
    (uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uPascal, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareSecondPerSquareMeter, uSecond, uSquareMeterPerSquareSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uMeter, uNewtonPerCubicMeter, uSquareMeterPerSquareSecond, uPascal, uMeter, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uPascal, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSquareSecondPerSquareMeter, uSecond, uSquareSecondPerSquareMeter, uKilogramMeter, uNewtonPerSquareKilogram, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonRadian, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uTesla, uNewtonRadian, uTesla, uTesla, uTesla, uTesla, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uWattPerMeterPerKelvin, uNewtonRadian, uNewtonRadian, uNewtonRadian, uTesla, uTesla, uTesla, uTesla, uTesla, uTesla, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uNewtonRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uJoulePerKilogramPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uReciprocalSquareRootCubicMeter, uPascal, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSquareRootMeter, uMeter, uSquareRootMeter, uNewtonRadian, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uMeterSecond, uSquareMeterSteradian, uMeter, uSecond, uSecond),
    (uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uSquareRootMeter, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareKilogramSquareMeterPerSquareSecond, uKilogramMeter, uKilogram, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uSecond, uSquareRootMeter, uNewtonSquareMeter, uKilogram, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uKilogramSquareMeterPerSecond, uSecond, uNewtonSquareMeter, uSquareKilogramPerMeter, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uNewtonPerCubicMeter, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareKilogramPerMeter, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uPascal, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uPascal, uPascal, uPascal, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uPascal, uPascal, uKilogram, uPascal, uPascal, uPascal, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uReciprocalSquareRootCubicMeter, uKilogramPerQuarticMeterPerSecond, uSquareRootMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uCubicMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogram, uSecond, uMeter, uSquareMeterPerSquareSecond, uMeter, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uMeter, uSquareRootMeter, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uSecond, uSecond, uCubicMeterPerSecond, uSquareRootMeter, uSquareSecondPerSquareMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uPascal, uCubicMeterPerSecond, uKilogram, uSquareMeterPerSquareSecond, uSecond, uSecond, uPascal, uSecond, uPascal, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uMeter, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uJoulePerRadian, uVolt, uVolt, uVolt, uVolt, uVolt, uVolt, uNewtonRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerRadian, uVolt, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uTesla, uWattPerMeterPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uVolt, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uTesla, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uJoulePerRadian, uSecond, uSquareRootMeter, uKilogram, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uTesla, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uMole, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uMeter, uSquareMeterPerSquareSecond, uMeter, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uTesla, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uJoulePerMolePerKelvin, uSecond),
    (uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogram, uSecond, uMeter, uSquareMeterPerSquareSecond, uMeter, uSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uMeter, uSquareRootMeter, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uSecond, uSecond, uCubicMeterPerSecond, uSquareRootMeter, uSquareSecondPerSquareMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uPascal, uCubicMeterPerSecond, uKilogram, uSquareMeterPerSquareSecond, uSecond, uSecond, uPascal, uSecond, uPascal, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uMeter, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCoulomb, uAmpere, uAmpere, uAmpere, uAmpere, uAmpere, uAmpere, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uAmpere, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulomb, uCoulombMeter, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter),
    (uSquareCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uCoulomb, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSquareCoulomb, uSecond, uSquareCoulomb, uSquareCoulomb, uSquareCoulomb, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulombMeter, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uMeterSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uCoulombMeter, uCoulombMeter, uCoulombMeter, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uCoulomb, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uCoulombMeter, uSecond, uCoulombMeter, uCoulombMeter, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uCoulomb, uSecond, uSecond, uSecond, uCoulombMeter, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uCoulombMeter, uMeterSecond, uSecond, uSecond, uMeter, uSecond, uCoulombMeter, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter),
    (uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uVolt, uVolt, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uVolt, uVolt, uOhmMeter, uVolt, uVolt, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSquareMeterPerSquareSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uVolt, uNewtonPerSquareCoulomb, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSquareRootMeter, uSecond, uMeter, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond),
    (uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSquareVolt, uSquareVolt, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSquareVolt, uSecond, uSquareVolt, uSquareVolt, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSquareRootMeter, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uWattPerMeterPerKelvin, uNewtonRadian, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareVolt, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uFarad, uSiemens, uSiemens, uSiemens, uSiemens, uSiemens, uSiemens, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSiemens, uFarad, uFarad, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uFarad, uSecond, uFarad, uFarad, uFarad, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uVolt, uVolt, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uVolt, uVolt, uOhmMeter, uVolt, uVolt, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSquareMeterPerSquareSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uVolt, uNewtonPerSquareCoulomb, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSquareRootMeter, uSecond, uMeter, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond),
    (uSiemens, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uReciprocalHenry, uSiemens, uSiemens, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSiemens, uSecond, uSiemens, uSiemens, uSiemens, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSiemens, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uReciprocalHenry, uSiemens, uSiemens, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSiemens, uSecond, uSiemens, uSiemens, uSiemens, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uTesla, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uWattPerSquareMeterPerKelvin, uTesla, uTesla, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uTesla, uTesla, uNewtonRadian, uTesla, uTesla, uTesla, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSquareRootMeter, uSecond, uSecond),
    (uJoulePerRadian, uVolt, uVolt, uVolt, uVolt, uVolt, uVolt, uNewtonRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerRadian, uVolt, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uTesla, uWattPerMeterPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uVolt, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uTesla, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uJoulePerRadian, uSecond, uSquareRootMeter, uKilogram, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uTesla, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uMole, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uMeter, uSquareMeterPerSquareSecond, uMeter, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uTesla, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uJoulePerMolePerKelvin, uSecond),
    (uJoulePerRadian, uVolt, uVolt, uVolt, uVolt, uVolt, uVolt, uNewtonRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerRadian, uVolt, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uTesla, uWattPerMeterPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uVolt, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uTesla, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uJoulePerRadian, uSecond, uSquareRootMeter, uKilogram, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uTesla, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uMole, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uMeter, uSquareMeterPerSquareSecond, uMeter, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uTesla, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uJoulePerMolePerKelvin, uSecond),
    (uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uReciprocalHenry, uSecond, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uLumen, uCandela, uCandela, uCandela, uCandela, uCandela, uCandela, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uCandela, uLumen, uLumen, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uLumen, uSecond, uLumen, uLumen, uLumen, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uLumen, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond),
    (uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uCandela, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uCandela, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uCandela, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uCandela, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond),
    (uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uPascal, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogram, uKilogram, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uPascal, uNewtonPerCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uKilogram, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSecond, uMeter, uNewtonPerCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSquareSecondPerSquareMeter, uSecond, uKilogram, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uKilogram, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond),
    (uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uSecond, uMeter, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uMeter, uKilogram, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uPascal, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uPascal, uPascal, uPascal, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uPascal, uPascal, uKilogram, uPascal, uPascal, uPascal, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uReciprocalSquareRootCubicMeter, uKilogramPerQuarticMeterPerSecond, uSquareRootMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uCubicMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareRootMeter, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSquareRootMeter, uPascal, uSquareMeterPerSquareSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uMeterPerWatt, uSecond, uSecond, uVolt, uSecond, uSquareRootMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogram, uKilogram, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uPascal, uNewtonPerCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uKilogram, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSecond, uMeter, uNewtonPerCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSquareSecondPerSquareMeter, uSecond, uKilogram, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uKilogram, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond),
    (uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uQuarticMeterSecond, uQuarticMeterSecond, uQuarticMeterSecond, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uSquareMeterSteradian, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uQuarticMeterSecond, uSecond, uQuarticMeterSecond, uQuarticMeterSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSquareMeterSteradian, uSecond, uSquareRootMeter, uSecond, uMeterSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uQuarticMeterSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uQuarticMeterSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uMeter, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uSecond, uMeter, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uMeter, uKilogram, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogramSquareSecond, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uKilogram, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uKilogramSquareSecond, uKilogramSquareSecond, uKilogramSquareSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uQuarticMeterSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareSecond, uPascal, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uSecond, uMeter, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uMeter, uKilogram, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramSquareMeterPerSecond, uKilogramMeter, uSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uNewtonPerSquareKilogram, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uSquareMeterPerSquareSecond, uMeter, uSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uMeter, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uKilogram, uSecond, uKilogramMeter, uCubicMeterPerSecond, uSecond, uSecond, uKilogram, uSecond, uKilogram, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSquareKilogramSquareMeterPerSquareSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uKilogramMeter, uSquareKilogramPerMeter, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uNewtonSquareMeter, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uSecond, uCubicMeterPerSecond, uSecond, uCubicMeterPerSecond, uSecond, uNewtonCubicMeter, uNewtonCubicMeter, uSecond, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramMeter, uMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uPascal, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uPascal, uNewtonPerCubicMeter, uSecond, uKilogram, uKilogram, uKilogram, uPascal, uSecond, uSecond, uKilogramMeter, uNewtonPerCubicMeter, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogram, uSecond, uKilogramMeter, uSecond, uKilogram, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uPascal, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uPascal, uNewtonPerCubicMeter, uSecond, uKilogram, uKilogram, uKilogram, uPascal, uSecond, uSecond, uKilogramMeter, uNewtonPerCubicMeter, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogram, uSecond, uKilogramMeter, uSecond, uKilogram, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareRootMeter, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSquareRootMeter, uPascal, uSquareMeterPerSquareSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uMeterPerWatt, uSecond, uSecond, uVolt, uSecond, uSquareRootMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSquareRootMeter, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uKelvin, uSecond, uSecond, uKilogram, uKilogram, uKilogram, uKilogram, uSecond, uSecond, uKilogramKelvin, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uKilogramKelvin, uKilogramKelvin, uSecond, uKilogramKelvin, uKilogramKelvin, uKilogramKelvin, uSecond, uSecond, uSecond, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uKelvin, uSecond, uMeterKelvin, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSquareRootMeter, uSecond, uSecond, uPascal, uKilogram, uSecond, uKelvin, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uJoulePerRadian, uVolt, uVolt, uVolt, uVolt, uVolt, uVolt, uNewtonRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerRadian, uVolt, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uTesla, uWattPerMeterPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uVolt, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uTesla, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uJoulePerRadian, uSecond, uSquareRootMeter, uKilogram, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uTesla, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uMole, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uMeter, uSquareMeterPerSquareSecond, uMeter, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uTesla, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uJoulePerMolePerKelvin, uSecond),
    (uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uMeterKelvin, uKelvin, uKelvin, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uMeter, uMeter, uMeter, uMeter, uSecond, uSecond, uMeterKelvin, uSecond, uMeterKelvin, uMeterKelvin, uMeterKelvin, uKelvin, uKelvin, uKelvin, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uMeterKelvin, uSquareMeterQuarticKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramKelvin, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uNewtonPerSquareKilogram, uSecond, uSecond, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uWattPerMeterPerKelvin, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uKelvin, uSecond, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uKelvin, uMeterKelvin, uKelvin, uKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerKelvin, uSecond, uKelvinPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uKilogram, uPascal, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSecond, uKilogramMeter, uKilogramMeter, uKilogramSquareMeterPerSecond, uKilogramMeter, uKilogramMeter, uKilogramMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareSecondPerSquareMeter, uSecond, uSquareMeterPerSquareSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterPerSecond, uMeter, uNewtonPerCubicMeter, uSquareMeterPerSquareSecond, uPascal, uMeter, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSquareKilogramPerMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uPascal, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSquareSecondPerSquareMeter, uSecond, uSquareSecondPerSquareMeter, uKilogramMeter, uNewtonPerSquareKilogram, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogramMeter, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uKilogram, uKilogram, uKilogram, uPascal, uPascal, uPascal, uPascal, uPascal, uPascal, uNewtonPerCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uKilogram, uKilogram, uKilogramMeter, uKilogram, uKilogram, uKilogram, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSecond, uMeter, uNewtonPerCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSquareSecondPerSquareMeter, uSecond, uKilogram, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uKilogram, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond),
    (uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uPascal, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uPascal, uPascal, uPascal, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uPascal, uPascal, uKilogram, uPascal, uPascal, uPascal, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uReciprocalSquareRootCubicMeter, uKilogramPerQuarticMeterPerSecond, uSquareRootMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uCubicMeterPerSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uVolt, uVolt, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uVolt, uVolt, uOhmMeter, uVolt, uVolt, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSquareMeterPerSquareSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uVolt, uNewtonPerSquareCoulomb, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSquareRootMeter, uSecond, uMeter, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond),
    (uWattPerMeterPerKelvin, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uNewtonPerSquareCoulomb, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uReciprocalSquareRootCubicMeter, uSecond, uSquareRootMeter, uMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond),
    (uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uMeterPerWatt, uMeterPerWatt, uMeterPerWatt, uSecond, uSecond, uKelvinPerWatt, uSecond, uKelvinPerWatt, uKelvinPerWatt, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uKelvinPerWatt, uSecond, uKelvinPerWatt, uKelvinPerWatt, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uKelvin, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uMeterPerWatt, uMeterPerWatt, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uMeterPerWatt, uSecond, uMeterPerWatt, uMeterPerWatt, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uMeterPerWatt, uMeterPerWatt, uMeterPerWatt, uSecond, uSecond, uKelvinPerWatt, uSecond, uKelvinPerWatt, uKelvinPerWatt, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uKelvinPerWatt, uSecond, uKelvinPerWatt, uKelvinPerWatt, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uKelvin, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareRootMeter, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSquareRootMeter, uPascal, uSquareMeterPerSquareSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uMeterPerWatt, uSecond, uSecond, uVolt, uSecond, uSquareRootMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond),
    (uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSquareMeterQuarticKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uMeterKelvin, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSecond, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uKelvinPerWatt, uSecond, uVolt, uSecond, uVolt, uKelvin, uSecond, uSquareRootMeter, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterKelvin, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uKelvin, uSquareMeterQuarticKelvin, uSecond, uSecond, uSecond, uKelvin, uKelvinPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uVolt, uVolt, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uVolt, uVolt, uOhmMeter, uVolt, uVolt, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSquareMeterPerSquareSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uVolt, uNewtonPerSquareCoulomb, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSquareRootMeter, uSecond, uMeter, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond),
    (uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerQuarticKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uMeterKelvin, uSecond, uSecond, uSecond),
    (uJoulePerRadian, uVolt, uVolt, uVolt, uVolt, uVolt, uVolt, uNewtonRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerRadian, uVolt, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uTesla, uWattPerMeterPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uVolt, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uTesla, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uJoulePerRadian, uSecond, uSquareRootMeter, uKilogram, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uTesla, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uMole, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uMeter, uSquareMeterPerSquareSecond, uMeter, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uTesla, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uJoulePerMolePerKelvin, uSecond),
    (uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uMole, uMole, uMole, uKelvin, uSecond, uMoleKelvin, uSecond, uMoleKelvin, uMoleKelvin, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uMoleKelvin, uSecond, uMoleKelvin, uMoleKelvin, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uKelvin, uSecond, uSecond, uSecond, uMoleKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKelvin, uSecond),
    (uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerMolePerKelvin, uJoulePerMolePerKelvin, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uJoulePerMolePerKelvin, uSecond, uJoulePerMolePerKelvin, uJoulePerMolePerKelvin, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uVolt, uOhmMeter, uVolt, uVolt, uVolt, uVolt, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uOhmMeter, uOhmMeter, uVolt, uVolt, uVolt, uVolt, uVolt, uVolt, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uOhmMeter, uSecond, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uOhmMeter, uSecond, uNewtonPerSquareCoulomb, uSecond, uWattPerMeterPerKelvin, uMeter, uSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond),
    (uWattPerMeterPerKelvin, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uNewtonPerSquareCoulomb, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uReciprocalSquareRootCubicMeter, uSecond, uSquareRootMeter, uMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond),
    (uCoulomb, uAmpere, uAmpere, uAmpere, uAmpere, uAmpere, uAmpere, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uAmpere, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulomb, uCoulombMeter, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter),
    (uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uReciprocalHenry, uSquareCoulomb, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSecond, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uReciprocalHenry, uReciprocalHenry, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uAmpere, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSquareRootMeter, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSquareCoulomb, uSecond, uSecond, uFarad, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSquareCoulombPerMeter, uSquareCoulomb, uSecond, uSecond, uCoulomb, uSecond, uSquareCoulombPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uCoulomb),
    (uCoulomb, uAmpere, uAmpere, uAmpere, uAmpere, uAmpere, uAmpere, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uAmpere, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulomb, uCoulombMeter, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter),
    (uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uSecond, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSquareMeterPerSquareSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uVolt, uOhmMeter, uVolt, uVolt, uVolt, uVolt, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uNewtonSquareMeterPerSquareCoulomb, uOhmMeter, uOhmMeter, uOhmMeter, uVolt, uVolt, uVolt, uVolt, uVolt, uVolt, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uOhmMeter, uSecond, uOhmMeter, uOhmMeter, uOhmMeter, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uCubicMeterPerSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uOhmMeter, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uOhmMeter, uSecond, uNewtonPerSquareCoulomb, uSecond, uWattPerMeterPerKelvin, uMeter, uSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSquareMeterPerSquareSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uNewtonSquareMeterPerSquareCoulomb, uSecond, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uFarad, uSiemens, uSiemens, uSiemens, uSiemens, uSiemens, uSiemens, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSiemens, uFarad, uFarad, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uFarad, uSecond, uFarad, uFarad, uFarad, uSecond, uSecond, uSiemens, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uReciprocalHenry, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uFarad, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uAmpere, uSecond, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uMeter, uMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeter, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uNewtonPerSquareKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonPerCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uMeterPerWatt, uSecond, uWattPerMeterPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uNewtonRadian, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uTesla, uNewtonRadian, uTesla, uTesla, uTesla, uTesla, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uWattPerMeterPerKelvin, uNewtonRadian, uNewtonRadian, uNewtonRadian, uTesla, uTesla, uTesla, uTesla, uTesla, uTesla, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uNewtonRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uJoulePerKilogramPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uReciprocalSquareRootCubicMeter, uPascal, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSquareRootMeter, uMeter, uSquareRootMeter, uNewtonRadian, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uMeterSecond, uSquareMeterSteradian, uMeter, uSecond, uSecond),
    (uTesla, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uWattPerSquareMeterPerKelvin, uTesla, uTesla, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uTesla, uTesla, uNewtonRadian, uTesla, uTesla, uTesla, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSquareRootMeter, uSecond, uSecond),
    (uNewtonRadian, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uTesla, uNewtonRadian, uTesla, uTesla, uTesla, uTesla, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uWattPerMeterPerKelvin, uNewtonRadian, uNewtonRadian, uNewtonRadian, uTesla, uTesla, uTesla, uTesla, uTesla, uTesla, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uNewtonRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uJoulePerKilogramPerKelvin, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uReciprocalSquareRootCubicMeter, uPascal, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSquareRootMeter, uMeter, uSquareRootMeter, uNewtonRadian, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uMeterSecond, uSquareMeterSteradian, uMeter, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogram, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uPascal, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSecond, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uSquareKilogramPerMeter, uPascal, uNewtonPerCubicMeter, uSecond, uKilogram, uKilogram, uKilogram, uPascal, uSecond, uSecond, uKilogramMeter, uNewtonPerCubicMeter, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramSquareMeterPerSecond, uKilogram, uSecond, uKilogramMeter, uSecond, uKilogram, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uKilogramPerQuarticMeterPerSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uKilogram, uKilogramMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramPerMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSecond, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSquareJoule, uSquareJoule, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonSquareMeter, uSquareMeterPerSquareSecond, uSquareJoule, uSquareJoule, uSecond, uSquareJoule, uSquareJoule, uSquareJoule, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uSecond, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonSquareMeter, uSecond, uSquareMeterPerSquareSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uKilogram, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareJoule, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSquareJoule, uSquareJoule, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uNewtonSquareMeter, uNewtonCubicMeter, uNewtonSquareMeter, uSquareMeterPerSquareSecond, uSquareJoule, uSquareJoule, uSecond, uSquareJoule, uSquareJoule, uSquareJoule, uNewtonSquareMeter, uKilogramSquareMeterPerSecond, uSecond, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonCubicMeter, uNewtonSquareMeter, uSecond, uSquareMeterPerSquareSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uKilogramSquareMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonCubicMeter, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uKilogramMeter, uKilogram, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonSquareMeter, uNewtonCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSquareJoule, uSecond, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSquareJoule, uSecond, uSecond, uSecond, uSquareKilogramSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCoulomb, uAmpere, uAmpere, uAmpere, uAmpere, uAmpere, uAmpere, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uAmpere, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulomb, uCoulombMeter, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter),
    (uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSquareMeterAmpere, uSquareMeterAmpere, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSquareMeterAmpere, uSecond, uSquareMeterAmpere, uSquareMeterAmpere, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareMeterAmpere, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uAmpere, uSquareMeterAmpere, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uLumenPerWatt, uSecond, uLumenPerWatt, uLumenPerWatt, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uLumenPerWatt, uSecond, uLumenPerWatt, uLumenPerWatt, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uMeterPerWatt, uMeterPerWatt, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uLumenPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uAmpere, uSecond, uAmpere, uAmpere, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uAmpere, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond),
    (uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uCandela, uSecond, uCandela, uCandela, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uCandela, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uCandela, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uLumenPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uCoulomb, uAmpere, uAmpere, uAmpere, uAmpere, uAmpere, uAmpere, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uAmpere, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulomb, uCoulombMeter, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter),
    (uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareRootMeter, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSquareRootMeter, uPascal, uSquareMeterPerSquareSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uMeterPerWatt, uSecond, uSecond, uVolt, uSecond, uSquareRootMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareRootMeter, uMeter, uSquareRootMeter, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uPascal, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond),
    (uMeterSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uMeter, uMeterSecond, uMeterSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uMeterSecond, uSquareMeterSteradian, uMeterSecond, uMeterSecond, uMeterSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uKilogramSquareSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uMeterPerWatt, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareMeterSteradian, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeterSecond, uSquareMeterSteradian, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSquareMeterPerSquareSecond, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uMeterSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uCubicMeterSteradian, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uCubicMeterPerSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uCubicMeterPerSecond, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uSquareMeterSteradian, uMeterSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uCubicMeterSteradian, uQuarticMeterSecond, uCubicMeterSteradian, uCubicMeterSteradian, uCubicMeterSteradian, uSecond, uSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uKilogramSquareSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterSteradian, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCubicMeterSteradian, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uMeter, uSquareRootMeter, uMeterSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uMeter, uMeter, uMeter, uMeter, uMeter, uMeter, uSquareRootMeter, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonPerSquareKilogram, uSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uSquareMeterPerSquareSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uSecond, uNewtonSquareMeterPerSquareKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uNewtonSquareMeterPerSquareKilogram, uSquareRootMeter, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uKilogramMeter, uSecond, uSecond, uSquareRootMeter, uPascal, uSquareMeterPerSquareSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uNewtonPerSquareKilogram, uSecond, uNewtonSquareMeterPerSquareKilogram, uMeterPerWatt, uSecond, uSecond, uVolt, uSecond, uSquareRootMeter, uSecond, uSecond, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareSecondPerSquareMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeterPerWatt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond),
    (uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uVolt, uVolt, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uVolt, uVolt, uOhmMeter, uVolt, uVolt, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSquareMeterPerSquareSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uMeter, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uVolt, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uVolt, uNewtonPerSquareCoulomb, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSquareRootMeter, uSecond, uMeter, uSquareMeterPerSquareSecond, uCubicMeterPerSecond, uSecond, uSecond, uSecond),
    (uJoulePerRadian, uVolt, uVolt, uVolt, uVolt, uVolt, uVolt, uNewtonRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerRadian, uVolt, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uNewtonRadian, uTesla, uWattPerMeterPerKelvin, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uJoulePerRadian, uJoulePerRadian, uSecond, uJoulePerRadian, uJoulePerRadian, uJoulePerRadian, uSecond, uSecond, uVolt, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uJoulePerKilogramPerKelvin, uSecond, uMeter, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareMeterPerSquareSecond, uSquareRootMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerMolePerKelvin, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uTesla, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uJoulePerRadian, uSecond, uSquareRootMeter, uKilogram, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uTesla, uSquareMeterSteradian, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uMole, uSecond, uMeterSecond, uSecond, uSecond, uSecond, uKilogram, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonRadian, uMeter, uSquareMeterPerSquareSecond, uMeter, uJoulePerRadian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerRadian, uSecond, uJoulePerMolePerKelvin, uSecond, uSecond, uTesla, uJoulePerRadian, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uTesla, uSecond, uSquareRootMeter, uMeterSecond, uSquareMeterSteradian, uCubicMeterSteradian, uSquareMeterPerSquareSecond, uJoulePerMolePerKelvin, uSecond),
    (uWattPerMeterPerKelvin, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uNewtonPerSquareCoulomb, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uNewtonPerSquareCoulomb, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uVolt, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerMeterPerKelvin, uSecond, uSecond, uNewtonPerSquareCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uWattPerMeterPerKelvin, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uReciprocalSquareRootCubicMeter, uSecond, uSquareRootMeter, uMeter, uSquareMeterPerSquareSecond, uSecond, uSecond, uSecond),
    (uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uMeter, uSecond, uSecond, uSecond),
    (uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerSquareMeterPerKelvin, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uSecond, uSecond, uSecond),
    (uTesla, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uWattPerSquareMeterPerKelvin, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uWattPerSquareMeterPerKelvin, uTesla, uTesla, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uTesla, uTesla, uNewtonRadian, uTesla, uTesla, uTesla, uSecond, uSecond, uWattPerSquareMeterPerKelvin, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uJoulePerKilogramPerKelvin, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uNewtonPerCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uReciprocalSquareRootCubicMeter, uSquareRootMeter, uReciprocalSquareRootCubicMeter, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uSecond, uSecond, uSecond, uSecond, uSecond, uTesla, uWattPerCubicMeterPerSteradian, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMeterSecond, uSquareRootMeter, uSecond, uSecond),
    (uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uMole, uSecond, uMole, uMole, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uMole, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uMole, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond),
    (uCoulomb, uAmpere, uAmpere, uAmpere, uAmpere, uAmpere, uAmpere, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uAmpere, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uCoulomb, uCoulombMeter, uCoulomb, uCoulomb, uCoulomb, uSecond, uSecond, uAmpere, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uReciprocalSquareRootCubicMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSquareRootMeter, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSquareRootMeter, uSecond, uCoulomb, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSecond, uSquareRootMeter)
  );

function GetSymbol(const ASymbol: string; const Prefixes: TPrefixes): string;
var
  PrefixCount: longint;
begin
  PrefixCount := Length(Prefixes);
  case PrefixCount of
    0:  result := ASymbol;
    1:  result := Format(ASymbol, [PrefixTable[Prefixes[0]].Symbol]);
    2:  result := Format(ASymbol, [PrefixTable[Prefixes[0]].Symbol, PrefixTable[Prefixes[1]].Symbol]);
    3:  result := Format(ASymbol, [PrefixTable[Prefixes[0]].Symbol, PrefixTable[Prefixes[1]].Symbol, PrefixTable[Prefixes[2]].Symbol]);
  else raise Exception.Create('Wrong number of prefixes.');
  end;
end;

function GetName(const AName: string; const Prefixes: TPrefixes): string;
var
  PrefixCount: longint;
begin
  PrefixCount := Length(Prefixes);
  case PrefixCount of
    0:  result := AName;
    1:  result := Format(AName, [PrefixTable[Prefixes[0]].Name]);
    2:  result := Format(AName, [PrefixTable[Prefixes[0]].Name, PrefixTable[Prefixes[1]].Name]);
    3:  result := Format(AName, [PrefixTable[Prefixes[0]].Name, PrefixTable[Prefixes[1]].Name, PrefixTable[Prefixes[2]].Name]);
  else raise Exception.Create('Wrong number of prefixes.');
  end;
end;

{$IFOPT D+}
class operator TQuantity.+(const ALeft, ARight: TQuantity): TQuantity;
begin
  if ALeft.FUnitOfMeasurement <> ARight.FUnitOfMeasurement then
    raise Exception.Create('Summing operator (+) has detected wrong unit of measurements.');
  result.FValue := ALeft.FValue + ARight.FValue;
end;

class operator TQuantity.-(const ALeft, ARight: TQuantity): TQuantity;
begin
  if ALeft.FUnitOfMeasurement <> ARight.FUnitOfMeasurement then
    raise Exception.Create('Subtracting operator (-) has detected wrong unit of measurements.');
  result.FValue := ALeft.FValue - ARight.FValue;
end;

class operator TQuantity.*(const ALeft, ARight: TQuantity): TQuantity;
begin
  result.FUnitOfMeasurement := MulTable[ALeft.FUnitOfMeasurement, ARight.FUnitOfMeasurement];
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TQuantity./(const ALeft, ARight: TQuantity): TQuantity;
begin
  result.FUnitOfMeasurement := DivTable[ALeft.FUnitOfMeasurement, ARight.FUnitOfMeasurement];
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TQuantity.Copy(constref ASrc: TQuantity; var ADst: TQuantity);
begin
  if ASrc.FUnitOfMeasurement <> ADst.FUnitOfMeasurement then
    raise Exception.Create('Assignment operator (:=) has detected wrong unit of measurements.');
  ADst.FValue := ASrc.FValue;
end;

class operator TQuantity.*(const ALeft: double; const ARight: TQuantity): TQuantity;
begin
  result.FUnitOfMeasurement := ARight.FUnitOfMeasurement;
  result.FValue:= ALeft * ARight.FValue;
end;

class operator TQuantity.*(const ALeft: TQuantity; const ARight: double): TQuantity;
begin
  result.FUnitOfMeasurement := ALeft.FUnitOfMeasurement;
  result.FValue:= ALeft.FValue * ARight;
end;

class operator TQuantity./(const ALeft: TQuantity; const ARight: double): TQuantity;
begin
  result.FUnitOfMeasurement := ALeft.FUnitOfMeasurement;
  result.FValue:= ALeft.FValue / ARight;
end;
{$ENDIF}

class operator TSecondUnit.*(const AValue: double; const ASelf: TSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSecondUnit.*(const AValue: TQuantity; const ASelf: TSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TDayUnit.*(const AValue: double; const ASelf: TDayUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSecond;
  result.FValue := AValue * 86400;
{$ELSE}
  result := AValue * 86400;
{$ENDIF}
end;

{$IFOPT D+}
class operator TDayUnit.*(const AValue: TQuantity; const ASelf: TDayUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSecond;
  result.FValue := AValue.FValue * 86400;
end;
{$ENDIF}

class operator THourUnit.*(const AValue: double; const ASelf: THourUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSecond;
  result.FValue := AValue * 3600;
{$ELSE}
  result := AValue * 3600;
{$ENDIF}
end;

{$IFOPT D+}
class operator THourUnit.*(const AValue: TQuantity; const ASelf: THourUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSecond;
  result.FValue := AValue.FValue * 3600;
end;
{$ENDIF}

class operator TMinuteUnit.*(const AValue: double; const ASelf: TMinuteUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSecond;
  result.FValue := AValue * 60;
{$ELSE}
  result := AValue * 60;
{$ENDIF}
end;

{$IFOPT D+}
class operator TMinuteUnit.*(const AValue: TQuantity; const ASelf: TMinuteUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSecond;
  result.FValue := AValue.FValue * 60;
end;
{$ENDIF}

class operator TSquareSecondUnit.*(const AValue: double; const ASelf: TSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareDayUnit.*(const AValue: double; const ASelf: TSquareDayUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareSecond;
  result.FValue := AValue * 7464960000;
{$ELSE}
  result := AValue * 7464960000;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareDayUnit.*(const AValue: TQuantity; const ASelf: TSquareDayUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareSecond;
  result.FValue := AValue.FValue * 7464960000;
end;
{$ENDIF}

class operator TSquareHourUnit.*(const AValue: double; const ASelf: TSquareHourUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareSecond;
  result.FValue := AValue * 12960000;
{$ELSE}
  result := AValue * 12960000;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareHourUnit.*(const AValue: TQuantity; const ASelf: TSquareHourUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareSecond;
  result.FValue := AValue.FValue * 12960000;
end;
{$ENDIF}

class operator TSquareMinuteUnit.*(const AValue: double; const ASelf: TSquareMinuteUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareSecond;
  result.FValue := AValue * 3600;
{$ELSE}
  result := AValue * 3600;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMinuteUnit.*(const AValue: TQuantity; const ASelf: TSquareMinuteUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareSecond;
  result.FValue := AValue.FValue * 3600;
end;
{$ENDIF}

class operator TCubicSecondUnit.*(const AValue: double; const ASelf: TCubicSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCubicSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCubicSecondUnit.*(const AValue: TQuantity; const ASelf: TCubicSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCubicSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TQuarticSecondUnit.*(const AValue: double; const ASelf: TQuarticSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uQuarticSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TQuarticSecondUnit.*(const AValue: TQuantity; const ASelf: TQuarticSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uQuarticSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TQuinticSecondUnit.*(const AValue: double; const ASelf: TQuinticSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uQuinticSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TQuinticSecondUnit.*(const AValue: TQuantity; const ASelf: TQuinticSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uQuinticSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSexticSecondUnit.*(const AValue: double; const ASelf: TSexticSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSexticSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSexticSecondUnit.*(const AValue: TQuantity; const ASelf: TSexticSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSexticSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMeterUnit.*(const AValue: double; const ASelf: TMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterUnit.*(const AValue: TQuantity; const ASelf: TMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TAstronomicalUnit.*(const AValue: double; const ASelf: TAstronomicalUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue * 149597870691;
{$ELSE}
  result := AValue * 149597870691;
{$ENDIF}
end;

{$IFOPT D+}
class operator TAstronomicalUnit.*(const AValue: TQuantity; const ASelf: TAstronomicalUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue.FValue * 149597870691;
end;
{$ENDIF}

class operator TInchUnit.*(const AValue: double; const ASelf: TInchUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue * 0.0254;
{$ELSE}
  result := AValue * 0.0254;
{$ENDIF}
end;

{$IFOPT D+}
class operator TInchUnit.*(const AValue: TQuantity; const ASelf: TInchUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue.FValue * 0.0254;
end;
{$ENDIF}

class operator TFootUnit.*(const AValue: double; const ASelf: TFootUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue * 0.3048;
{$ELSE}
  result := AValue * 0.3048;
{$ENDIF}
end;

{$IFOPT D+}
class operator TFootUnit.*(const AValue: TQuantity; const ASelf: TFootUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue.FValue * 0.3048;
end;
{$ENDIF}

class operator TYardUnit.*(const AValue: double; const ASelf: TYardUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue * 0.9144;
{$ELSE}
  result := AValue * 0.9144;
{$ENDIF}
end;

{$IFOPT D+}
class operator TYardUnit.*(const AValue: TQuantity; const ASelf: TYardUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue.FValue * 0.9144;
end;
{$ENDIF}

class operator TMileUnit.*(const AValue: double; const ASelf: TMileUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue * 1609.344;
{$ELSE}
  result := AValue * 1609.344;
{$ENDIF}
end;

{$IFOPT D+}
class operator TMileUnit.*(const AValue: TQuantity; const ASelf: TMileUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue.FValue * 1609.344;
end;
{$ENDIF}

class operator TNauticalMileUnit.*(const AValue: double; const ASelf: TNauticalMileUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue * 1852;
{$ELSE}
  result := AValue * 1852;
{$ENDIF}
end;

{$IFOPT D+}
class operator TNauticalMileUnit.*(const AValue: TQuantity; const ASelf: TNauticalMileUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue.FValue * 1852;
end;
{$ENDIF}

class operator TAngstromUnit.*(const AValue: double; const ASelf: TAngstromUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue * 1E-10;
{$ELSE}
  result := AValue * 1E-10;
{$ENDIF}
end;

{$IFOPT D+}
class operator TAngstromUnit.*(const AValue: TQuantity; const ASelf: TAngstromUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uMeter;
  result.FValue := AValue.FValue * 1E-10;
end;
{$ENDIF}

class operator TSquareRootMeterUnit.*(const AValue: double; const ASelf: TSquareRootMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareRootMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareRootMeterUnit.*(const AValue: TQuantity; const ASelf: TSquareRootMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareRootMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareMeterUnit.*(const AValue: double; const ASelf: TSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareInchUnit.*(const AValue: double; const ASelf: TSquareInchUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeter;
  result.FValue := AValue * 0.00064516;
{$ELSE}
  result := AValue * 0.00064516;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareInchUnit.*(const AValue: TQuantity; const ASelf: TSquareInchUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareMeter;
  result.FValue := AValue.FValue * 0.00064516;
end;
{$ENDIF}

class operator TSquareFootUnit.*(const AValue: double; const ASelf: TSquareFootUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeter;
  result.FValue := AValue * 0.09290304;
{$ELSE}
  result := AValue * 0.09290304;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareFootUnit.*(const AValue: TQuantity; const ASelf: TSquareFootUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareMeter;
  result.FValue := AValue.FValue * 0.09290304;
end;
{$ENDIF}

class operator TSquareYardUnit.*(const AValue: double; const ASelf: TSquareYardUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeter;
  result.FValue := AValue * 0.83612736;
{$ELSE}
  result := AValue * 0.83612736;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareYardUnit.*(const AValue: TQuantity; const ASelf: TSquareYardUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareMeter;
  result.FValue := AValue.FValue * 0.83612736;
end;
{$ENDIF}

class operator TSquareMileUnit.*(const AValue: double; const ASelf: TSquareMileUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeter;
  result.FValue := AValue * 2589988.110336;
{$ELSE}
  result := AValue * 2589988.110336;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMileUnit.*(const AValue: TQuantity; const ASelf: TSquareMileUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareMeter;
  result.FValue := AValue.FValue * 2589988.110336;
end;
{$ENDIF}

class operator TCubicMeterUnit.*(const AValue: double; const ASelf: TCubicMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCubicMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCubicMeterUnit.*(const AValue: TQuantity; const ASelf: TCubicMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCubicMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCubicInchUnit.*(const AValue: double; const ASelf: TCubicInchUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCubicMeter;
  result.FValue := AValue * 0.000016387064;
{$ELSE}
  result := AValue * 0.000016387064;
{$ENDIF}
end;

{$IFOPT D+}
class operator TCubicInchUnit.*(const AValue: TQuantity; const ASelf: TCubicInchUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uCubicMeter;
  result.FValue := AValue.FValue * 0.000016387064;
end;
{$ENDIF}

class operator TCubicFootUnit.*(const AValue: double; const ASelf: TCubicFootUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCubicMeter;
  result.FValue := AValue * 0.028316846592;
{$ELSE}
  result := AValue * 0.028316846592;
{$ENDIF}
end;

{$IFOPT D+}
class operator TCubicFootUnit.*(const AValue: TQuantity; const ASelf: TCubicFootUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uCubicMeter;
  result.FValue := AValue.FValue * 0.028316846592;
end;
{$ENDIF}

class operator TCubicYardUnit.*(const AValue: double; const ASelf: TCubicYardUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCubicMeter;
  result.FValue := AValue * 0.764554857984;
{$ELSE}
  result := AValue * 0.764554857984;
{$ENDIF}
end;

{$IFOPT D+}
class operator TCubicYardUnit.*(const AValue: TQuantity; const ASelf: TCubicYardUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uCubicMeter;
  result.FValue := AValue.FValue * 0.764554857984;
end;
{$ENDIF}

class operator TLitreUnit.*(const AValue: double; const ASelf: TLitreUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCubicMeter;
  result.FValue := AValue * 1E-03;
{$ELSE}
  result := AValue * 1E-03;
{$ENDIF}
end;

{$IFOPT D+}
class operator TLitreUnit.*(const AValue: TQuantity; const ASelf: TLitreUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uCubicMeter;
  result.FValue := AValue.FValue * 1E-03;
end;
{$ENDIF}

class operator TGallonUnit.*(const AValue: double; const ASelf: TGallonUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCubicMeter;
  result.FValue := AValue * 0.0037854119678;
{$ELSE}
  result := AValue * 0.0037854119678;
{$ENDIF}
end;

{$IFOPT D+}
class operator TGallonUnit.*(const AValue: TQuantity; const ASelf: TGallonUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uCubicMeter;
  result.FValue := AValue.FValue * 0.0037854119678;
end;
{$ENDIF}

class operator TQuarticMeterUnit.*(const AValue: double; const ASelf: TQuarticMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uQuarticMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TQuarticMeterUnit.*(const AValue: TQuantity; const ASelf: TQuarticMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uQuarticMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TQuinticMeterUnit.*(const AValue: double; const ASelf: TQuinticMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uQuinticMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TQuinticMeterUnit.*(const AValue: TQuantity; const ASelf: TQuinticMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uQuinticMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSexticMeterUnit.*(const AValue: double; const ASelf: TSexticMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSexticMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSexticMeterUnit.*(const AValue: TQuantity; const ASelf: TSexticMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSexticMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramUnit.*(const AValue: double; const ASelf: TKilogramUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramUnit.*(const AValue: TQuantity; const ASelf: TKilogramUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogram];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TTonneUnit.*(const AValue: double; const ASelf: TTonneUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue * 1E+03;
{$ELSE}
  result := AValue * 1E+03;
{$ENDIF}
end;

{$IFOPT D+}
class operator TTonneUnit.*(const AValue: TQuantity; const ASelf: TTonneUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue.FValue * 1E+03;
end;
{$ENDIF}

class operator TPoundUnit.*(const AValue: double; const ASelf: TPoundUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue * 0.45359237;
{$ELSE}
  result := AValue * 0.45359237;
{$ENDIF}
end;

{$IFOPT D+}
class operator TPoundUnit.*(const AValue: TQuantity; const ASelf: TPoundUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue.FValue * 0.45359237;
end;
{$ENDIF}

class operator TOunceUnit.*(const AValue: double; const ASelf: TOunceUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue * 0.028349523125;
{$ELSE}
  result := AValue * 0.028349523125;
{$ENDIF}
end;

{$IFOPT D+}
class operator TOunceUnit.*(const AValue: TQuantity; const ASelf: TOunceUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue.FValue * 0.028349523125;
end;
{$ENDIF}

class operator TStoneUnit.*(const AValue: double; const ASelf: TStoneUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue * 6.35029318;
{$ELSE}
  result := AValue * 6.35029318;
{$ENDIF}
end;

{$IFOPT D+}
class operator TStoneUnit.*(const AValue: TQuantity; const ASelf: TStoneUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue.FValue * 6.35029318;
end;
{$ENDIF}

class operator TTonUnit.*(const AValue: double; const ASelf: TTonUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue * 907.18474;
{$ELSE}
  result := AValue * 907.18474;
{$ENDIF}
end;

{$IFOPT D+}
class operator TTonUnit.*(const AValue: TQuantity; const ASelf: TTonUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue.FValue * 907.18474;
end;
{$ENDIF}

class operator TElectronvoltPerSquareSpeedOfLightUnit.*(const AValue: double; const ASelf: TElectronvoltPerSquareSpeedOfLightUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue * 1.7826619216279E-36;
{$ELSE}
  result := AValue * 1.7826619216279E-36;
{$ENDIF}
end;

{$IFOPT D+}
class operator TElectronvoltPerSquareSpeedOfLightUnit.*(const AValue: TQuantity; const ASelf: TElectronvoltPerSquareSpeedOfLightUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogram;
  result.FValue := AValue.FValue * 1.7826619216279E-36;
end;
{$ENDIF}

class operator TSquareKilogramUnit.*(const AValue: double; const ASelf: TSquareKilogramUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareKilogram;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareKilogramUnit.*(const AValue: TQuantity; const ASelf: TSquareKilogramUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareKilogram];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TAmpereUnit.*(const AValue: double; const ASelf: TAmpereUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uAmpere;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TAmpereUnit.*(const AValue: TQuantity; const ASelf: TAmpereUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uAmpere];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareAmpereUnit.*(const AValue: double; const ASelf: TSquareAmpereUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareAmpere;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareAmpereUnit.*(const AValue: TQuantity; const ASelf: TSquareAmpereUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareAmpere];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKelvinUnit.*(const AValue: double; const ASelf: TKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKelvinUnit.*(const AValue: TQuantity; const ASelf: TKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TDegreeCelsiusUnit.*(const AValue: double; const ASelf: TDegreeCelsiusUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKelvin;
  result.FValue := AValue + 273.15;
{$ELSE}
  result := AValue + 273.15;
{$ENDIF}
end;

{$IFOPT D+}
class operator TDegreeCelsiusUnit.*(const AValue: TQuantity; const ASelf: TDegreeCelsiusUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKelvin;
  result.FValue := AValue.FValue + 273.15;
end;
{$ENDIF}

class operator TDegreeFahrenheitUnit.*(const AValue: double; const ASelf: TDegreeFahrenheitUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKelvin;
  result.FValue := 5/9 * (AValue - 32) + 273.15;
{$ELSE}
  result := 5/9 * (AValue - 32) + 273.15;
{$ENDIF}
end;

{$IFOPT D+}
class operator TDegreeFahrenheitUnit.*(const AValue: TQuantity; const ASelf: TDegreeFahrenheitUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKelvin;
  result.FValue := 5/9 * (AValue.FValue - 32) + 273.15;
end;
{$ENDIF}

class operator TSquareKelvinUnit.*(const AValue: double; const ASelf: TSquareKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareKelvinUnit.*(const AValue: TQuantity; const ASelf: TSquareKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCubicKelvinUnit.*(const AValue: double; const ASelf: TCubicKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCubicKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCubicKelvinUnit.*(const AValue: TQuantity; const ASelf: TCubicKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCubicKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TQuarticKelvinUnit.*(const AValue: double; const ASelf: TQuarticKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uQuarticKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TQuarticKelvinUnit.*(const AValue: TQuantity; const ASelf: TQuarticKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uQuarticKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMoleUnit.*(const AValue: double; const ASelf: TMoleUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMole;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMoleUnit.*(const AValue: TQuantity; const ASelf: TMoleUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMole];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCandelaUnit.*(const AValue: double; const ASelf: TCandelaUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCandela;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCandelaUnit.*(const AValue: TQuantity; const ASelf: TCandelaUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCandela];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TRadianUnit.*(const AValue: double; const ASelf: TRadianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uRadian;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TRadianUnit.*(const AValue: TQuantity; const ASelf: TRadianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uRadian];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TDegreeUnit.*(const AValue: double; const ASelf: TDegreeUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uRadian;
  result.FValue := AValue * Pi/180;
{$ELSE}
  result := AValue * Pi/180;
{$ENDIF}
end;

{$IFOPT D+}
class operator TDegreeUnit.*(const AValue: TQuantity; const ASelf: TDegreeUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uRadian;
  result.FValue := AValue.FValue * Pi/180;
end;
{$ENDIF}

class operator TSteradianUnit.*(const AValue: double; const ASelf: TSteradianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSteradian;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSteradianUnit.*(const AValue: TQuantity; const ASelf: TSteradianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSteradian];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareDegreeUnit.*(const AValue: double; const ASelf: TSquareDegreeUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSteradian;
  result.FValue := AValue * Pi*Pi/32400;
{$ELSE}
  result := AValue * Pi*Pi/32400;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareDegreeUnit.*(const AValue: TQuantity; const ASelf: TSquareDegreeUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSteradian;
  result.FValue := AValue.FValue * Pi*Pi/32400;
end;
{$ENDIF}

class operator THertzUnit.*(const AValue: double; const ASelf: THertzUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uHertz;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator THertzUnit.*(const AValue: TQuantity; const ASelf: THertzUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uHertz];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TReciprocalSecondUnit.*(const AValue: double; const ASelf: TReciprocalSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uHertz;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TReciprocalSecondUnit.*(const AValue: TQuantity; const ASelf: TReciprocalSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uHertz;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TRadianPerSecondUnit.*(const AValue: double; const ASelf: TRadianPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uHertz;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TRadianPerSecondUnit.*(const AValue: TQuantity; const ASelf: TRadianPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uHertz;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSquareHertzUnit.*(const AValue: double; const ASelf: TSquareHertzUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareHertz;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareHertzUnit.*(const AValue: TQuantity; const ASelf: TSquareHertzUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareHertz];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TReciprocalSquareSecondUnit.*(const AValue: double; const ASelf: TReciprocalSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareHertz;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TReciprocalSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TReciprocalSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareHertz;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TRadianPerSquareSecondUnit.*(const AValue: double; const ASelf: TRadianPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareHertz;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TRadianPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TRadianPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareHertz;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSteradianPerSquareSecondUnit.*(const AValue: double; const ASelf: TSteradianPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSteradianPerSquareSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSteradianPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TSteradianPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSteradianPerSquareSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMeterPerSecondUnit.*(const AValue: double; const ASelf: TMeterPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterPerSecondUnit.*(const AValue: TQuantity; const ASelf: TMeterPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeterPerSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMeterPerHourUnit.*(const AValue: double; const ASelf: TMeterPerHourUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerSecond;
  result.FValue := AValue * 1/3600;
{$ELSE}
  result := AValue * 1/3600;
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterPerHourUnit.*(const AValue: TQuantity; const ASelf: TMeterPerHourUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uMeterPerSecond;
  result.FValue := AValue.FValue * 1/3600;
end;
{$ENDIF}

class operator TMilePerHourUnit.*(const AValue: double; const ASelf: TMilePerHourUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerSecond;
  result.FValue := AValue * 0.44704;
{$ELSE}
  result := AValue * 0.44704;
{$ENDIF}
end;

{$IFOPT D+}
class operator TMilePerHourUnit.*(const AValue: TQuantity; const ASelf: TMilePerHourUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uMeterPerSecond;
  result.FValue := AValue.FValue * 0.44704;
end;
{$ENDIF}

class operator TNauticalMilePerHourUnit.*(const AValue: double; const ASelf: TNauticalMilePerHourUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerSecond;
  result.FValue := AValue * 463/900;
{$ELSE}
  result := AValue * 463/900;
{$ENDIF}
end;

{$IFOPT D+}
class operator TNauticalMilePerHourUnit.*(const AValue: TQuantity; const ASelf: TNauticalMilePerHourUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uMeterPerSecond;
  result.FValue := AValue.FValue * 463/900;
end;
{$ENDIF}

class operator TMeterPerSquareSecondUnit.*(const AValue: double; const ASelf: TMeterPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerSquareSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TMeterPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeterPerSquareSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMeterPerSecondPerSecondUnit.*(const AValue: double; const ASelf: TMeterPerSecondPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerSquareSecond;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterPerSecondPerSecondUnit.*(const AValue: TQuantity; const ASelf: TMeterPerSecondPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uMeterPerSquareSecond;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TMeterPerHourPerSecondUnit.*(const AValue: double; const ASelf: TMeterPerHourPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerSquareSecond;
  result.FValue := AValue * 1/3600;
{$ELSE}
  result := AValue * 1/3600;
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterPerHourPerSecondUnit.*(const AValue: TQuantity; const ASelf: TMeterPerHourPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uMeterPerSquareSecond;
  result.FValue := AValue.FValue * 1/3600;
end;
{$ENDIF}

class operator TMeterPerCubicSecondUnit.*(const AValue: double; const ASelf: TMeterPerCubicSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerCubicSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterPerCubicSecondUnit.*(const AValue: TQuantity; const ASelf: TMeterPerCubicSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeterPerCubicSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMeterPerQuarticSecondUnit.*(const AValue: double; const ASelf: TMeterPerQuarticSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerQuarticSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterPerQuarticSecondUnit.*(const AValue: TQuantity; const ASelf: TMeterPerQuarticSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeterPerQuarticSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMeterPerQuinticSecondUnit.*(const AValue: double; const ASelf: TMeterPerQuinticSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerQuinticSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterPerQuinticSecondUnit.*(const AValue: TQuantity; const ASelf: TMeterPerQuinticSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeterPerQuinticSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMeterPerSexticSecondUnit.*(const AValue: double; const ASelf: TMeterPerSexticSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerSexticSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterPerSexticSecondUnit.*(const AValue: TQuantity; const ASelf: TMeterPerSexticSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeterPerSexticSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareMeterPerSquareSecondUnit.*(const AValue: double; const ASelf: TSquareMeterPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterPerSquareSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMeterPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TSquareMeterPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareMeterPerSquareSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TJoulePerKilogramUnit.*(const AValue: double; const ASelf: TJoulePerKilogramUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterPerSquareSecond;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerKilogramUnit.*(const AValue: TQuantity; const ASelf: TJoulePerKilogramUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareMeterPerSquareSecond;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TGrayUnit.*(const AValue: double; const ASelf: TGrayUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterPerSquareSecond;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TGrayUnit.*(const AValue: TQuantity; const ASelf: TGrayUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareMeterPerSquareSecond;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSievertUnit.*(const AValue: double; const ASelf: TSievertUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterPerSquareSecond;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSievertUnit.*(const AValue: TQuantity; const ASelf: TSievertUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareMeterPerSquareSecond;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TMeterSecondUnit.*(const AValue: double; const ASelf: TMeterSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterSecondUnit.*(const AValue: TQuantity; const ASelf: TMeterSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeterSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramMeterUnit.*(const AValue: double; const ASelf: TKilogramMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramMeterUnit.*(const AValue: TQuantity; const ASelf: TKilogramMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogramMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramPerSecondUnit.*(const AValue: double; const ASelf: TKilogramPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramPerSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogramPerSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TJoulePerSquareMeterPerHertzUnit.*(const AValue: double; const ASelf: TJoulePerSquareMeterPerHertzUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramPerSecond;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerSquareMeterPerHertzUnit.*(const AValue: TQuantity; const ASelf: TJoulePerSquareMeterPerHertzUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogramPerSecond;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TKilogramMeterPerSecondUnit.*(const AValue: double; const ASelf: TKilogramMeterPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramMeterPerSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramMeterPerSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramMeterPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogramMeterPerSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TNewtonSecondUnit.*(const AValue: double; const ASelf: TNewtonSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramMeterPerSecond;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonSecondUnit.*(const AValue: TQuantity; const ASelf: TNewtonSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogramMeterPerSecond;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSquareKilogramSquareMeterPerSquareSecondUnit.*(const AValue: double; const ASelf: TSquareKilogramSquareMeterPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareKilogramSquareMeterPerSquareSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareKilogramSquareMeterPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TSquareKilogramSquareMeterPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareKilogramSquareMeterPerSquareSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TReciprocalSquareRootMeterUnit.*(const AValue: double; const ASelf: TReciprocalSquareRootMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uReciprocalSquareRootMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TReciprocalSquareRootMeterUnit.*(const AValue: TQuantity; const ASelf: TReciprocalSquareRootMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uReciprocalSquareRootMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TReciprocalMeterUnit.*(const AValue: double; const ASelf: TReciprocalMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uReciprocalMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TReciprocalMeterUnit.*(const AValue: TQuantity; const ASelf: TReciprocalMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uReciprocalMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TDioptreUnit.*(const AValue: double; const ASelf: TDioptreUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uReciprocalMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TDioptreUnit.*(const AValue: TQuantity; const ASelf: TDioptreUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uReciprocalMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TReciprocalSquareRootCubicMeterUnit.*(const AValue: double; const ASelf: TReciprocalSquareRootCubicMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uReciprocalSquareRootCubicMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TReciprocalSquareRootCubicMeterUnit.*(const AValue: TQuantity; const ASelf: TReciprocalSquareRootCubicMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uReciprocalSquareRootCubicMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TReciprocalSquareMeterUnit.*(const AValue: double; const ASelf: TReciprocalSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uReciprocalSquareMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TReciprocalSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TReciprocalSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uReciprocalSquareMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TReciprocalCubicMeterUnit.*(const AValue: double; const ASelf: TReciprocalCubicMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uReciprocalCubicMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TReciprocalCubicMeterUnit.*(const AValue: TQuantity; const ASelf: TReciprocalCubicMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uReciprocalCubicMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TReciprocalQuarticMeterUnit.*(const AValue: double; const ASelf: TReciprocalQuarticMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uReciprocalQuarticMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TReciprocalQuarticMeterUnit.*(const AValue: TQuantity; const ASelf: TReciprocalQuarticMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uReciprocalQuarticMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramSquareMeterUnit.*(const AValue: double; const ASelf: TKilogramSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramSquareMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TKilogramSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogramSquareMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramSquareMeterPerSecondUnit.*(const AValue: double; const ASelf: TKilogramSquareMeterPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramSquareMeterPerSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramSquareMeterPerSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogramSquareMeterPerSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TNewtonMeterSecondUnit.*(const AValue: double; const ASelf: TNewtonMeterSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramSquareMeterPerSecond;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonMeterSecondUnit.*(const AValue: TQuantity; const ASelf: TNewtonMeterSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogramSquareMeterPerSecond;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSecondPerMeterUnit.*(const AValue: double; const ASelf: TSecondPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSecondPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSecondPerMeterUnit.*(const AValue: TQuantity; const ASelf: TSecondPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSecondPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramPerMeterUnit.*(const AValue: double; const ASelf: TKilogramPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerMeterUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogramPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramPerSquareMeterUnit.*(const AValue: double; const ASelf: TKilogramPerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramPerSquareMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogramPerSquareMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramPerCubicMeterUnit.*(const AValue: double; const ASelf: TKilogramPerCubicMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramPerCubicMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerCubicMeterUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerCubicMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogramPerCubicMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TPoundPerCubicInchUnit.*(const AValue: double; const ASelf: TPoundPerCubicInchUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramPerCubicMeter;
  result.FValue := AValue * 27679.9047102031;
{$ELSE}
  result := AValue * 27679.9047102031;
{$ENDIF}
end;

{$IFOPT D+}
class operator TPoundPerCubicInchUnit.*(const AValue: TQuantity; const ASelf: TPoundPerCubicInchUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogramPerCubicMeter;
  result.FValue := AValue.FValue * 27679.9047102031;
end;
{$ENDIF}

class operator TNewtonUnit.*(const AValue: double; const ASelf: TNewtonUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewton;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonUnit.*(const AValue: TQuantity; const ASelf: TNewtonUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uNewton];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TPoundForceUnit.*(const AValue: double; const ASelf: TPoundForceUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewton;
  result.FValue := AValue * 4.4482216152605;
{$ELSE}
  result := AValue * 4.4482216152605;
{$ENDIF}
end;

{$IFOPT D+}
class operator TPoundForceUnit.*(const AValue: TQuantity; const ASelf: TPoundForceUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uNewton;
  result.FValue := AValue.FValue * 4.4482216152605;
end;
{$ENDIF}

class operator TKilogramMeterPerSquareSecondUnit.*(const AValue: double; const ASelf: TKilogramMeterPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewton;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramMeterPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramMeterPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uNewton;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TNewtonRadianUnit.*(const AValue: double; const ASelf: TNewtonRadianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonRadian;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonRadianUnit.*(const AValue: TQuantity; const ASelf: TNewtonRadianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uNewtonRadian];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareNewtonUnit.*(const AValue: double; const ASelf: TSquareNewtonUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareNewton;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareNewtonUnit.*(const AValue: TQuantity; const ASelf: TSquareNewtonUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareNewton];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareKilogramSquareMeterPerQuarticSecondUnit.*(const AValue: double; const ASelf: TSquareKilogramSquareMeterPerQuarticSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareNewton;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareKilogramSquareMeterPerQuarticSecondUnit.*(const AValue: TQuantity; const ASelf: TSquareKilogramSquareMeterPerQuarticSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareNewton;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TPascalUnit.*(const AValue: double; const ASelf: TPascalUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uPascal;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TPascalUnit.*(const AValue: TQuantity; const ASelf: TPascalUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uPascal];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TNewtonPerSquareMeterUnit.*(const AValue: double; const ASelf: TNewtonPerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uPascal;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonPerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TNewtonPerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uPascal;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TBarUnit.*(const AValue: double; const ASelf: TBarUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uPascal;
  result.FValue := AValue * 1E+05;
{$ELSE}
  result := AValue * 1E+05;
{$ENDIF}
end;

{$IFOPT D+}
class operator TBarUnit.*(const AValue: TQuantity; const ASelf: TBarUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uPascal;
  result.FValue := AValue.FValue * 1E+05;
end;
{$ENDIF}

class operator TPoundPerSquareInchUnit.*(const AValue: double; const ASelf: TPoundPerSquareInchUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uPascal;
  result.FValue := AValue * 6894.75729316836;
{$ELSE}
  result := AValue * 6894.75729316836;
{$ENDIF}
end;

{$IFOPT D+}
class operator TPoundPerSquareInchUnit.*(const AValue: TQuantity; const ASelf: TPoundPerSquareInchUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uPascal;
  result.FValue := AValue.FValue * 6894.75729316836;
end;
{$ENDIF}

class operator TJoulePerCubicMeterUnit.*(const AValue: double; const ASelf: TJoulePerCubicMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uPascal;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerCubicMeterUnit.*(const AValue: TQuantity; const ASelf: TJoulePerCubicMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uPascal;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TKilogramPerMeterPerSquareSecondUnit.*(const AValue: double; const ASelf: TKilogramPerMeterPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uPascal;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerMeterPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerMeterPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uPascal;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TJouleUnit.*(const AValue: double; const ASelf: TJouleUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TJouleUnit.*(const AValue: TQuantity; const ASelf: TJouleUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uJoule];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWattHourUnit.*(const AValue: double; const ASelf: TWattHourUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue * 3600;
{$ELSE}
  result := AValue * 3600;
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattHourUnit.*(const AValue: TQuantity; const ASelf: TWattHourUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue.FValue * 3600;
end;
{$ENDIF}

class operator TWattSecondUnit.*(const AValue: double; const ASelf: TWattSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattSecondUnit.*(const AValue: TQuantity; const ASelf: TWattSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TWattPerHertzUnit.*(const AValue: double; const ASelf: TWattPerHertzUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerHertzUnit.*(const AValue: TQuantity; const ASelf: TWattPerHertzUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TElectronvoltUnit.*(const AValue: double; const ASelf: TElectronvoltUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue * 1.602176634E-019;
{$ELSE}
  result := AValue * 1.602176634E-019;
{$ENDIF}
end;

{$IFOPT D+}
class operator TElectronvoltUnit.*(const AValue: TQuantity; const ASelf: TElectronvoltUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue.FValue * 1.602176634E-019;
end;
{$ENDIF}

class operator TNewtonMeterUnit.*(const AValue: double; const ASelf: TNewtonMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonMeterUnit.*(const AValue: TQuantity; const ASelf: TNewtonMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TPoundForceInchUnit.*(const AValue: double; const ASelf: TPoundForceInchUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue * 0.112984829027617;
{$ELSE}
  result := AValue * 0.112984829027617;
{$ENDIF}
end;

{$IFOPT D+}
class operator TPoundForceInchUnit.*(const AValue: TQuantity; const ASelf: TPoundForceInchUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue.FValue * 0.112984829027617;
end;
{$ENDIF}

class operator TRydbergUnit.*(const AValue: double; const ASelf: TRydbergUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue * 2.1798723611035E-18;
{$ELSE}
  result := AValue * 2.1798723611035E-18;
{$ENDIF}
end;

{$IFOPT D+}
class operator TRydbergUnit.*(const AValue: TQuantity; const ASelf: TRydbergUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue.FValue * 2.1798723611035E-18;
end;
{$ENDIF}

class operator TCalorieUnit.*(const AValue: double; const ASelf: TCalorieUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue * 4.184;
{$ELSE}
  result := AValue * 4.184;
{$ENDIF}
end;

{$IFOPT D+}
class operator TCalorieUnit.*(const AValue: TQuantity; const ASelf: TCalorieUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue.FValue * 4.184;
end;
{$ENDIF}

class operator TKilogramSquareMeterPerSquareSecondUnit.*(const AValue: double; const ASelf: TKilogramSquareMeterPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramSquareMeterPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoule;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TJoulePerRadianUnit.*(const AValue: double; const ASelf: TJoulePerRadianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoulePerRadian;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerRadianUnit.*(const AValue: TQuantity; const ASelf: TJoulePerRadianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uJoulePerRadian];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TJoulePerDegreeUnit.*(const AValue: double; const ASelf: TJoulePerDegreeUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoulePerRadian;
  result.FValue := AValue * 180/Pi;
{$ELSE}
  result := AValue * 180/Pi;
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerDegreeUnit.*(const AValue: TQuantity; const ASelf: TJoulePerDegreeUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoulePerRadian;
  result.FValue := AValue.FValue * 180/Pi;
end;
{$ENDIF}

class operator TNewtonMeterPerRadianUnit.*(const AValue: double; const ASelf: TNewtonMeterPerRadianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoulePerRadian;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonMeterPerRadianUnit.*(const AValue: TQuantity; const ASelf: TNewtonMeterPerRadianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoulePerRadian;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TNewtonMeterPerDegreeUnit.*(const AValue: double; const ASelf: TNewtonMeterPerDegreeUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoulePerRadian;
  result.FValue := AValue * 180/Pi;
{$ELSE}
  result := AValue * 180/Pi;
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonMeterPerDegreeUnit.*(const AValue: TQuantity; const ASelf: TNewtonMeterPerDegreeUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoulePerRadian;
  result.FValue := AValue.FValue * 180/Pi;
end;
{$ENDIF}

class operator TKilogramSquareMeterPerSquareSecondPerRadianUnit.*(const AValue: double; const ASelf: TKilogramSquareMeterPerSquareSecondPerRadianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoulePerRadian;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramSquareMeterPerSquareSecondPerRadianUnit.*(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerSquareSecondPerRadianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoulePerRadian;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TWattUnit.*(const AValue: double; const ASelf: TWattUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWatt;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattUnit.*(const AValue: TQuantity; const ASelf: TWattUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWatt];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramSquareMeterPerCubicSecondUnit.*(const AValue: double; const ASelf: TKilogramSquareMeterPerCubicSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWatt;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramSquareMeterPerCubicSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerCubicSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uWatt;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TCoulombUnit.*(const AValue: double; const ASelf: TCoulombUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCoulomb;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCoulombUnit.*(const AValue: TQuantity; const ASelf: TCoulombUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCoulomb];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TAmpereHourUnit.*(const AValue: double; const ASelf: TAmpereHourUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCoulomb;
  result.FValue := AValue * 3600;
{$ELSE}
  result := AValue * 3600;
{$ENDIF}
end;

{$IFOPT D+}
class operator TAmpereHourUnit.*(const AValue: TQuantity; const ASelf: TAmpereHourUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uCoulomb;
  result.FValue := AValue.FValue * 3600;
end;
{$ENDIF}

class operator TAmpereSecondUnit.*(const AValue: double; const ASelf: TAmpereSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCoulomb;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TAmpereSecondUnit.*(const AValue: TQuantity; const ASelf: TAmpereSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uCoulomb;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSquareCoulombUnit.*(const AValue: double; const ASelf: TSquareCoulombUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareCoulomb;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareCoulombUnit.*(const AValue: TQuantity; const ASelf: TSquareCoulombUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareCoulomb];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareAmpereSquareSecondUnit.*(const AValue: double; const ASelf: TSquareAmpereSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareCoulomb;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareAmpereSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TSquareAmpereSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareCoulomb;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TCoulombMeterUnit.*(const AValue: double; const ASelf: TCoulombMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCoulombMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCoulombMeterUnit.*(const AValue: TQuantity; const ASelf: TCoulombMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCoulombMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TVoltUnit.*(const AValue: double; const ASelf: TVoltUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uVolt;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TVoltUnit.*(const AValue: TQuantity; const ASelf: TVoltUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uVolt];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TJoulePerCoulombUnit.*(const AValue: double; const ASelf: TJoulePerCoulombUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uVolt;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerCoulombUnit.*(const AValue: TQuantity; const ASelf: TJoulePerCoulombUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uVolt;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TKilogramSquareMeterPerAmperePerCubicSecondUnit.*(const AValue: double; const ASelf: TKilogramSquareMeterPerAmperePerCubicSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uVolt;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramSquareMeterPerAmperePerCubicSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerAmperePerCubicSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uVolt;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSquareVoltUnit.*(const AValue: double; const ASelf: TSquareVoltUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareVolt;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareVoltUnit.*(const AValue: TQuantity; const ASelf: TSquareVoltUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareVolt];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondUnit.*(const AValue: double; const ASelf: TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareVolt;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondUnit.*(const AValue: TQuantity; const ASelf: TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareVolt;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TFaradUnit.*(const AValue: double; const ASelf: TFaradUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uFarad;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TFaradUnit.*(const AValue: TQuantity; const ASelf: TFaradUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uFarad];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCoulombPerVoltUnit.*(const AValue: double; const ASelf: TCoulombPerVoltUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uFarad;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TCoulombPerVoltUnit.*(const AValue: TQuantity; const ASelf: TCoulombPerVoltUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uFarad;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSquareAmpereQuarticSecondPerKilogramPerSquareMeterUnit.*(const AValue: double; const ASelf: TSquareAmpereQuarticSecondPerKilogramPerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uFarad;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareAmpereQuarticSecondPerKilogramPerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TSquareAmpereQuarticSecondPerKilogramPerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uFarad;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TOhmUnit.*(const AValue: double; const ASelf: TOhmUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uOhm;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TOhmUnit.*(const AValue: TQuantity; const ASelf: TOhmUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uOhm];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramSquareMeterPerSquareAmperePerCubicSecondUnit.*(const AValue: double; const ASelf: TKilogramSquareMeterPerSquareAmperePerCubicSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uOhm;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramSquareMeterPerSquareAmperePerCubicSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerSquareAmperePerCubicSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uOhm;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSiemensUnit.*(const AValue: double; const ASelf: TSiemensUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSiemens;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSiemensUnit.*(const AValue: TQuantity; const ASelf: TSiemensUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSiemens];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareAmpereCubicSecondPerKilogramPerSquareMeterUnit.*(const AValue: double; const ASelf: TSquareAmpereCubicSecondPerKilogramPerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSiemens;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareAmpereCubicSecondPerKilogramPerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TSquareAmpereCubicSecondPerKilogramPerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSiemens;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSiemensPerMeterUnit.*(const AValue: double; const ASelf: TSiemensPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSiemensPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSiemensPerMeterUnit.*(const AValue: TQuantity; const ASelf: TSiemensPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSiemensPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TTeslaUnit.*(const AValue: double; const ASelf: TTeslaUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uTesla;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TTeslaUnit.*(const AValue: TQuantity; const ASelf: TTeslaUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uTesla];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWeberPerSquareMeterUnit.*(const AValue: double; const ASelf: TWeberPerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uTesla;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TWeberPerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TWeberPerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uTesla;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TKilogramPerAmperePerSquareSecondUnit.*(const AValue: double; const ASelf: TKilogramPerAmperePerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uTesla;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerAmperePerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerAmperePerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uTesla;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TWeberUnit.*(const AValue: double; const ASelf: TWeberUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWeber;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWeberUnit.*(const AValue: TQuantity; const ASelf: TWeberUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWeber];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramSquareMeterPerAmperePerSquareSecondUnit.*(const AValue: double; const ASelf: TKilogramSquareMeterPerAmperePerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWeber;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramSquareMeterPerAmperePerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerAmperePerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uWeber;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator THenryUnit.*(const AValue: double; const ASelf: THenryUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uHenry;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator THenryUnit.*(const AValue: TQuantity; const ASelf: THenryUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uHenry];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramSquareMeterPerSquareAmperePerSquareSecondUnit.*(const AValue: double; const ASelf: TKilogramSquareMeterPerSquareAmperePerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uHenry;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramSquareMeterPerSquareAmperePerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerSquareAmperePerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uHenry;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TReciprocalHenryUnit.*(const AValue: double; const ASelf: TReciprocalHenryUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uReciprocalHenry;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TReciprocalHenryUnit.*(const AValue: TQuantity; const ASelf: TReciprocalHenryUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uReciprocalHenry];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TLumenUnit.*(const AValue: double; const ASelf: TLumenUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uLumen;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TLumenUnit.*(const AValue: TQuantity; const ASelf: TLumenUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uLumen];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCandelaSteradianUnit.*(const AValue: double; const ASelf: TCandelaSteradianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uLumen;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TCandelaSteradianUnit.*(const AValue: TQuantity; const ASelf: TCandelaSteradianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uLumen;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TLumenSecondUnit.*(const AValue: double; const ASelf: TLumenSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uLumenSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TLumenSecondUnit.*(const AValue: TQuantity; const ASelf: TLumenSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uLumenSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TLumenSecondPerCubicMeterUnit.*(const AValue: double; const ASelf: TLumenSecondPerCubicMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uLumenSecondPerCubicMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TLumenSecondPerCubicMeterUnit.*(const AValue: TQuantity; const ASelf: TLumenSecondPerCubicMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uLumenSecondPerCubicMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TLuxUnit.*(const AValue: double; const ASelf: TLuxUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uLux;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TLuxUnit.*(const AValue: TQuantity; const ASelf: TLuxUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uLux];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCandelaSteradianPerSquareMeterUnit.*(const AValue: double; const ASelf: TCandelaSteradianPerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uLux;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TCandelaSteradianPerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TCandelaSteradianPerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uLux;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TLuxSecondUnit.*(const AValue: double; const ASelf: TLuxSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uLuxSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TLuxSecondUnit.*(const AValue: TQuantity; const ASelf: TLuxSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uLuxSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TBequerelUnit.*(const AValue: double; const ASelf: TBequerelUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uHertz;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TBequerelUnit.*(const AValue: TQuantity; const ASelf: TBequerelUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uHertz;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TKatalUnit.*(const AValue: double; const ASelf: TKatalUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKatal;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKatalUnit.*(const AValue: TQuantity; const ASelf: TKatalUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKatal];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMolePerSecondUnit.*(const AValue: double; const ASelf: TMolePerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKatal;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TMolePerSecondUnit.*(const AValue: TQuantity; const ASelf: TMolePerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKatal;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TNewtonPerCubicMeterUnit.*(const AValue: double; const ASelf: TNewtonPerCubicMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonPerCubicMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonPerCubicMeterUnit.*(const AValue: TQuantity; const ASelf: TNewtonPerCubicMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uNewtonPerCubicMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TPascalPerMeterUnit.*(const AValue: double; const ASelf: TPascalPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonPerCubicMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TPascalPerMeterUnit.*(const AValue: TQuantity; const ASelf: TPascalPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uNewtonPerCubicMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TKilogramPerSquareMeterPerSquareSecondUnit.*(const AValue: double; const ASelf: TKilogramPerSquareMeterPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonPerCubicMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerSquareMeterPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerSquareMeterPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uNewtonPerCubicMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TNewtonPerMeterUnit.*(const AValue: double; const ASelf: TNewtonPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonPerMeterUnit.*(const AValue: TQuantity; const ASelf: TNewtonPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uNewtonPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TJoulePerSquareMeterUnit.*(const AValue: double; const ASelf: TJoulePerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonPerMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TJoulePerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uNewtonPerMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TWattPerSquareMeterPerHertzUnit.*(const AValue: double; const ASelf: TWattPerSquareMeterPerHertzUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonPerMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerSquareMeterPerHertzUnit.*(const AValue: TQuantity; const ASelf: TWattPerSquareMeterPerHertzUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uNewtonPerMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TPoundForcePerInchUnit.*(const AValue: double; const ASelf: TPoundForcePerInchUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonPerMeter;
  result.FValue := AValue * 175.126835246476;
{$ELSE}
  result := AValue * 175.126835246476;
{$ENDIF}
end;

{$IFOPT D+}
class operator TPoundForcePerInchUnit.*(const AValue: TQuantity; const ASelf: TPoundForcePerInchUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uNewtonPerMeter;
  result.FValue := AValue.FValue * 175.126835246476;
end;
{$ENDIF}

class operator TKilogramPerSquareSecondUnit.*(const AValue: double; const ASelf: TKilogramPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonPerMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uNewtonPerMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TCubicMeterPerSecondUnit.*(const AValue: double; const ASelf: TCubicMeterPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCubicMeterPerSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCubicMeterPerSecondUnit.*(const AValue: TQuantity; const ASelf: TCubicMeterPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCubicMeterPerSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TPoiseuilleUnit.*(const AValue: double; const ASelf: TPoiseuilleUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uPoiseuille;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TPoiseuilleUnit.*(const AValue: TQuantity; const ASelf: TPoiseuilleUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uPoiseuille];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TPascalSecondUnit.*(const AValue: double; const ASelf: TPascalSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uPoiseuille;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TPascalSecondUnit.*(const AValue: TQuantity; const ASelf: TPascalSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uPoiseuille;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TKilogramPerMeterPerSecondUnit.*(const AValue: double; const ASelf: TKilogramPerMeterPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uPoiseuille;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerMeterPerSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerMeterPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uPoiseuille;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSquareMeterPerSecondUnit.*(const AValue: double; const ASelf: TSquareMeterPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterPerSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMeterPerSecondUnit.*(const AValue: TQuantity; const ASelf: TSquareMeterPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareMeterPerSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramPerQuarticMeterUnit.*(const AValue: double; const ASelf: TKilogramPerQuarticMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramPerQuarticMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerQuarticMeterUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerQuarticMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogramPerQuarticMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TQuarticMeterSecondUnit.*(const AValue: double; const ASelf: TQuarticMeterSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uQuarticMeterSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TQuarticMeterSecondUnit.*(const AValue: TQuantity; const ASelf: TQuarticMeterSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uQuarticMeterSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramPerQuarticMeterPerSecondUnit.*(const AValue: double; const ASelf: TKilogramPerQuarticMeterPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramPerQuarticMeterPerSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerQuarticMeterPerSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerQuarticMeterPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogramPerQuarticMeterPerSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCubicMeterPerKilogramUnit.*(const AValue: double; const ASelf: TCubicMeterPerKilogramUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCubicMeterPerKilogram;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCubicMeterPerKilogramUnit.*(const AValue: TQuantity; const ASelf: TCubicMeterPerKilogramUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCubicMeterPerKilogram];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramSquareSecondUnit.*(const AValue: double; const ASelf: TKilogramSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramSquareSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogramSquareSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCubicMeterPerSquareSecondUnit.*(const AValue: double; const ASelf: TCubicMeterPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCubicMeterPerSquareSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCubicMeterPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TCubicMeterPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCubicMeterPerSquareSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TNewtonSquareMeterUnit.*(const AValue: double; const ASelf: TNewtonSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonSquareMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TNewtonSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uNewtonSquareMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramCubicMeterPerSquareSecondUnit.*(const AValue: double; const ASelf: TKilogramCubicMeterPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonSquareMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramCubicMeterPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramCubicMeterPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uNewtonSquareMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TNewtonCubicMeterUnit.*(const AValue: double; const ASelf: TNewtonCubicMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonCubicMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonCubicMeterUnit.*(const AValue: TQuantity; const ASelf: TNewtonCubicMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uNewtonCubicMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramQuarticMeterPerSquareSecondUnit.*(const AValue: double; const ASelf: TKilogramQuarticMeterPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonCubicMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramQuarticMeterPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramQuarticMeterPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uNewtonCubicMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TNewtonPerSquareKilogramUnit.*(const AValue: double; const ASelf: TNewtonPerSquareKilogramUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonPerSquareKilogram;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonPerSquareKilogramUnit.*(const AValue: TQuantity; const ASelf: TNewtonPerSquareKilogramUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uNewtonPerSquareKilogram];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMeterPerKilogramPerSquareSecondUnit.*(const AValue: double; const ASelf: TMeterPerKilogramPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonPerSquareKilogram;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterPerKilogramPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TMeterPerKilogramPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uNewtonPerSquareKilogram;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSquareKilogramPerMeterUnit.*(const AValue: double; const ASelf: TSquareKilogramPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareKilogramPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareKilogramPerMeterUnit.*(const AValue: TQuantity; const ASelf: TSquareKilogramPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareKilogramPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareKilogramPerSquareMeterUnit.*(const AValue: double; const ASelf: TSquareKilogramPerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareKilogramPerSquareMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareKilogramPerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TSquareKilogramPerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareKilogramPerSquareMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareMeterPerSquareKilogramUnit.*(const AValue: double; const ASelf: TSquareMeterPerSquareKilogramUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterPerSquareKilogram;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMeterPerSquareKilogramUnit.*(const AValue: TQuantity; const ASelf: TSquareMeterPerSquareKilogramUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareMeterPerSquareKilogram];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TNewtonSquareMeterPerSquareKilogramUnit.*(const AValue: double; const ASelf: TNewtonSquareMeterPerSquareKilogramUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonSquareMeterPerSquareKilogram;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonSquareMeterPerSquareKilogramUnit.*(const AValue: TQuantity; const ASelf: TNewtonSquareMeterPerSquareKilogramUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uNewtonSquareMeterPerSquareKilogram];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCubicMeterPerKilogramPerSquareSecondUnit.*(const AValue: double; const ASelf: TCubicMeterPerKilogramPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonSquareMeterPerSquareKilogram;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TCubicMeterPerKilogramPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TCubicMeterPerKilogramPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uNewtonSquareMeterPerSquareKilogram;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TReciprocalKelvinUnit.*(const AValue: double; const ASelf: TReciprocalKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uReciprocalKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TReciprocalKelvinUnit.*(const AValue: TQuantity; const ASelf: TReciprocalKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uReciprocalKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramKelvinUnit.*(const AValue: double; const ASelf: TKilogramKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramKelvinUnit.*(const AValue: TQuantity; const ASelf: TKilogramKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKilogramKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TJoulePerKelvinUnit.*(const AValue: double; const ASelf: TJoulePerKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoulePerKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerKelvinUnit.*(const AValue: TQuantity; const ASelf: TJoulePerKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uJoulePerKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramSquareMeterPerSquareSecondPerKelvinUnit.*(const AValue: double; const ASelf: TKilogramSquareMeterPerSquareSecondPerKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoulePerKelvin;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramSquareMeterPerSquareSecondPerKelvinUnit.*(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerSquareSecondPerKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoulePerKelvin;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TJoulePerKilogramPerKelvinUnit.*(const AValue: double; const ASelf: TJoulePerKilogramPerKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoulePerKilogramPerKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerKilogramPerKelvinUnit.*(const AValue: TQuantity; const ASelf: TJoulePerKilogramPerKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uJoulePerKilogramPerKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareMeterPerSquareSecondPerKelvinUnit.*(const AValue: double; const ASelf: TSquareMeterPerSquareSecondPerKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoulePerKilogramPerKelvin;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMeterPerSquareSecondPerKelvinUnit.*(const AValue: TQuantity; const ASelf: TSquareMeterPerSquareSecondPerKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uJoulePerKilogramPerKelvin;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TMeterKelvinUnit.*(const AValue: double; const ASelf: TMeterKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterKelvinUnit.*(const AValue: TQuantity; const ASelf: TMeterKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeterKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKelvinPerMeterUnit.*(const AValue: double; const ASelf: TKelvinPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKelvinPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKelvinPerMeterUnit.*(const AValue: TQuantity; const ASelf: TKelvinPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKelvinPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWattPerMeterUnit.*(const AValue: double; const ASelf: TWattPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerMeterUnit.*(const AValue: TQuantity; const ASelf: TWattPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramMeterPerCubicSecondUnit.*(const AValue: double; const ASelf: TKilogramMeterPerCubicSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramMeterPerCubicSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramMeterPerCubicSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uWattPerMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TWattPerSquareMeterUnit.*(const AValue: double; const ASelf: TWattPerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerSquareMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TWattPerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerSquareMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramPerCubicSecondUnit.*(const AValue: double; const ASelf: TKilogramPerCubicSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerSquareMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerCubicSecondUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerCubicSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uWattPerSquareMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TWattPerCubicMeterUnit.*(const AValue: double; const ASelf: TWattPerCubicMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerCubicMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerCubicMeterUnit.*(const AValue: TQuantity; const ASelf: TWattPerCubicMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerCubicMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWattPerKelvinUnit.*(const AValue: double; const ASelf: TWattPerKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerKelvinUnit.*(const AValue: TQuantity; const ASelf: TWattPerKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramSquareMeterPerCubicSecondPerKelvinUnit.*(const AValue: double; const ASelf: TKilogramSquareMeterPerCubicSecondPerKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerKelvin;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramSquareMeterPerCubicSecondPerKelvinUnit.*(const AValue: TQuantity; const ASelf: TKilogramSquareMeterPerCubicSecondPerKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uWattPerKelvin;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TWattPerMeterPerKelvinUnit.*(const AValue: double; const ASelf: TWattPerMeterPerKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerMeterPerKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerMeterPerKelvinUnit.*(const AValue: TQuantity; const ASelf: TWattPerMeterPerKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerMeterPerKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramMeterPerCubicSecondPerKelvinUnit.*(const AValue: double; const ASelf: TKilogramMeterPerCubicSecondPerKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerMeterPerKelvin;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramMeterPerCubicSecondPerKelvinUnit.*(const AValue: TQuantity; const ASelf: TKilogramMeterPerCubicSecondPerKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uWattPerMeterPerKelvin;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TKelvinPerWattUnit.*(const AValue: double; const ASelf: TKelvinPerWattUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKelvinPerWatt;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKelvinPerWattUnit.*(const AValue: TQuantity; const ASelf: TKelvinPerWattUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKelvinPerWatt];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMeterPerWattUnit.*(const AValue: double; const ASelf: TMeterPerWattUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerWatt;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterPerWattUnit.*(const AValue: TQuantity; const ASelf: TMeterPerWattUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeterPerWatt];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMeterKelvinPerWattUnit.*(const AValue: double; const ASelf: TMeterKelvinPerWattUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterKelvinPerWatt;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterKelvinPerWattUnit.*(const AValue: TQuantity; const ASelf: TMeterKelvinPerWattUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeterKelvinPerWatt];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareMeterKelvinUnit.*(const AValue: double; const ASelf: TSquareMeterKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMeterKelvinUnit.*(const AValue: TQuantity; const ASelf: TSquareMeterKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareMeterKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWattPerSquareMeterPerKelvinUnit.*(const AValue: double; const ASelf: TWattPerSquareMeterPerKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerSquareMeterPerKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerSquareMeterPerKelvinUnit.*(const AValue: TQuantity; const ASelf: TWattPerSquareMeterPerKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerSquareMeterPerKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKilogramPerCubicSecondPerKelvinUnit.*(const AValue: double; const ASelf: TKilogramPerCubicSecondPerKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerSquareMeterPerKelvin;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TKilogramPerCubicSecondPerKelvinUnit.*(const AValue: TQuantity; const ASelf: TKilogramPerCubicSecondPerKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uWattPerSquareMeterPerKelvin;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TSquareMeterQuarticKelvinUnit.*(const AValue: double; const ASelf: TSquareMeterQuarticKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterQuarticKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMeterQuarticKelvinUnit.*(const AValue: TQuantity; const ASelf: TSquareMeterQuarticKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareMeterQuarticKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWattPerQuarticKelvinUnit.*(const AValue: double; const ASelf: TWattPerQuarticKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerQuarticKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerQuarticKelvinUnit.*(const AValue: TQuantity; const ASelf: TWattPerQuarticKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerQuarticKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWattPerSquareMeterPerQuarticKelvinUnit.*(const AValue: double; const ASelf: TWattPerSquareMeterPerQuarticKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerSquareMeterPerQuarticKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerSquareMeterPerQuarticKelvinUnit.*(const AValue: TQuantity; const ASelf: TWattPerSquareMeterPerQuarticKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerSquareMeterPerQuarticKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TJoulePerMoleUnit.*(const AValue: double; const ASelf: TJoulePerMoleUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoulePerMole;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerMoleUnit.*(const AValue: TQuantity; const ASelf: TJoulePerMoleUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uJoulePerMole];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMoleKelvinUnit.*(const AValue: double; const ASelf: TMoleKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMoleKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMoleKelvinUnit.*(const AValue: TQuantity; const ASelf: TMoleKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMoleKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TJoulePerMolePerKelvinUnit.*(const AValue: double; const ASelf: TJoulePerMolePerKelvinUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uJoulePerMolePerKelvin;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerMolePerKelvinUnit.*(const AValue: TQuantity; const ASelf: TJoulePerMolePerKelvinUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uJoulePerMolePerKelvin];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TOhmMeterUnit.*(const AValue: double; const ASelf: TOhmMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uOhmMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TOhmMeterUnit.*(const AValue: TQuantity; const ASelf: TOhmMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uOhmMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TVoltPerMeterUnit.*(const AValue: double; const ASelf: TVoltPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uVoltPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TVoltPerMeterUnit.*(const AValue: TQuantity; const ASelf: TVoltPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uVoltPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TNewtonPerCoulombUnit.*(const AValue: double; const ASelf: TNewtonPerCoulombUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uVoltPerMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonPerCoulombUnit.*(const AValue: TQuantity; const ASelf: TNewtonPerCoulombUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uVoltPerMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TCoulombPerMeterUnit.*(const AValue: double; const ASelf: TCoulombPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCoulombPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCoulombPerMeterUnit.*(const AValue: TQuantity; const ASelf: TCoulombPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCoulombPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareCoulombPerMeterUnit.*(const AValue: double; const ASelf: TSquareCoulombPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareCoulombPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareCoulombPerMeterUnit.*(const AValue: TQuantity; const ASelf: TSquareCoulombPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareCoulombPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCoulombPerSquareMeterUnit.*(const AValue: double; const ASelf: TCoulombPerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCoulombPerSquareMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCoulombPerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TCoulombPerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCoulombPerSquareMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareMeterPerSquareCoulombUnit.*(const AValue: double; const ASelf: TSquareMeterPerSquareCoulombUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterPerSquareCoulomb;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMeterPerSquareCoulombUnit.*(const AValue: TQuantity; const ASelf: TSquareMeterPerSquareCoulombUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareMeterPerSquareCoulomb];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TNewtonPerSquareCoulombUnit.*(const AValue: double; const ASelf: TNewtonPerSquareCoulombUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonPerSquareCoulomb;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonPerSquareCoulombUnit.*(const AValue: TQuantity; const ASelf: TNewtonPerSquareCoulombUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uNewtonPerSquareCoulomb];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TNewtonSquareMeterPerSquareCoulombUnit.*(const AValue: double; const ASelf: TNewtonSquareMeterPerSquareCoulombUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uNewtonSquareMeterPerSquareCoulomb;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonSquareMeterPerSquareCoulombUnit.*(const AValue: TQuantity; const ASelf: TNewtonSquareMeterPerSquareCoulombUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uNewtonSquareMeterPerSquareCoulomb];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TVoltMeterUnit.*(const AValue: double; const ASelf: TVoltMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uVoltMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TVoltMeterUnit.*(const AValue: TQuantity; const ASelf: TVoltMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uVoltMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TNewtonSquareMeterPerCoulombUnit.*(const AValue: double; const ASelf: TNewtonSquareMeterPerCoulombUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uVoltMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonSquareMeterPerCoulombUnit.*(const AValue: TQuantity; const ASelf: TNewtonSquareMeterPerCoulombUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uVoltMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TVoltMeterPerSecondUnit.*(const AValue: double; const ASelf: TVoltMeterPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uVoltMeterPerSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TVoltMeterPerSecondUnit.*(const AValue: TQuantity; const ASelf: TVoltMeterPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uVoltMeterPerSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TFaradPerMeterUnit.*(const AValue: double; const ASelf: TFaradPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uFaradPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TFaradPerMeterUnit.*(const AValue: TQuantity; const ASelf: TFaradPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uFaradPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TAmperePerMeterUnit.*(const AValue: double; const ASelf: TAmperePerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uAmperePerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TAmperePerMeterUnit.*(const AValue: TQuantity; const ASelf: TAmperePerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uAmperePerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMeterPerAmpereUnit.*(const AValue: double; const ASelf: TMeterPerAmpereUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterPerAmpere;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterPerAmpereUnit.*(const AValue: TQuantity; const ASelf: TMeterPerAmpereUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeterPerAmpere];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TTeslaMeterUnit.*(const AValue: double; const ASelf: TTeslaMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uTeslaMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TTeslaMeterUnit.*(const AValue: TQuantity; const ASelf: TTeslaMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uTeslaMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TNewtonPerAmpereUnit.*(const AValue: double; const ASelf: TNewtonPerAmpereUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uTeslaMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonPerAmpereUnit.*(const AValue: TQuantity; const ASelf: TNewtonPerAmpereUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uTeslaMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TTeslaPerAmpereUnit.*(const AValue: double; const ASelf: TTeslaPerAmpereUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uTeslaPerAmpere;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TTeslaPerAmpereUnit.*(const AValue: TQuantity; const ASelf: TTeslaPerAmpereUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uTeslaPerAmpere];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator THenryPerMeterUnit.*(const AValue: double; const ASelf: THenryPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uHenryPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator THenryPerMeterUnit.*(const AValue: TQuantity; const ASelf: THenryPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uHenryPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TTeslaMeterPerAmpereUnit.*(const AValue: double; const ASelf: TTeslaMeterPerAmpereUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uHenryPerMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TTeslaMeterPerAmpereUnit.*(const AValue: TQuantity; const ASelf: TTeslaMeterPerAmpereUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uHenryPerMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TNewtonPerSquareAmpereUnit.*(const AValue: double; const ASelf: TNewtonPerSquareAmpereUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uHenryPerMeter;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TNewtonPerSquareAmpereUnit.*(const AValue: TQuantity; const ASelf: TNewtonPerSquareAmpereUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uHenryPerMeter;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TRadianPerMeterUnit.*(const AValue: double; const ASelf: TRadianPerMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uRadianPerMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TRadianPerMeterUnit.*(const AValue: TQuantity; const ASelf: TRadianPerMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uRadianPerMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareKilogramPerSquareSecondUnit.*(const AValue: double; const ASelf: TSquareKilogramPerSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareKilogramPerSquareSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareKilogramPerSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TSquareKilogramPerSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareKilogramPerSquareSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareSecondPerSquareMeterUnit.*(const AValue: double; const ASelf: TSquareSecondPerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareSecondPerSquareMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareSecondPerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TSquareSecondPerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareSecondPerSquareMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareJouleUnit.*(const AValue: double; const ASelf: TSquareJouleUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareJoule;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareJouleUnit.*(const AValue: TQuantity; const ASelf: TSquareJouleUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareJoule];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TJouleSecondUnit.*(const AValue: double; const ASelf: TJouleSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramSquareMeterPerSecond;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TJouleSecondUnit.*(const AValue: TQuantity; const ASelf: TJouleSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogramSquareMeterPerSecond;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TJoulePerHertzUnit.*(const AValue: double; const ASelf: TJoulePerHertzUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramSquareMeterPerSecond;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerHertzUnit.*(const AValue: TQuantity; const ASelf: TJoulePerHertzUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogramSquareMeterPerSecond;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TElectronvoltSecondUnit.*(const AValue: double; const ASelf: TElectronvoltSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramSquareMeterPerSecond;
  result.FValue := AValue * 1.60217742320523E-019;
{$ELSE}
  result := AValue * 1.60217742320523E-019;
{$ENDIF}
end;

{$IFOPT D+}
class operator TElectronvoltSecondUnit.*(const AValue: TQuantity; const ASelf: TElectronvoltSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogramSquareMeterPerSecond;
  result.FValue := AValue.FValue * 1.60217742320523E-019;
end;
{$ENDIF}

class operator TElectronvoltMeterPerSpeedOfLightUnit.*(const AValue: double; const ASelf: TElectronvoltMeterPerSpeedOfLightUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKilogramSquareMeterPerSecond;
  result.FValue := AValue * 1.7826619216279E-36;
{$ELSE}
  result := AValue * 1.7826619216279E-36;
{$ENDIF}
end;

{$IFOPT D+}
class operator TElectronvoltMeterPerSpeedOfLightUnit.*(const AValue: TQuantity; const ASelf: TElectronvoltMeterPerSpeedOfLightUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uKilogramSquareMeterPerSecond;
  result.FValue := AValue.FValue * 1.7826619216279E-36;
end;
{$ENDIF}

class operator TSquareJouleSquareSecondUnit.*(const AValue: double; const ASelf: TSquareJouleSquareSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareJouleSquareSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareJouleSquareSecondUnit.*(const AValue: TQuantity; const ASelf: TSquareJouleSquareSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareJouleSquareSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCoulombPerKilogramUnit.*(const AValue: double; const ASelf: TCoulombPerKilogramUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCoulombPerKilogram;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCoulombPerKilogramUnit.*(const AValue: TQuantity; const ASelf: TCoulombPerKilogramUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCoulombPerKilogram];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareMeterAmpereUnit.*(const AValue: double; const ASelf: TSquareMeterAmpereUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterAmpere;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMeterAmpereUnit.*(const AValue: TQuantity; const ASelf: TSquareMeterAmpereUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareMeterAmpere];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TJoulePerTeslaUnit.*(const AValue: double; const ASelf: TJoulePerTeslaUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterAmpere;
  result.FValue := AValue;
{$ELSE}
  result := AValue;
{$ENDIF}
end;

{$IFOPT D+}
class operator TJoulePerTeslaUnit.*(const AValue: TQuantity; const ASelf: TJoulePerTeslaUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := uSquareMeterAmpere;
  result.FValue := AValue.FValue;
end;
{$ENDIF}

class operator TLumenPerWattUnit.*(const AValue: double; const ASelf: TLumenPerWattUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uLumenPerWatt;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TLumenPerWattUnit.*(const AValue: TQuantity; const ASelf: TLumenPerWattUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uLumenPerWatt];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TReciprocalMoleUnit.*(const AValue: double; const ASelf: TReciprocalMoleUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uReciprocalMole;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TReciprocalMoleUnit.*(const AValue: TQuantity; const ASelf: TReciprocalMoleUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uReciprocalMole];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TAmperePerSquareMeterUnit.*(const AValue: double; const ASelf: TAmperePerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uAmperePerSquareMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TAmperePerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TAmperePerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uAmperePerSquareMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMolePerCubicMeterUnit.*(const AValue: double; const ASelf: TMolePerCubicMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMolePerCubicMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMolePerCubicMeterUnit.*(const AValue: TQuantity; const ASelf: TMolePerCubicMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMolePerCubicMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCandelaPerSquareMeterUnit.*(const AValue: double; const ASelf: TCandelaPerSquareMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCandelaPerSquareMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCandelaPerSquareMeterUnit.*(const AValue: TQuantity; const ASelf: TCandelaPerSquareMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCandelaPerSquareMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCoulombPerCubicMeterUnit.*(const AValue: double; const ASelf: TCoulombPerCubicMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCoulombPerCubicMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCoulombPerCubicMeterUnit.*(const AValue: TQuantity; const ASelf: TCoulombPerCubicMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCoulombPerCubicMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TGrayPerSecondUnit.*(const AValue: double; const ASelf: TGrayPerSecondUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uGrayPerSecond;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TGrayPerSecondUnit.*(const AValue: TQuantity; const ASelf: TGrayPerSecondUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uGrayPerSecond];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSteradianHertzUnit.*(const AValue: double; const ASelf: TSteradianHertzUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSteradianHertz;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSteradianHertzUnit.*(const AValue: TQuantity; const ASelf: TSteradianHertzUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSteradianHertz];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TMeterSteradianUnit.*(const AValue: double; const ASelf: TMeterSteradianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uMeterSteradian;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TMeterSteradianUnit.*(const AValue: TQuantity; const ASelf: TMeterSteradianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uMeterSteradian];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareMeterSteradianUnit.*(const AValue: double; const ASelf: TSquareMeterSteradianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterSteradian;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMeterSteradianUnit.*(const AValue: TQuantity; const ASelf: TSquareMeterSteradianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareMeterSteradian];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCubicMeterSteradianUnit.*(const AValue: double; const ASelf: TCubicMeterSteradianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCubicMeterSteradian;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCubicMeterSteradianUnit.*(const AValue: TQuantity; const ASelf: TCubicMeterSteradianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCubicMeterSteradian];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TSquareMeterSteradianHertzUnit.*(const AValue: double; const ASelf: TSquareMeterSteradianHertzUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uSquareMeterSteradianHertz;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TSquareMeterSteradianHertzUnit.*(const AValue: TQuantity; const ASelf: TSquareMeterSteradianHertzUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uSquareMeterSteradianHertz];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWattPerSteradianUnit.*(const AValue: double; const ASelf: TWattPerSteradianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerSteradian;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerSteradianUnit.*(const AValue: TQuantity; const ASelf: TWattPerSteradianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerSteradian];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWattPerSteradianPerHertzUnit.*(const AValue: double; const ASelf: TWattPerSteradianPerHertzUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerSteradianPerHertz;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerSteradianPerHertzUnit.*(const AValue: TQuantity; const ASelf: TWattPerSteradianPerHertzUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerSteradianPerHertz];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWattPerMeterPerSteradianUnit.*(const AValue: double; const ASelf: TWattPerMeterPerSteradianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerMeterPerSteradian;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerMeterPerSteradianUnit.*(const AValue: TQuantity; const ASelf: TWattPerMeterPerSteradianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerMeterPerSteradian];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWattPerSquareMeterPerSteradianUnit.*(const AValue: double; const ASelf: TWattPerSquareMeterPerSteradianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerSquareMeterPerSteradian;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerSquareMeterPerSteradianUnit.*(const AValue: TQuantity; const ASelf: TWattPerSquareMeterPerSteradianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerSquareMeterPerSteradian];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWattPerCubicMeterPerSteradianUnit.*(const AValue: double; const ASelf: TWattPerCubicMeterPerSteradianUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerCubicMeterPerSteradian;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerCubicMeterPerSteradianUnit.*(const AValue: TQuantity; const ASelf: TWattPerCubicMeterPerSteradianUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerCubicMeterPerSteradian];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TWattPerSquareMeterPerSteradianPerHertzUnit.*(const AValue: double; const ASelf: TWattPerSquareMeterPerSteradianPerHertzUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uWattPerSquareMeterPerSteradianPerHertz;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TWattPerSquareMeterPerSteradianPerHertzUnit.*(const AValue: TQuantity; const ASelf: TWattPerSquareMeterPerSteradianPerHertzUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uWattPerSquareMeterPerSteradianPerHertz];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TKatalPerCubicMeterUnit.*(const AValue: double; const ASelf: TKatalPerCubicMeterUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uKatalPerCubicMeter;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TKatalPerCubicMeterUnit.*(const AValue: TQuantity; const ASelf: TKatalPerCubicMeterUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uKatalPerCubicMeter];
  result.FValue := AValue.FValue
end;
{$ENDIF}

class operator TCoulombPerMoleUnit.*(const AValue: double; const ASelf: TCoulombPerMoleUnit): TQuantity; inline;
begin
{$IFOPT D+}
  result.FUnitOfMeasurement := uCoulombPerMole;
  result.FValue := AValue
{$ELSE}
  result := AValue
{$ENDIF}
end;

{$IFOPT D+}
class operator TCoulombPerMoleUnit.*(const AValue: TQuantity; const ASelf: TCoulombPerMoleUnit): TQuantity; inline;
begin
  result.FUnitOfMeasurement := MulTable[AValue.FUnitOfMeasurement, uCoulombPerMole];
  result.FValue := AValue.FValue
end;
{$ENDIF}

function SecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSecondSymbol, cSecondPrefixes);
end;

function SecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSecondSymbol, cSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSecondSymbol, APrefixes);
end;

function SecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function DayToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function DayVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function DayToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function HourToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function HourVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function HourToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MinuteToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MinuteVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MinuteToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareSecondSymbol, cSquareSecondPrefixes);
end;

function SquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareSecondSymbol, cSquareSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareSecondSymbol, APrefixes);
end;

function SquareSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareDayToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareDayVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareDayToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareHourToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareHourVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareHourToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMinuteToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMinuteVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMinuteToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CubicSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCubicSecondSymbol, cCubicSecondPrefixes);
end;

function CubicSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicSecondSymbol, cCubicSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicSecondSymbol, APrefixes);
end;

function CubicSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function QuarticSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsQuarticSecondSymbol, cQuarticSecondPrefixes);
end;

function QuarticSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsQuarticSecondSymbol, cQuarticSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsQuarticSecondSymbol, APrefixes);
end;

function QuarticSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function QuarticSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function QuinticSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuinticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsQuinticSecondSymbol, cQuinticSecondPrefixes);
end;

function QuinticSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuinticSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsQuinticSecondSymbol, cQuinticSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsQuinticSecondSymbol, APrefixes);
end;

function QuinticSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuinticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function QuinticSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuinticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SexticSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSexticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSexticSecondSymbol, cSexticSecondPrefixes);
end;

function SexticSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSexticSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSexticSecondSymbol, cSexticSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSexticSecondSymbol, APrefixes);
end;

function SexticSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSexticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SexticSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSexticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterSymbol, cMeterPrefixes);
end;

function MeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterSymbol, cMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterSymbol, APrefixes);
end;

function MeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function AstronomicalToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function AstronomicalVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function AstronomicalToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function InchToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function InchVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function InchToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function FootToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function FootVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function FootToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function YardToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function YardVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function YardToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MileToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MileVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MileToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NauticalMileToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NauticalMileVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NauticalMileToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function AngstromToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function AngstromVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function AngstromToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareRootMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareRootMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareRootMeterSymbol, cSquareRootMeterPrefixes);
end;

function SquareRootMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareRootMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareRootMeterSymbol, cSquareRootMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareRootMeterSymbol, APrefixes);
end;

function SquareRootMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareRootMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareRootMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareRootMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareMeterSymbol, cSquareMeterPrefixes);
end;

function SquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterSymbol, cSquareMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterSymbol, APrefixes);
end;

function SquareMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareInchToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareInchVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareInchToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareFootToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareFootVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareFootToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareYardToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareYardVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareYardToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMileToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMileVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMileToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CubicMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCubicMeterSymbol, cCubicMeterPrefixes);
end;

function CubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicMeterSymbol, cCubicMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicMeterSymbol, APrefixes);
end;

function CubicMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CubicInchToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicInchVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicInchToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CubicFootToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicFootVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicFootToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CubicYardToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicYardVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicYardToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function LitreToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function LitreVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function LitreToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function GallonToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function GallonVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function GallonToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function QuarticMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsQuarticMeterSymbol, cQuarticMeterPrefixes);
end;

function QuarticMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsQuarticMeterSymbol, cQuarticMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsQuarticMeterSymbol, APrefixes);
end;

function QuarticMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function QuarticMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function QuinticMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuinticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsQuinticMeterSymbol, cQuinticMeterPrefixes);
end;

function QuinticMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuinticMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsQuinticMeterSymbol, cQuinticMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsQuinticMeterSymbol, APrefixes);
end;

function QuinticMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuinticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function QuinticMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuinticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SexticMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSexticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSexticMeterSymbol, cSexticMeterPrefixes);
end;

function SexticMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSexticMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSexticMeterSymbol, cSexticMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSexticMeterSymbol, APrefixes);
end;

function SexticMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSexticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SexticMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSexticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramSymbol, cKilogramPrefixes);
end;

function KilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramSymbol, cKilogramPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramSymbol, APrefixes);
end;

function KilogramToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function TonneToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function TonneVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function TonneToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function PoundToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoundVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoundToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function OunceToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function OunceVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function OunceToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function StoneToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function StoneVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function StoneToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function TonToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function TonVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function TonToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ElectronvoltPerSquareSpeedOfLightToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ElectronvoltPerSquareSpeedOfLightVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ElectronvoltPerSquareSpeedOfLightToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareKilogramToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareKilogramSymbol, cSquareKilogramPrefixes);
end;

function SquareKilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareKilogramSymbol, cSquareKilogramPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareKilogramSymbol, APrefixes);
end;

function SquareKilogramToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareKilogramToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function AmpereToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsAmpereSymbol, cAmperePrefixes);
end;

function AmpereToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uAmpere then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsAmpereSymbol, cAmperePrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsAmpereSymbol, APrefixes);
end;

function AmpereToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function AmpereToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareAmpereToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareAmpereSymbol, cSquareAmperePrefixes);
end;

function SquareAmpereToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareAmpere then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareAmpereSymbol, cSquareAmperePrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareAmpereSymbol, APrefixes);
end;

function SquareAmpereToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareAmpereToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKelvinSymbol, cKelvinPrefixes);
end;

function KelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKelvinSymbol, cKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKelvinSymbol, APrefixes);
end;

function KelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function DegreeCelsiusToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function DegreeCelsiusVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function DegreeCelsiusToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function DegreeFahrenheitToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function DegreeFahrenheitVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function DegreeFahrenheitToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareKelvinSymbol, cSquareKelvinPrefixes);
end;

function SquareKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareKelvinSymbol, cSquareKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareKelvinSymbol, APrefixes);
end;

function SquareKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CubicKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCubicKelvinSymbol, cCubicKelvinPrefixes);
end;

function CubicKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicKelvinSymbol, cCubicKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicKelvinSymbol, APrefixes);
end;

function CubicKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function QuarticKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsQuarticKelvinSymbol, cQuarticKelvinPrefixes);
end;

function QuarticKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsQuarticKelvinSymbol, cQuarticKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsQuarticKelvinSymbol, APrefixes);
end;

function QuarticKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function QuarticKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MoleToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMole then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMoleSymbol, cMolePrefixes);
end;

function MoleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMole then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMoleSymbol, cMolePrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMoleSymbol, APrefixes);
end;

function MoleToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMole then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MoleToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMole then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CandelaToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCandela then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCandelaSymbol, cCandelaPrefixes);
end;

function CandelaToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCandela then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCandelaSymbol, cCandelaPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCandelaSymbol, APrefixes);
end;

function CandelaToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCandela then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CandelaToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCandela then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function RadianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsRadianSymbol, cRadianPrefixes);
end;

function RadianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uRadian then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsRadianSymbol, cRadianPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsRadianSymbol, APrefixes);
end;

function RadianToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function RadianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function DegreeToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function DegreeVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function DegreeToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SteradianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSteradianSymbol, cSteradianPrefixes);
end;

function SteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradian then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSteradianSymbol, cSteradianPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSteradianSymbol, APrefixes);
end;

function SteradianToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SteradianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareDegreeToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareDegreeVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareDegreeToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function HertzToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsHertzSymbol, cHertzPrefixes);
end;

function HertzToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsHertzSymbol, cHertzPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsHertzSymbol, APrefixes);
end;

function HertzToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function HertzToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ReciprocalSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function RadianPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function RadianPerSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function RadianPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareHertzToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareHertzSymbol, cSquareHertzPrefixes);
end;

function SquareHertzToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareHertz then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareHertzSymbol, cSquareHertzPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareHertzSymbol, APrefixes);
end;

function SquareHertzToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareHertzToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ReciprocalSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function RadianPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function RadianPerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function RadianPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SteradianPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradianPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSteradianPerSquareSecondSymbol, cSteradianPerSquareSecondPrefixes);
end;

function SteradianPerSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradianPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSteradianPerSquareSecondSymbol, cSteradianPerSquareSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSteradianPerSquareSecondSymbol, APrefixes);
end;

function SteradianPerSquareSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradianPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SteradianPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradianPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterPerSecondSymbol, cMeterPerSecondPrefixes);
end;

function MeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerSecondSymbol, cMeterPerSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerSecondSymbol, APrefixes);
end;

function MeterPerSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterPerHourToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerHourVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerHourToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MilePerHourToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MilePerHourVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MilePerHourToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NauticalMilePerHourToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NauticalMilePerHourVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NauticalMilePerHourToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterPerSquareSecondSymbol, cMeterPerSquareSecondPrefixes);
end;

function MeterPerSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerSquareSecondSymbol, cMeterPerSquareSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerSquareSecondSymbol, APrefixes);
end;

function MeterPerSquareSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterPerSecondPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerSecondPerSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerSecondPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterPerHourPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerHourPerSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerHourPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterPerCubicSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerCubicSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterPerCubicSecondSymbol, cMeterPerCubicSecondPrefixes);
end;

function MeterPerCubicSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerCubicSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerCubicSecondSymbol, cMeterPerCubicSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerCubicSecondSymbol, APrefixes);
end;

function MeterPerCubicSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerCubicSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerCubicSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerCubicSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterPerQuarticSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerQuarticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterPerQuarticSecondSymbol, cMeterPerQuarticSecondPrefixes);
end;

function MeterPerQuarticSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerQuarticSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerQuarticSecondSymbol, cMeterPerQuarticSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerQuarticSecondSymbol, APrefixes);
end;

function MeterPerQuarticSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerQuarticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerQuarticSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerQuarticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterPerQuinticSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerQuinticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterPerQuinticSecondSymbol, cMeterPerQuinticSecondPrefixes);
end;

function MeterPerQuinticSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerQuinticSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerQuinticSecondSymbol, cMeterPerQuinticSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerQuinticSecondSymbol, APrefixes);
end;

function MeterPerQuinticSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerQuinticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerQuinticSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerQuinticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterPerSexticSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSexticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterPerSexticSecondSymbol, cMeterPerSexticSecondPrefixes);
end;

function MeterPerSexticSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSexticSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerSexticSecondSymbol, cMeterPerSexticSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerSexticSecondSymbol, APrefixes);
end;

function MeterPerSexticSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSexticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerSexticSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerSexticSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMeterPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareMeterPerSquareSecondSymbol, cSquareMeterPerSquareSecondPrefixes);
end;

function SquareMeterPerSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterPerSquareSecondSymbol, cSquareMeterPerSquareSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterPerSquareSecondSymbol, APrefixes);
end;

function SquareMeterPerSquareSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerKilogramToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerKilogramVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerKilogramToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function GrayToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function GrayVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function GrayToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SievertToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SievertVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SievertToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterSecondSymbol, cMeterSecondPrefixes);
end;

function MeterSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterSecondSymbol, cMeterSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterSecondSymbol, APrefixes);
end;

function MeterSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramMeterSymbol, cKilogramMeterPrefixes);
end;

function KilogramMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramMeterSymbol, cKilogramMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramMeterSymbol, APrefixes);
end;

function KilogramMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramPerSecondSymbol, cKilogramPerSecondPrefixes);
end;

function KilogramPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramPerSecondSymbol, cKilogramPerSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramPerSecondSymbol, APrefixes);
end;

function KilogramPerSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerSquareMeterPerHertzToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerSquareMeterPerHertzVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerSquareMeterPerHertzToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramMeterPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramMeterPerSecondSymbol, cKilogramMeterPerSecondPrefixes);
end;

function KilogramMeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramMeterPerSecondSymbol, cKilogramMeterPerSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramMeterPerSecondSymbol, APrefixes);
end;

function KilogramMeterPerSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramMeterPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareKilogramSquareMeterPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareKilogramSquareMeterPerSquareSecondSymbol, cSquareKilogramSquareMeterPerSquareSecondPrefixes);
end;

function SquareKilogramSquareMeterPerSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareKilogramSquareMeterPerSquareSecondSymbol, cSquareKilogramSquareMeterPerSquareSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareKilogramSquareMeterPerSquareSecondSymbol, APrefixes);
end;

function SquareKilogramSquareMeterPerSquareSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareKilogramSquareMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramSquareMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ReciprocalSquareRootMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalSquareRootMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsReciprocalSquareRootMeterSymbol, cReciprocalSquareRootMeterPrefixes);
end;

function ReciprocalSquareRootMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalSquareRootMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalSquareRootMeterSymbol, cReciprocalSquareRootMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalSquareRootMeterSymbol, APrefixes);
end;

function ReciprocalSquareRootMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalSquareRootMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalSquareRootMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalSquareRootMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ReciprocalMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsReciprocalMeterSymbol, cReciprocalMeterPrefixes);
end;

function ReciprocalMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalMeterSymbol, cReciprocalMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalMeterSymbol, APrefixes);
end;

function ReciprocalMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function DioptreToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function DioptreVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function DioptreToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ReciprocalSquareRootCubicMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalSquareRootCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsReciprocalSquareRootCubicMeterSymbol, cReciprocalSquareRootCubicMeterPrefixes);
end;

function ReciprocalSquareRootCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalSquareRootCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalSquareRootCubicMeterSymbol, cReciprocalSquareRootCubicMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalSquareRootCubicMeterSymbol, APrefixes);
end;

function ReciprocalSquareRootCubicMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalSquareRootCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalSquareRootCubicMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalSquareRootCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ReciprocalSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsReciprocalSquareMeterSymbol, cReciprocalSquareMeterPrefixes);
end;

function ReciprocalSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalSquareMeterSymbol, cReciprocalSquareMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalSquareMeterSymbol, APrefixes);
end;

function ReciprocalSquareMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ReciprocalCubicMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsReciprocalCubicMeterSymbol, cReciprocalCubicMeterPrefixes);
end;

function ReciprocalCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalCubicMeterSymbol, cReciprocalCubicMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalCubicMeterSymbol, APrefixes);
end;

function ReciprocalCubicMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalCubicMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ReciprocalQuarticMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalQuarticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsReciprocalQuarticMeterSymbol, cReciprocalQuarticMeterPrefixes);
end;

function ReciprocalQuarticMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalQuarticMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalQuarticMeterSymbol, cReciprocalQuarticMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalQuarticMeterSymbol, APrefixes);
end;

function ReciprocalQuarticMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalQuarticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalQuarticMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalQuarticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramSquareMeterSymbol, cKilogramSquareMeterPrefixes);
end;

function KilogramSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramSquareMeterSymbol, cKilogramSquareMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramSquareMeterSymbol, APrefixes);
end;

function KilogramSquareMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramSquareMeterPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramSquareMeterPerSecondSymbol, cKilogramSquareMeterPerSecondPrefixes);
end;

function KilogramSquareMeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramSquareMeterPerSecondSymbol, cKilogramSquareMeterPerSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramSquareMeterPerSecondSymbol, APrefixes);
end;

function KilogramSquareMeterPerSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonMeterSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonMeterSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonMeterSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SecondPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecondPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSecondPerMeterSymbol, cSecondPerMeterPrefixes);
end;

function SecondPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecondPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSecondPerMeterSymbol, cSecondPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSecondPerMeterSymbol, APrefixes);
end;

function SecondPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecondPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SecondPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSecondPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramPerMeterSymbol, cKilogramPerMeterPrefixes);
end;

function KilogramPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramPerMeterSymbol, cKilogramPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramPerMeterSymbol, APrefixes);
end;

function KilogramPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramPerSquareMeterSymbol, cKilogramPerSquareMeterPrefixes);
end;

function KilogramPerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramPerSquareMeterSymbol, cKilogramPerSquareMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramPerSquareMeterSymbol, APrefixes);
end;

function KilogramPerSquareMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerCubicMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramPerCubicMeterSymbol, cKilogramPerCubicMeterPrefixes);
end;

function KilogramPerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramPerCubicMeterSymbol, cKilogramPerCubicMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramPerCubicMeterSymbol, APrefixes);
end;

function KilogramPerCubicMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerCubicMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function PoundPerCubicInchToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoundPerCubicInchVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoundPerCubicInchToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsNewtonSymbol, cNewtonPrefixes);
end;

function NewtonToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewton then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonSymbol, cNewtonPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonSymbol, APrefixes);
end;

function NewtonToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function PoundForceToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoundForceVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoundForceToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramMeterPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramMeterPerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonRadianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsNewtonRadianSymbol, cNewtonRadianPrefixes);
end;

function NewtonRadianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonRadian then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonRadianSymbol, cNewtonRadianPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonRadianSymbol, APrefixes);
end;

function NewtonRadianToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonRadianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareNewtonToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareNewtonSymbol, cSquareNewtonPrefixes);
end;

function SquareNewtonToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareNewton then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareNewtonSymbol, cSquareNewtonPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareNewtonSymbol, APrefixes);
end;

function SquareNewtonToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareNewtonToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareKilogramSquareMeterPerQuarticSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareKilogramSquareMeterPerQuarticSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareKilogramSquareMeterPerQuarticSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareNewton then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function PascalToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsPascalSymbol, cPascalPrefixes);
end;

function PascalToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsPascalSymbol, cPascalPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsPascalSymbol, APrefixes);
end;

function PascalToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PascalToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonPerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonPerSquareMeterVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonPerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function BarToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function BarVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function BarToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function PoundPerSquareInchToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoundPerSquareInchVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoundPerSquareInchToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerCubicMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerCubicMeterVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerCubicMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerMeterPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerMeterPerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPascal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JouleToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsJouleSymbol, cJoulePrefixes);
end;

function JouleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsJouleSymbol, cJoulePrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsJouleSymbol, APrefixes);
end;

function JouleToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JouleToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattHourToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattHourVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattHourToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerHertzToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerHertzVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerHertzToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ElectronvoltToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ElectronvoltVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ElectronvoltToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonMeterVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function PoundForceInchToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoundForceInchVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoundForceInchToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function RydbergToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function RydbergVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function RydbergToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CalorieToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CalorieVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CalorieToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramSquareMeterPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerRadianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsJoulePerRadianSymbol, cJoulePerRadianPrefixes);
end;

function JoulePerRadianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsJoulePerRadianSymbol, cJoulePerRadianPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsJoulePerRadianSymbol, APrefixes);
end;

function JoulePerRadianToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerRadianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerDegreeToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerDegreeVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerDegreeToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonMeterPerRadianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonMeterPerRadianVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonMeterPerRadianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonMeterPerDegreeToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonMeterPerDegreeVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonMeterPerDegreeToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramSquareMeterPerSquareSecondPerRadianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerSquareSecondPerRadianVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerSquareSecondPerRadianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerRadian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattSymbol, cWattPrefixes);
end;

function WattToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWatt then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattSymbol, cWattPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattSymbol, APrefixes);
end;

function WattToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramSquareMeterPerCubicSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerCubicSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerCubicSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CoulombToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCoulombSymbol, cCoulombPrefixes);
end;

function CoulombToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulomb then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombSymbol, cCoulombPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombSymbol, APrefixes);
end;

function CoulombToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CoulombToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function AmpereHourToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function AmpereHourVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function AmpereHourToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function AmpereSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function AmpereSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function AmpereSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareCoulombToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareCoulombSymbol, cSquareCoulombPrefixes);
end;

function SquareCoulombToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareCoulombSymbol, cSquareCoulombPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareCoulombSymbol, APrefixes);
end;

function SquareCoulombToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareCoulombToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareAmpereSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareAmpereSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareAmpereSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CoulombMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCoulombMeterSymbol, cCoulombMeterPrefixes);
end;

function CoulombMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombMeterSymbol, cCoulombMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombMeterSymbol, APrefixes);
end;

function CoulombMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CoulombMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function VoltToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsVoltSymbol, cVoltPrefixes);
end;

function VoltToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVolt then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsVoltSymbol, cVoltPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsVoltSymbol, APrefixes);
end;

function VoltToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function VoltToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerCoulombToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerCoulombVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerCoulombToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramSquareMeterPerAmperePerCubicSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerAmperePerCubicSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerAmperePerCubicSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareVoltToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareVoltSymbol, cSquareVoltPrefixes);
end;

function SquareVoltToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareVolt then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareVoltSymbol, cSquareVoltPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareVoltSymbol, APrefixes);
end;

function SquareVoltToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareVoltToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareKilogramQuarticMeterPerSquareAmperePerSexticSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareKilogramQuarticMeterPerSquareAmperePerSexticSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareKilogramQuarticMeterPerSquareAmperePerSexticSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareVolt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function FaradToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFarad then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsFaradSymbol, cFaradPrefixes);
end;

function FaradToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFarad then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsFaradSymbol, cFaradPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsFaradSymbol, APrefixes);
end;

function FaradToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFarad then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function FaradToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFarad then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CoulombPerVoltToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFarad then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CoulombPerVoltVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFarad then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CoulombPerVoltToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFarad then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareAmpereQuarticSecondPerKilogramPerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFarad then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareAmpereQuarticSecondPerKilogramPerSquareMeterVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFarad then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareAmpereQuarticSecondPerKilogramPerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFarad then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function OhmToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uOhm then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsOhmSymbol, cOhmPrefixes);
end;

function OhmToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uOhm then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsOhmSymbol, cOhmPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsOhmSymbol, APrefixes);
end;

function OhmToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uOhm then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function OhmToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uOhm then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramSquareMeterPerSquareAmperePerCubicSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uOhm then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerSquareAmperePerCubicSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uOhm then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerSquareAmperePerCubicSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uOhm then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SiemensToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSiemens then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSiemensSymbol, cSiemensPrefixes);
end;

function SiemensToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSiemens then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSiemensSymbol, cSiemensPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSiemensSymbol, APrefixes);
end;

function SiemensToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSiemens then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SiemensToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSiemens then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareAmpereCubicSecondPerKilogramPerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSiemens then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareAmpereCubicSecondPerKilogramPerSquareMeterVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSiemens then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareAmpereCubicSecondPerKilogramPerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSiemens then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SiemensPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSiemensPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSiemensPerMeterSymbol, cSiemensPerMeterPrefixes);
end;

function SiemensPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSiemensPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSiemensPerMeterSymbol, cSiemensPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSiemensPerMeterSymbol, APrefixes);
end;

function SiemensPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSiemensPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SiemensPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSiemensPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function TeslaToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTesla then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsTeslaSymbol, cTeslaPrefixes);
end;

function TeslaToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTesla then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsTeslaSymbol, cTeslaPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsTeslaSymbol, APrefixes);
end;

function TeslaToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTesla then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function TeslaToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTesla then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WeberPerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTesla then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WeberPerSquareMeterVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTesla then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WeberPerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTesla then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerAmperePerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTesla then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerAmperePerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTesla then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerAmperePerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTesla then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WeberToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWeber then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWeberSymbol, cWeberPrefixes);
end;

function WeberToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWeber then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWeberSymbol, cWeberPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWeberSymbol, APrefixes);
end;

function WeberToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWeber then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WeberToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWeber then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramSquareMeterPerAmperePerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWeber then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerAmperePerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWeber then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerAmperePerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWeber then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function HenryToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenry then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsHenrySymbol, cHenryPrefixes);
end;

function HenryToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenry then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsHenrySymbol, cHenryPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsHenrySymbol, APrefixes);
end;

function HenryToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenry then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function HenryToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenry then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramSquareMeterPerSquareAmperePerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenry then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerSquareAmperePerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenry then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerSquareAmperePerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenry then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ReciprocalHenryToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalHenry then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsReciprocalHenrySymbol, cReciprocalHenryPrefixes);
end;

function ReciprocalHenryToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalHenry then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalHenrySymbol, cReciprocalHenryPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalHenrySymbol, APrefixes);
end;

function ReciprocalHenryToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalHenry then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalHenryToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalHenry then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function LumenToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumen then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsLumenSymbol, cLumenPrefixes);
end;

function LumenToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumen then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsLumenSymbol, cLumenPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsLumenSymbol, APrefixes);
end;

function LumenToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumen then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function LumenToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumen then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CandelaSteradianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumen then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CandelaSteradianVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumen then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CandelaSteradianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumen then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function LumenSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumenSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsLumenSecondSymbol, cLumenSecondPrefixes);
end;

function LumenSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumenSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsLumenSecondSymbol, cLumenSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsLumenSecondSymbol, APrefixes);
end;

function LumenSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumenSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function LumenSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumenSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function LumenSecondPerCubicMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumenSecondPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsLumenSecondPerCubicMeterSymbol, cLumenSecondPerCubicMeterPrefixes);
end;

function LumenSecondPerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumenSecondPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsLumenSecondPerCubicMeterSymbol, cLumenSecondPerCubicMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsLumenSecondPerCubicMeterSymbol, APrefixes);
end;

function LumenSecondPerCubicMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumenSecondPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function LumenSecondPerCubicMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumenSecondPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function LuxToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLux then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsLuxSymbol, cLuxPrefixes);
end;

function LuxToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLux then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsLuxSymbol, cLuxPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsLuxSymbol, APrefixes);
end;

function LuxToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLux then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function LuxToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLux then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CandelaSteradianPerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLux then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CandelaSteradianPerSquareMeterVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLux then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CandelaSteradianPerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLux then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function LuxSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLuxSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsLuxSecondSymbol, cLuxSecondPrefixes);
end;

function LuxSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLuxSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsLuxSecondSymbol, cLuxSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsLuxSecondSymbol, APrefixes);
end;

function LuxSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLuxSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function LuxSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLuxSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function BequerelToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function BequerelVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function BequerelToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KatalToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKatal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKatalSymbol, cKatalPrefixes);
end;

function KatalToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKatal then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKatalSymbol, cKatalPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKatalSymbol, APrefixes);
end;

function KatalToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKatal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KatalToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKatal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MolePerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKatal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MolePerSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKatal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MolePerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKatal then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonPerCubicMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsNewtonPerCubicMeterSymbol, cNewtonPerCubicMeterPrefixes);
end;

function NewtonPerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonPerCubicMeterSymbol, cNewtonPerCubicMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonPerCubicMeterSymbol, APrefixes);
end;

function NewtonPerCubicMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonPerCubicMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function PascalPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PascalPerMeterVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PascalPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerSquareMeterPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerSquareMeterPerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerSquareMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsNewtonPerMeterSymbol, cNewtonPerMeterPrefixes);
end;

function NewtonPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonPerMeterSymbol, cNewtonPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonPerMeterSymbol, APrefixes);
end;

function NewtonPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerSquareMeterVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerSquareMeterPerHertzToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerSquareMeterPerHertzVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerSquareMeterPerHertzToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function PoundForcePerInchToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoundForcePerInchVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoundForcePerInchToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CubicMeterPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCubicMeterPerSecondSymbol, cCubicMeterPerSecondPrefixes);
end;

function CubicMeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicMeterPerSecondSymbol, cCubicMeterPerSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicMeterPerSecondSymbol, APrefixes);
end;

function CubicMeterPerSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicMeterPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function PoiseuilleToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPoiseuille then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsPoiseuilleSymbol, cPoiseuillePrefixes);
end;

function PoiseuilleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPoiseuille then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsPoiseuilleSymbol, cPoiseuillePrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsPoiseuilleSymbol, APrefixes);
end;

function PoiseuilleToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPoiseuille then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PoiseuilleToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPoiseuille then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function PascalSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPoiseuille then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PascalSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPoiseuille then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function PascalSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPoiseuille then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerMeterPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPoiseuille then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerMeterPerSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPoiseuille then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerMeterPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uPoiseuille then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMeterPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareMeterPerSecondSymbol, cSquareMeterPerSecondPrefixes);
end;

function SquareMeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterPerSecondSymbol, cSquareMeterPerSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterPerSecondSymbol, APrefixes);
end;

function SquareMeterPerSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMeterPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerQuarticMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerQuarticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramPerQuarticMeterSymbol, cKilogramPerQuarticMeterPrefixes);
end;

function KilogramPerQuarticMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerQuarticMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramPerQuarticMeterSymbol, cKilogramPerQuarticMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramPerQuarticMeterSymbol, APrefixes);
end;

function KilogramPerQuarticMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerQuarticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerQuarticMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerQuarticMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function QuarticMeterSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticMeterSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsQuarticMeterSecondSymbol, cQuarticMeterSecondPrefixes);
end;

function QuarticMeterSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticMeterSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsQuarticMeterSecondSymbol, cQuarticMeterSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsQuarticMeterSecondSymbol, APrefixes);
end;

function QuarticMeterSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticMeterSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function QuarticMeterSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uQuarticMeterSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerQuarticMeterPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerQuarticMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramPerQuarticMeterPerSecondSymbol, cKilogramPerQuarticMeterPerSecondPrefixes);
end;

function KilogramPerQuarticMeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerQuarticMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramPerQuarticMeterPerSecondSymbol, cKilogramPerQuarticMeterPerSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramPerQuarticMeterPerSecondSymbol, APrefixes);
end;

function KilogramPerQuarticMeterPerSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerQuarticMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerQuarticMeterPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramPerQuarticMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CubicMeterPerKilogramToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterPerKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCubicMeterPerKilogramSymbol, cCubicMeterPerKilogramPrefixes);
end;

function CubicMeterPerKilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterPerKilogram then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicMeterPerKilogramSymbol, cCubicMeterPerKilogramPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicMeterPerKilogramSymbol, APrefixes);
end;

function CubicMeterPerKilogramToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterPerKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicMeterPerKilogramToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterPerKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramSquareSecondSymbol, cKilogramSquareSecondPrefixes);
end;

function KilogramSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramSquareSecondSymbol, cKilogramSquareSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramSquareSecondSymbol, APrefixes);
end;

function KilogramSquareSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CubicMeterPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCubicMeterPerSquareSecondSymbol, cCubicMeterPerSquareSecondPrefixes);
end;

function CubicMeterPerSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicMeterPerSquareSecondSymbol, cCubicMeterPerSquareSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicMeterPerSquareSecondSymbol, APrefixes);
end;

function CubicMeterPerSquareSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsNewtonSquareMeterSymbol, cNewtonSquareMeterPrefixes);
end;

function NewtonSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonSquareMeterSymbol, cNewtonSquareMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonSquareMeterSymbol, APrefixes);
end;

function NewtonSquareMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramCubicMeterPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramCubicMeterPerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramCubicMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonCubicMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsNewtonCubicMeterSymbol, cNewtonCubicMeterPrefixes);
end;

function NewtonCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonCubicMeterSymbol, cNewtonCubicMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonCubicMeterSymbol, APrefixes);
end;

function NewtonCubicMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonCubicMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramQuarticMeterPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramQuarticMeterPerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramQuarticMeterPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonPerSquareKilogramToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsNewtonPerSquareKilogramSymbol, cNewtonPerSquareKilogramPrefixes);
end;

function NewtonPerSquareKilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonPerSquareKilogramSymbol, cNewtonPerSquareKilogramPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonPerSquareKilogramSymbol, APrefixes);
end;

function NewtonPerSquareKilogramToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonPerSquareKilogramToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterPerKilogramPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerKilogramPerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerKilogramPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareKilogramPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareKilogramPerMeterSymbol, cSquareKilogramPerMeterPrefixes);
end;

function SquareKilogramPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareKilogramPerMeterSymbol, cSquareKilogramPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareKilogramPerMeterSymbol, APrefixes);
end;

function SquareKilogramPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareKilogramPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareKilogramPerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareKilogramPerSquareMeterSymbol, cSquareKilogramPerSquareMeterPrefixes);
end;

function SquareKilogramPerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareKilogramPerSquareMeterSymbol, cSquareKilogramPerSquareMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareKilogramPerSquareMeterSymbol, APrefixes);
end;

function SquareKilogramPerSquareMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareKilogramPerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMeterPerSquareKilogramToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareMeterPerSquareKilogramSymbol, cSquareMeterPerSquareKilogramPrefixes);
end;

function SquareMeterPerSquareKilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterPerSquareKilogramSymbol, cSquareMeterPerSquareKilogramPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterPerSquareKilogramSymbol, APrefixes);
end;

function SquareMeterPerSquareKilogramToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMeterPerSquareKilogramToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonSquareMeterPerSquareKilogramToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeterPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsNewtonSquareMeterPerSquareKilogramSymbol, cNewtonSquareMeterPerSquareKilogramPrefixes);
end;

function NewtonSquareMeterPerSquareKilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeterPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonSquareMeterPerSquareKilogramSymbol, cNewtonSquareMeterPerSquareKilogramPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonSquareMeterPerSquareKilogramSymbol, APrefixes);
end;

function NewtonSquareMeterPerSquareKilogramToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeterPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonSquareMeterPerSquareKilogramToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeterPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CubicMeterPerKilogramPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeterPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicMeterPerKilogramPerSquareSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeterPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicMeterPerKilogramPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeterPerSquareKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ReciprocalKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsReciprocalKelvinSymbol, cReciprocalKelvinPrefixes);
end;

function ReciprocalKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalKelvinSymbol, cReciprocalKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalKelvinSymbol, APrefixes);
end;

function ReciprocalKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKilogramKelvinSymbol, cKilogramKelvinPrefixes);
end;

function KilogramKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramKelvinSymbol, cKilogramKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKilogramKelvinSymbol, APrefixes);
end;

function KilogramKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsJoulePerKelvinSymbol, cJoulePerKelvinPrefixes);
end;

function JoulePerKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsJoulePerKelvinSymbol, cJoulePerKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsJoulePerKelvinSymbol, APrefixes);
end;

function JoulePerKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramSquareMeterPerSquareSecondPerKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerSquareSecondPerKelvinVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerSquareSecondPerKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerKilogramPerKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKilogramPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsJoulePerKilogramPerKelvinSymbol, cJoulePerKilogramPerKelvinPrefixes);
end;

function JoulePerKilogramPerKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKilogramPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsJoulePerKilogramPerKelvinSymbol, cJoulePerKilogramPerKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsJoulePerKilogramPerKelvinSymbol, APrefixes);
end;

function JoulePerKilogramPerKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKilogramPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerKilogramPerKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKilogramPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMeterPerSquareSecondPerKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKilogramPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMeterPerSquareSecondPerKelvinVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKilogramPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMeterPerSquareSecondPerKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerKilogramPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterKelvinSymbol, cMeterKelvinPrefixes);
end;

function MeterKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterKelvinSymbol, cMeterKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterKelvinSymbol, APrefixes);
end;

function MeterKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KelvinPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvinPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKelvinPerMeterSymbol, cKelvinPerMeterPrefixes);
end;

function KelvinPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvinPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKelvinPerMeterSymbol, cKelvinPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKelvinPerMeterSymbol, APrefixes);
end;

function KelvinPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvinPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KelvinPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvinPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerMeterSymbol, cWattPerMeterPrefixes);
end;

function WattPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerMeterSymbol, cWattPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerMeterSymbol, APrefixes);
end;

function WattPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramMeterPerCubicSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramMeterPerCubicSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramMeterPerCubicSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerSquareMeterSymbol, cWattPerSquareMeterPrefixes);
end;

function WattPerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSquareMeterSymbol, cWattPerSquareMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSquareMeterSymbol, APrefixes);
end;

function WattPerSquareMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerCubicSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerCubicSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerCubicSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerCubicMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerCubicMeterSymbol, cWattPerCubicMeterPrefixes);
end;

function WattPerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerCubicMeterSymbol, cWattPerCubicMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerCubicMeterSymbol, APrefixes);
end;

function WattPerCubicMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerCubicMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerKelvinSymbol, cWattPerKelvinPrefixes);
end;

function WattPerKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerKelvinSymbol, cWattPerKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerKelvinSymbol, APrefixes);
end;

function WattPerKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramSquareMeterPerCubicSecondPerKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerCubicSecondPerKelvinVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramSquareMeterPerCubicSecondPerKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerMeterPerKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerMeterPerKelvinSymbol, cWattPerMeterPerKelvinPrefixes);
end;

function WattPerMeterPerKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerMeterPerKelvinSymbol, cWattPerMeterPerKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerMeterPerKelvinSymbol, APrefixes);
end;

function WattPerMeterPerKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerMeterPerKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramMeterPerCubicSecondPerKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramMeterPerCubicSecondPerKelvinVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramMeterPerCubicSecondPerKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KelvinPerWattToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvinPerWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKelvinPerWattSymbol, cKelvinPerWattPrefixes);
end;

function KelvinPerWattToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvinPerWatt then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKelvinPerWattSymbol, cKelvinPerWattPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKelvinPerWattSymbol, APrefixes);
end;

function KelvinPerWattToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvinPerWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KelvinPerWattToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKelvinPerWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterPerWattToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterPerWattSymbol, cMeterPerWattPrefixes);
end;

function MeterPerWattToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerWatt then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerWattSymbol, cMeterPerWattPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerWattSymbol, APrefixes);
end;

function MeterPerWattToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerWattToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterKelvinPerWattToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterKelvinPerWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterKelvinPerWattSymbol, cMeterKelvinPerWattPrefixes);
end;

function MeterKelvinPerWattToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterKelvinPerWatt then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterKelvinPerWattSymbol, cMeterKelvinPerWattPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterKelvinPerWattSymbol, APrefixes);
end;

function MeterKelvinPerWattToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterKelvinPerWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterKelvinPerWattToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterKelvinPerWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMeterKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareMeterKelvinSymbol, cSquareMeterKelvinPrefixes);
end;

function SquareMeterKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterKelvinSymbol, cSquareMeterKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterKelvinSymbol, APrefixes);
end;

function SquareMeterKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMeterKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerSquareMeterPerKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerSquareMeterPerKelvinSymbol, cWattPerSquareMeterPerKelvinPrefixes);
end;

function WattPerSquareMeterPerKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSquareMeterPerKelvinSymbol, cWattPerSquareMeterPerKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSquareMeterPerKelvinSymbol, APrefixes);
end;

function WattPerSquareMeterPerKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerSquareMeterPerKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KilogramPerCubicSecondPerKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerCubicSecondPerKelvinVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KilogramPerCubicSecondPerKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMeterQuarticKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareMeterQuarticKelvinSymbol, cSquareMeterQuarticKelvinPrefixes);
end;

function SquareMeterQuarticKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterQuarticKelvinSymbol, cSquareMeterQuarticKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterQuarticKelvinSymbol, APrefixes);
end;

function SquareMeterQuarticKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMeterQuarticKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerQuarticKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerQuarticKelvinSymbol, cWattPerQuarticKelvinPrefixes);
end;

function WattPerQuarticKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerQuarticKelvinSymbol, cWattPerQuarticKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerQuarticKelvinSymbol, APrefixes);
end;

function WattPerQuarticKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerQuarticKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerSquareMeterPerQuarticKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerSquareMeterPerQuarticKelvinSymbol, cWattPerSquareMeterPerQuarticKelvinPrefixes);
end;

function WattPerSquareMeterPerQuarticKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSquareMeterPerQuarticKelvinSymbol, cWattPerSquareMeterPerQuarticKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSquareMeterPerQuarticKelvinSymbol, APrefixes);
end;

function WattPerSquareMeterPerQuarticKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerSquareMeterPerQuarticKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerQuarticKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerMoleToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerMole then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsJoulePerMoleSymbol, cJoulePerMolePrefixes);
end;

function JoulePerMoleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerMole then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsJoulePerMoleSymbol, cJoulePerMolePrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsJoulePerMoleSymbol, APrefixes);
end;

function JoulePerMoleToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerMole then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerMoleToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerMole then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MoleKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMoleKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMoleKelvinSymbol, cMoleKelvinPrefixes);
end;

function MoleKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMoleKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMoleKelvinSymbol, cMoleKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMoleKelvinSymbol, APrefixes);
end;

function MoleKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMoleKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MoleKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMoleKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerMolePerKelvinToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerMolePerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsJoulePerMolePerKelvinSymbol, cJoulePerMolePerKelvinPrefixes);
end;

function JoulePerMolePerKelvinToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerMolePerKelvin then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsJoulePerMolePerKelvinSymbol, cJoulePerMolePerKelvinPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsJoulePerMolePerKelvinSymbol, APrefixes);
end;

function JoulePerMolePerKelvinToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerMolePerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerMolePerKelvinToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uJoulePerMolePerKelvin then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function OhmMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uOhmMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsOhmMeterSymbol, cOhmMeterPrefixes);
end;

function OhmMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uOhmMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsOhmMeterSymbol, cOhmMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsOhmMeterSymbol, APrefixes);
end;

function OhmMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uOhmMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function OhmMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uOhmMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function VoltPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsVoltPerMeterSymbol, cVoltPerMeterPrefixes);
end;

function VoltPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsVoltPerMeterSymbol, cVoltPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsVoltPerMeterSymbol, APrefixes);
end;

function VoltPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function VoltPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonPerCoulombToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonPerCoulombVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonPerCoulombToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CoulombPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCoulombPerMeterSymbol, cCoulombPerMeterPrefixes);
end;

function CoulombPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombPerMeterSymbol, cCoulombPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombPerMeterSymbol, APrefixes);
end;

function CoulombPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CoulombPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareCoulombPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareCoulombPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareCoulombPerMeterSymbol, cSquareCoulombPerMeterPrefixes);
end;

function SquareCoulombPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareCoulombPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareCoulombPerMeterSymbol, cSquareCoulombPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareCoulombPerMeterSymbol, APrefixes);
end;

function SquareCoulombPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareCoulombPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareCoulombPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareCoulombPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CoulombPerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCoulombPerSquareMeterSymbol, cCoulombPerSquareMeterPrefixes);
end;

function CoulombPerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombPerSquareMeterSymbol, cCoulombPerSquareMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombPerSquareMeterSymbol, APrefixes);
end;

function CoulombPerSquareMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CoulombPerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMeterPerSquareCoulombToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareMeterPerSquareCoulombSymbol, cSquareMeterPerSquareCoulombPrefixes);
end;

function SquareMeterPerSquareCoulombToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterPerSquareCoulombSymbol, cSquareMeterPerSquareCoulombPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterPerSquareCoulombSymbol, APrefixes);
end;

function SquareMeterPerSquareCoulombToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMeterPerSquareCoulombToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterPerSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonPerSquareCoulombToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsNewtonPerSquareCoulombSymbol, cNewtonPerSquareCoulombPrefixes);
end;

function NewtonPerSquareCoulombToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonPerSquareCoulombSymbol, cNewtonPerSquareCoulombPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonPerSquareCoulombSymbol, APrefixes);
end;

function NewtonPerSquareCoulombToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonPerSquareCoulombToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonPerSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonSquareMeterPerSquareCoulombToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeterPerSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsNewtonSquareMeterPerSquareCoulombSymbol, cNewtonSquareMeterPerSquareCoulombPrefixes);
end;

function NewtonSquareMeterPerSquareCoulombToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeterPerSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonSquareMeterPerSquareCoulombSymbol, cNewtonSquareMeterPerSquareCoulombPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsNewtonSquareMeterPerSquareCoulombSymbol, APrefixes);
end;

function NewtonSquareMeterPerSquareCoulombToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeterPerSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonSquareMeterPerSquareCoulombToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uNewtonSquareMeterPerSquareCoulomb then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function VoltMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsVoltMeterSymbol, cVoltMeterPrefixes);
end;

function VoltMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsVoltMeterSymbol, cVoltMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsVoltMeterSymbol, APrefixes);
end;

function VoltMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function VoltMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonSquareMeterPerCoulombToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonSquareMeterPerCoulombVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonSquareMeterPerCoulombToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function VoltMeterPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsVoltMeterPerSecondSymbol, cVoltMeterPerSecondPrefixes);
end;

function VoltMeterPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsVoltMeterPerSecondSymbol, cVoltMeterPerSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsVoltMeterPerSecondSymbol, APrefixes);
end;

function VoltMeterPerSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function VoltMeterPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uVoltMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function FaradPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFaradPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsFaradPerMeterSymbol, cFaradPerMeterPrefixes);
end;

function FaradPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFaradPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsFaradPerMeterSymbol, cFaradPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsFaradPerMeterSymbol, APrefixes);
end;

function FaradPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFaradPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function FaradPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uFaradPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function AmperePerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uAmperePerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsAmperePerMeterSymbol, cAmperePerMeterPrefixes);
end;

function AmperePerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uAmperePerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsAmperePerMeterSymbol, cAmperePerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsAmperePerMeterSymbol, APrefixes);
end;

function AmperePerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uAmperePerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function AmperePerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uAmperePerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterPerAmpereToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterPerAmpereSymbol, cMeterPerAmperePrefixes);
end;

function MeterPerAmpereToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerAmpere then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerAmpereSymbol, cMeterPerAmperePrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterPerAmpereSymbol, APrefixes);
end;

function MeterPerAmpereToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterPerAmpereToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterPerAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function TeslaMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTeslaMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsTeslaMeterSymbol, cTeslaMeterPrefixes);
end;

function TeslaMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTeslaMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsTeslaMeterSymbol, cTeslaMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsTeslaMeterSymbol, APrefixes);
end;

function TeslaMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTeslaMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function TeslaMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTeslaMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonPerAmpereToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTeslaMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonPerAmpereVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTeslaMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonPerAmpereToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTeslaMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function TeslaPerAmpereToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTeslaPerAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsTeslaPerAmpereSymbol, cTeslaPerAmperePrefixes);
end;

function TeslaPerAmpereToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTeslaPerAmpere then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsTeslaPerAmpereSymbol, cTeslaPerAmperePrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsTeslaPerAmpereSymbol, APrefixes);
end;

function TeslaPerAmpereToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTeslaPerAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function TeslaPerAmpereToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uTeslaPerAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function HenryPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenryPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsHenryPerMeterSymbol, cHenryPerMeterPrefixes);
end;

function HenryPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenryPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsHenryPerMeterSymbol, cHenryPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsHenryPerMeterSymbol, APrefixes);
end;

function HenryPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenryPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function HenryPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenryPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function TeslaMeterPerAmpereToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenryPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function TeslaMeterPerAmpereVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenryPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function TeslaMeterPerAmpereToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenryPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function NewtonPerSquareAmpereToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenryPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonPerSquareAmpereVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenryPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function NewtonPerSquareAmpereToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uHenryPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function RadianPerMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uRadianPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsRadianPerMeterSymbol, cRadianPerMeterPrefixes);
end;

function RadianPerMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uRadianPerMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsRadianPerMeterSymbol, cRadianPerMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsRadianPerMeterSymbol, APrefixes);
end;

function RadianPerMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uRadianPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function RadianPerMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uRadianPerMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareKilogramPerSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareKilogramPerSquareSecondSymbol, cSquareKilogramPerSquareSecondPrefixes);
end;

function SquareKilogramPerSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareKilogramPerSquareSecondSymbol, cSquareKilogramPerSquareSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareKilogramPerSquareSecondSymbol, APrefixes);
end;

function SquareKilogramPerSquareSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareKilogramPerSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareKilogramPerSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareSecondPerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecondPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareSecondPerSquareMeterSymbol, cSquareSecondPerSquareMeterPrefixes);
end;

function SquareSecondPerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecondPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareSecondPerSquareMeterSymbol, cSquareSecondPerSquareMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareSecondPerSquareMeterSymbol, APrefixes);
end;

function SquareSecondPerSquareMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecondPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareSecondPerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareSecondPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareJouleToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareJouleSymbol, cSquareJoulePrefixes);
end;

function SquareJouleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareJoule then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareJouleSymbol, cSquareJoulePrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareJouleSymbol, APrefixes);
end;

function SquareJouleToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareJouleToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareJoule then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JouleSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JouleSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JouleSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerHertzToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerHertzVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerHertzToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ElectronvoltSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ElectronvoltSecondVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ElectronvoltSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ElectronvoltMeterPerSpeedOfLightToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ElectronvoltMeterPerSpeedOfLightVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ElectronvoltMeterPerSpeedOfLightToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKilogramSquareMeterPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareJouleSquareSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareJouleSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareJouleSquareSecondSymbol, cSquareJouleSquareSecondPrefixes);
end;

function SquareJouleSquareSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareJouleSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareJouleSquareSecondSymbol, cSquareJouleSquareSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareJouleSquareSecondSymbol, APrefixes);
end;

function SquareJouleSquareSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareJouleSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareJouleSquareSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareJouleSquareSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CoulombPerKilogramToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCoulombPerKilogramSymbol, cCoulombPerKilogramPrefixes);
end;

function CoulombPerKilogramToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerKilogram then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombPerKilogramSymbol, cCoulombPerKilogramPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombPerKilogramSymbol, APrefixes);
end;

function CoulombPerKilogramToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CoulombPerKilogramToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerKilogram then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMeterAmpereToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareMeterAmpereSymbol, cSquareMeterAmperePrefixes);
end;

function SquareMeterAmpereToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterAmpere then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterAmpereSymbol, cSquareMeterAmperePrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterAmpereSymbol, APrefixes);
end;

function SquareMeterAmpereToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMeterAmpereToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function JoulePerTeslaToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerTeslaVerboseToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function JoulePerTeslaToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterAmpere then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function LumenPerWattToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumenPerWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsLumenPerWattSymbol, cLumenPerWattPrefixes);
end;

function LumenPerWattToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumenPerWatt then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsLumenPerWattSymbol, cLumenPerWattPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsLumenPerWattSymbol, APrefixes);
end;

function LumenPerWattToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumenPerWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function LumenPerWattToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uLumenPerWatt then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function ReciprocalMoleToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalMole then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsReciprocalMoleSymbol, cReciprocalMolePrefixes);
end;

function ReciprocalMoleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalMole then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalMoleSymbol, cReciprocalMolePrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsReciprocalMoleSymbol, APrefixes);
end;

function ReciprocalMoleToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalMole then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function ReciprocalMoleToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uReciprocalMole then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function AmperePerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uAmperePerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsAmperePerSquareMeterSymbol, cAmperePerSquareMeterPrefixes);
end;

function AmperePerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uAmperePerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsAmperePerSquareMeterSymbol, cAmperePerSquareMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsAmperePerSquareMeterSymbol, APrefixes);
end;

function AmperePerSquareMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uAmperePerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function AmperePerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uAmperePerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MolePerCubicMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMolePerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMolePerCubicMeterSymbol, cMolePerCubicMeterPrefixes);
end;

function MolePerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMolePerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMolePerCubicMeterSymbol, cMolePerCubicMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMolePerCubicMeterSymbol, APrefixes);
end;

function MolePerCubicMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMolePerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MolePerCubicMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMolePerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CandelaPerSquareMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCandelaPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCandelaPerSquareMeterSymbol, cCandelaPerSquareMeterPrefixes);
end;

function CandelaPerSquareMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCandelaPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCandelaPerSquareMeterSymbol, cCandelaPerSquareMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCandelaPerSquareMeterSymbol, APrefixes);
end;

function CandelaPerSquareMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCandelaPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CandelaPerSquareMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCandelaPerSquareMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CoulombPerCubicMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCoulombPerCubicMeterSymbol, cCoulombPerCubicMeterPrefixes);
end;

function CoulombPerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombPerCubicMeterSymbol, cCoulombPerCubicMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombPerCubicMeterSymbol, APrefixes);
end;

function CoulombPerCubicMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CoulombPerCubicMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function GrayPerSecondToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uGrayPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsGrayPerSecondSymbol, cGrayPerSecondPrefixes);
end;

function GrayPerSecondToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uGrayPerSecond then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsGrayPerSecondSymbol, cGrayPerSecondPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsGrayPerSecondSymbol, APrefixes);
end;

function GrayPerSecondToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uGrayPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function GrayPerSecondToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uGrayPerSecond then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SteradianHertzToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradianHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSteradianHertzSymbol, cSteradianHertzPrefixes);
end;

function SteradianHertzToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradianHertz then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSteradianHertzSymbol, cSteradianHertzPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSteradianHertzSymbol, APrefixes);
end;

function SteradianHertzToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradianHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SteradianHertzToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSteradianHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function MeterSteradianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsMeterSteradianSymbol, cMeterSteradianPrefixes);
end;

function MeterSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterSteradian then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterSteradianSymbol, cMeterSteradianPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsMeterSteradianSymbol, APrefixes);
end;

function MeterSteradianToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function MeterSteradianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uMeterSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMeterSteradianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareMeterSteradianSymbol, cSquareMeterSteradianPrefixes);
end;

function SquareMeterSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterSteradian then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterSteradianSymbol, cSquareMeterSteradianPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterSteradianSymbol, APrefixes);
end;

function SquareMeterSteradianToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMeterSteradianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CubicMeterSteradianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCubicMeterSteradianSymbol, cCubicMeterSteradianPrefixes);
end;

function CubicMeterSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterSteradian then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicMeterSteradianSymbol, cCubicMeterSteradianPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCubicMeterSteradianSymbol, APrefixes);
end;

function CubicMeterSteradianToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CubicMeterSteradianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCubicMeterSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function SquareMeterSteradianHertzToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterSteradianHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsSquareMeterSteradianHertzSymbol, cSquareMeterSteradianHertzPrefixes);
end;

function SquareMeterSteradianHertzToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterSteradianHertz then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterSteradianHertzSymbol, cSquareMeterSteradianHertzPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsSquareMeterSteradianHertzSymbol, APrefixes);
end;

function SquareMeterSteradianHertzToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterSteradianHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function SquareMeterSteradianHertzToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uSquareMeterSteradianHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerSteradianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerSteradianSymbol, cWattPerSteradianPrefixes);
end;

function WattPerSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSteradianSymbol, cWattPerSteradianPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSteradianSymbol, APrefixes);
end;

function WattPerSteradianToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerSteradianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerSteradianPerHertzToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSteradianPerHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerSteradianPerHertzSymbol, cWattPerSteradianPerHertzPrefixes);
end;

function WattPerSteradianPerHertzToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSteradianPerHertz then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSteradianPerHertzSymbol, cWattPerSteradianPerHertzPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSteradianPerHertzSymbol, APrefixes);
end;

function WattPerSteradianPerHertzToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSteradianPerHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerSteradianPerHertzToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSteradianPerHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerMeterPerSteradianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeterPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerMeterPerSteradianSymbol, cWattPerMeterPerSteradianPrefixes);
end;

function WattPerMeterPerSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeterPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerMeterPerSteradianSymbol, cWattPerMeterPerSteradianPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerMeterPerSteradianSymbol, APrefixes);
end;

function WattPerMeterPerSteradianToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeterPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerMeterPerSteradianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerMeterPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerSquareMeterPerSteradianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerSquareMeterPerSteradianSymbol, cWattPerSquareMeterPerSteradianPrefixes);
end;

function WattPerSquareMeterPerSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSquareMeterPerSteradianSymbol, cWattPerSquareMeterPerSteradianPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSquareMeterPerSteradianSymbol, APrefixes);
end;

function WattPerSquareMeterPerSteradianToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerSquareMeterPerSteradianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerCubicMeterPerSteradianToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerCubicMeterPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerCubicMeterPerSteradianSymbol, cWattPerCubicMeterPerSteradianPrefixes);
end;

function WattPerCubicMeterPerSteradianToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerCubicMeterPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerCubicMeterPerSteradianSymbol, cWattPerCubicMeterPerSteradianPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerCubicMeterPerSteradianSymbol, APrefixes);
end;

function WattPerCubicMeterPerSteradianToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerCubicMeterPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerCubicMeterPerSteradianToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerCubicMeterPerSteradian then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function WattPerSquareMeterPerSteradianPerHertzToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerSteradianPerHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsWattPerSquareMeterPerSteradianPerHertzSymbol, cWattPerSquareMeterPerSteradianPerHertzPrefixes);
end;

function WattPerSquareMeterPerSteradianPerHertzToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerSteradianPerHertz then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSquareMeterPerSteradianPerHertzSymbol, cWattPerSquareMeterPerSteradianPerHertzPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsWattPerSquareMeterPerSteradianPerHertzSymbol, APrefixes);
end;

function WattPerSquareMeterPerSteradianPerHertzToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerSteradianPerHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function WattPerSquareMeterPerSteradianPerHertzToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uWattPerSquareMeterPerSteradianPerHertz then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function KatalPerCubicMeterToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKatalPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsKatalPerCubicMeterSymbol, cKatalPerCubicMeterPrefixes);
end;

function KatalPerCubicMeterToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKatalPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKatalPerCubicMeterSymbol, cKatalPerCubicMeterPrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsKatalPerCubicMeterSymbol, APrefixes);
end;

function KatalPerCubicMeterToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKatalPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function KatalPerCubicMeterToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uKatalPerCubicMeter then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

function CoulombPerMoleToString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerMole then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := FloatToStr(AValue.FValue) + ' ' + GetSymbol(rsCoulombPerMoleSymbol, cCoulombPerMolePrefixes);
end;

function CoulombPerMoleToString(const AValue: TQuantity; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
var
  FactoredValue: double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerMole then;
    raise Exception.Create('Wrong units of measurements');
  FactoredValue := Value(APrefixes);
{$ELSE}
  FactoredValue := Value(APrefixes);
{$ENDIF}
  if Length(APrefixes) = 0 then
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombPerMoleSymbol, cCoulombPerMolePrefixes)
  else
    result := FloatToStrF(FactoredValue, ffGeneral, APrecision, ADigits) + ' ' + GetSymbol(rsCoulombPerMoleSymbol, APrefixes);
end;

function CoulombPerMoleToVerboseString(const AValue: TQuantity): string;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerMole then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := '';
end;

function CoulombPerMoleToFloat(const AValue: TQuantity): double;
begin
{$IFOPT D+}
  if AValue.FUnitOfMeasurement <> uCoulombPerMole then;
    raise Exception.Create('Wrong units of measurements');
{$ENDIF}
  result := 0;
end;

{ Helpers }

{ Power functions }

end.
