
interface

uses CL3, SysUtils;

type
  { Prefix }
  TPrefix = (pQuetta, pRonna, pYotta, pZetta, pExa, pPeta, pTera, pGiga, pMega, pKilo, pHecto, pDeca, 
    pNone, pDeci, pCenti, pMilli, pMicro, pNano, pPico, pFemto, pAtto, pZepto, pYocto, pRonto, pQuecto);

  { Prefixes } 
  TPrefixes = array of TPrefix; 

  { Exponents } 
  TExponents = array of longint;

  { TAScalar }

  {$IFDEF USEADIM}
  TAScalar = record
  private
    FUnitOfMeasurement: longint;
    FValue: double;
  public
    class operator + (const ASelf: TAScalar): TAScalar;
    class operator - (const ASelf: TAScalar): TAScalar;
    class operator + (const ALeft, ARight: TAScalar): TAScalar;
    class operator - (const ALeft, ARight: TAScalar): TAScalar;
    class operator * (const ALeft, ARight: TAScalar): TAScalar;
    class operator / (const ALeft, ARight: TAScalar): TAScalar;
    class operator * (const ALeft: double; const ARight: TAScalar): TAScalar;
    class operator / (const ALeft: double; const ARight: TAScalar): TAScalar;
    class operator * (const ALeft: TAScalar; const ARight: double): TAScalar;
    class operator / (const ALeft: TAScalar; const ARight: double): TAScalar;

    class operator = (const ALeft, ARight: TAScalar): boolean;
    class operator < (const ALeft, ARight: TAScalar): boolean;
    class operator > (const ALeft, ARight: TAScalar): boolean;
    class operator <=(const ALeft, ARight: TAScalar): boolean;
    class operator >=(const ALeft, ARight: TAScalar): boolean;
    class operator <>(const ALeft, ARight: TAScalar): boolean;
    class operator :=(const AValue: double): TAScalar;
  end;
  {$ELSE}
  TAScalar = double;
  {$ENDIF}

  { TAMultivector }

  {$IFDEF USEADIM}
  TAMultivector = record
  private
    FUnitOfMeasurement: longint;
    FValue: TMultivector;
  public
    class operator :=(const AValue: TAScalar): TAMultivector;
    class operator <>(const ALeft, ARight: TAMultivector): boolean;
    class operator <>(const ALeft: TAMultivector; const ARight: TAScalar): boolean;
    class operator <>(const ALeft: TAScalar; const ARight: TAMultivector): boolean;

    class operator = (const ALeft, ARight: TAMultivector): boolean;
    class operator = (const ALeft: TAMultivector; const ARight: TAScalar): boolean;
    class operator = (const ALeft: TAScalar; const ARight: TAMultivector): boolean;

    class operator + (const ALeft, ARight: TAMultivector): TAMultivector;
    class operator + (const ALeft: TAMultivector; const ARight: TAScalar): TAMultivector;
    class operator + (const ALeft: TAScalar; const ARight: TAMultivector): TAMultivector;

    class operator - (const ASelf: TAMultivector): TAMultivector;
    class operator - (const ALeft, ARight: TAMultivector): TAMultivector;
    class operator - (const ALeft: TAMultivector; const ARight: TAScalar): TAMultivector;
    class operator - (const ALeft: TAScalar; const ARight: TAMultivector): TAMultivector;

    class operator * (const ALeft, ARight: TAMultivector): TAMultivector;
    class operator * (const ALeft: TAMultivector; const ARight: TAScalar): TAMultivector;
    class operator * (const ALeft: TAScalar; const ARight: TAMultivector): TAMultivector;

    class operator / (const ALeft, ARight: TAMultivector): TAMultivector;
    class operator / (const ALeft: TAMultivector; const ARight: TAScalar): TAMultivector;
    class operator / (const ALeft: TAScalar; const ARight: TAMultivector): TAMultivector;
  end;
  {$ELSE}
  TAMultivector = TMultivector;
  {$ENDIF}

  { TATrivector }

  {$IFDEF USEADIM}
  TATrivector = record
  private
    FUnitOfMeasurement: longint;
    FValue: TTrivector;
  public
    class operator :=(const AValue: TATrivector): TAMultivector;
    class operator <>(const ALeft, ARight: TATrivector): boolean;
    class operator <>(const ALeft: TATrivector; const ARight: TAMultivector): boolean;
    class operator <>(const ALeft: TAMultivector; const ARight: TATrivector): boolean;

    class operator = (const ALeft, ARight: TATrivector): boolean;
    class operator = (const ALeft: TATrivector; const ARight: TAMultivector): boolean;
    class operator = (const ALeft: TAMultivector; const ARight: TATrivector): boolean;

    class operator + (const ALeft, ARight: TATrivector): TATrivector;
    class operator + (const ALeft: TATrivector; const ARight: TAScalar): TAMultivector;
    class operator + (const ALeft: TAScalar; const ARight: TATrivector): TAMultivector;
    class operator + (const ALeft: TATrivector; const ARight: TAMultivector): TAMultivector;
    class operator + (const ALeft: TAMultivector; const ARight: TATrivector): TAMultivector;

    class operator - (const ASelf: TATrivector): TATrivector;
    class operator - (const ALeft, ARight: TATrivector): TATrivector;
    class operator - (const ALeft: TATrivector; const ARight: TAScalar): TAMultivector;
    class operator - (const ALeft: TAScalar; const ARight: TATrivector): TAMultivector;
    class operator - (const ALeft: TATrivector; const ARight: TAMultivector): TAMultivector;
    class operator - (const ALeft: TAMultivector; const ARight: TATrivector): TAMultivector;

    class operator * (const ALeft, ARight: TATrivector): TAScalar;
    class operator * (const ALeft: TAScalar; const ARight: TATrivector): TATrivector;
    class operator * (const ALeft: TATrivector; const ARight: TAScalar): TATrivector;
    class operator * (const ALeft: TATrivector; const ARight: TAMultivector): TAMultivector;
    class operator * (const ALeft: TAMultivector; const ARight: TATrivector): TAMultivector;

    class operator / (const ALeft, ARight: TATrivector): TAScalar;
    class operator / (const ALeft: TATrivector; const ARight: TAScalar): TATrivector;
    class operator / (const ALeft: TAScalar; const ARight: TATrivector): TATrivector;
    class operator / (const ALeft: TATrivector; const ARight: TAMultivector): TAMultivector;
    class operator / (const ALeft: TAMultivector; const ARight: TATrivector): TAMultivector;
  end;
  {$ELSE}
  TATrivector = TTrivector;
  {$ENDIF}

  { TABivector }

  {$IFDEF USEADIM}
  TABivector = record
  private
    FUnitOfMeasurement: longint;
    FValue: TBivector;
  public
    class operator :=(const AValue: TABivector): TAMultivector;
    class operator <>(const ALeft, ARight: TABivector): boolean;
    class operator <>(const ALeft: TABivector; const ARight: TAMultivector): boolean;
    class operator <>(const ALeft: TAMultivector; const ARight: TABivector): boolean;

    class operator = (const ALeft, ARight: TABivector): boolean;
    class operator = (const ALeft: TABivector; const ARight: TAMultivector): boolean;
    class operator = (const ALeft: TAMultivector; const ARight: TABivector): boolean;

    class operator + (const ALeft, ARight: TABivector): TABivector;
    class operator + (const ALeft: TABivector; const ARight: TAScalar): TAMultivector;
    class operator + (const ALeft: TAScalar; const ARight: TABivector): TAMultivector;
    class operator + (const ALeft: TABivector; const ARight: TATrivector): TAMultivector;
    class operator + (const ALeft: TATrivector; const ARight: TABivector): TAMultivector;
    class operator + (const ALeft: TABivector; const ARight: TAMultivector): TAMultivector;
    class operator + (const ALeft: TAMultivector; const ARight: TABivector): TAMultivector;

    class operator - (const ASelf: TABivector): TABivector;
    class operator - (const ALeft, ARight: TABivector): TABivector;
    class operator - (const ALeft: TABivector; const ARight: TAScalar): TAMultivector;
    class operator - (const ALeft: TAScalar; const ARight: TABivector): TAMultivector;
    class operator - (const ALeft: TABivector; const ARight: TATrivector): TAMultivector;
    class operator - (const ALeft: TATrivector; const ARight: TABivector): TAMultivector;
    class operator - (const ALeft: TABivector; const ARight: TAMultivector): TAMultivector;
    class operator - (const ALeft: TAMultivector; const ARight: TABivector): TAMultivector;

    class operator * (const ALeft, ARight: TABivector): TAMultivector;
    class operator * (const ALeft: TAScalar; const ARight: TABivector): TABivector;
    class operator * (const ALeft: TABivector; const ARight: TAScalar): TABivector;
    class operator * (const ALeft: TABivector; const ARight: TAMultivector): TAMultivector;
    class operator * (const ALeft: TABivector; const ARight: TATrivector): TAMultivector;
    class operator * (const ALeft: TATrivector; const ARight: TABivector): TAMultivector;
    class operator * (const ALeft: TAMultivector; const ARight: TABivector): TAMultivector;

    class operator / (const ALeft, ARight: TABivector): TAMultivector;
    class operator / (const ALeft: TABivector; const ARight: TAScalar): TABivector;
    class operator / (const ALeft: TAScalar; const ARight: TABivector): TABivector;
    class operator / (const ALeft: TABivector; const ARight: TATrivector): TAMultivector;
    class operator / (const ALeft: TATrivector; const ARight: TABivector): TAMultivector;
    class operator / (const ALeft: TABivector; const ARight: TAMultivector): TAMultivector;
    class operator / (const ALeft: TAMultivector; const ARight: TABivector): TAMultivector;
  end;
  {$ELSE}
  TABivector = TBivector;
  {$ENDIF}

  { TAVector }

  {$IFDEF USEADIM}
  TAVector = record
  private
    FUnitOfMeasurement: longint;
    FValue: TVector;
  public
    class operator :=(const AValue: TAVector): TAMultivector;
    class operator <>(const ALeft, ARight: TAVector): boolean;
    class operator <>(const ALeft: TAVector; const ARight: TAMultivector): boolean;
    class operator <>(const ALeft: TAMultivector; const ARight: TAVector): boolean;

    class operator = (const ALeft, ARight: TAVector): boolean;
    class operator = (const ALeft: TAVector; const ARight: TAMultivector): boolean;
    class operator = (const ALeft: TAMultivector; const ARight: TAVector): boolean;

    class operator + (const ALeft, ARight: TAVector): TAVector;
    class operator + (const ALeft: TAVector; const ARight: TAScalar): TAMultivector;
    class operator + (const ALeft: TAScalar; const ARight: TAVector): TAMultivector;
    class operator + (const ALeft: TAVector; const ARight: TABivector): TAMultivector;
    class operator + (const ALeft: TABivector; const ARight: TAVector): TAMultivector;
    class operator + (const ALeft: TAVector; const ARight: TATrivector): TAMultivector;
    class operator + (const ALeft: TATrivector; const ARight: TAVector): TAMultivector;
    class operator + (const ALeft: TAVector; const ARight: TAMultivector): TAMultivector;
    class operator + (const ALeft: TAMultivector; const ARight: TAVector): TAMultivector;

    class operator - (const ASelf: TAVector): TAVector;
    class operator - (const ALeft, ARight: TAVector): TAVector;
    class operator - (const ALeft: TAVector; const ARight: TAScalar): TAMultivector;
    class operator - (const ALeft: TAScalar; const ARight: TAVector): TAMultivector;
    class operator - (const ALeft: TAVector; const ARight: TABivector): TAMultivector;
    class operator - (const ALeft: TABivector; const ARight: TAVector): TAMultivector;
    class operator - (const ALeft: TAVector; const ARight: TATrivector): TAMultivector;
    class operator - (const ALeft: TATrivector; const ARight: TAVector): TAMultivector;
    class operator - (const ALeft: TAVector; const ARight: TAMultivector): TAMultivector;
    class operator - (const ALeft: TAMultivector; const ARight: TAVector): TAMultivector;

    class operator * (const ALeft, ARight: TAVector): TAMultivector;
    class operator * (const ALeft: TAScalar; const ARight: TAVector): TAVector;
    class operator * (const ALeft: TAVector; const ARight: TAScalar): TAVector;
    class operator * (const ALeft: TAVector; const ARight: TABivector): TAMultivector;
    class operator * (const ALeft: TAVector; const ARight: TATrivector): TABivector;
    class operator * (const ALeft: TAVector; const ARight: TAMultivector): TAMultivector;
    class operator * (const ALeft: TABivector; const ARight: TAVector): TAMultivector;
    class operator * (const ALeft: TATrivector; const ARight: TAVector): TABivector;
    class operator * (const ALeft: TAMultivector; const ARight: TAVector): TAMultivector;

    class operator / (const ALeft: TAScalar; const ARight: TAVector): TAVector;
    class operator / (const ALeft: TAVector; const ARight: TAScalar): TAVector;
    class operator / (const ALeft, ARight: TAVector): TAMultivector;
    class operator / (const ALeft: TAVector; const ARight: TABivector): TAMultivector;
    class operator / (const ALeft: TAVector; const ARight: TATrivector): TABivector;
    class operator / (const ALeft: TAVector; const ARight: TAMultivector): TAMultivector;
    class operator / (const ALeft: TABivector; const ARight: TAVector): TAMultivector;
    class operator / (const ALeft: TATrivector; const ARight: TAVector): TABivector;
    class operator / (const ALeft: TAMultivector; const ARight: TAVector): TAMultivector;
  end;
  {$ELSE}
  TAVector = TVector;
  {$ENDIF}

  { TAMultivectorHelper }

  {$IFDEF USEADIM}
  TAMultivectorHelper = record helper for TAMultivector
    function Dual: TAMultivector;
    function Inverse: TAMultivector;
    function Reverse: TAMultivector;
    function Conjugate: TAMultivector;
    function Reciprocal: TAMultivector;
    function LeftReciprocal: TAMultivector;
    function Normalized: TAMultivector;
    function Norm: TAScalar;
    function SquaredNorm: TAScalar;

    function Dot(const AVector: TAVector): TAMultivector; overload;
    function Dot(const AVector: TABivector): TAMultivector; overload;
    function Dot(const AVector: TATrivector): TAMultivector; overload;
    function Dot(const AVector: TAMultivector): TAMultivector; overload;

    function Wedge(const AVector: TAVector): TAMultivector; overload;
    function Wedge(const AVector: TABivector): TAMultivector; overload;
    function Wedge(const AVector: TATrivector): TATrivector; overload;
    function Wedge(const AVector: TAMultivector): TAMultivector; overload;

    function Projection(const AVector: TAVector): TAMultivector; overload;
    function Projection(const AVector: TABivector): TAMultivector; overload;
    function Projection(const AVector: TATrivector): TAMultivector; overload;
    function Projection(const AVector: TAMultivector): TAMultivector; overload;

    function Rejection(const AVector: TAVector): TAMultivector; overload;
    function Rejection(const AVector: TABivector): TAMultivector; overload;
    function Rejection(const AVector: TATrivector): TAScalar; overload;
    function Rejection(const AVector: TAMultivector): TAMultivector; overload;

    function Reflection(const AVector: TAVector): TAMultivector; overload;
    function Reflection(const AVector: TABivector): TAMultivector; overload;
    function Reflection(const AVector: TATrivector): TAMultivector; overload;
    function Reflection(const AVector: TAMultivector): TAMultivector; overload;

    function Rotation(const AVector1, AVector2: TAVector): TAMultivector; overload;
    function Rotation(const AVector1, AVector2: TABivector): TAMultivector; overload;
    function Rotation(const AVector1, AVector2: TATrivector): TAMultivector; overload;
    function Rotation(const AVector1, AVector2: TAMultivector): TAMultivector;overload;

    function SameValue(const AVector: TAMultivector): boolean;
    function SameValue(const AVector: TATrivector): boolean;
    function SameValue(const AVector: TABivector): boolean;
    function SameValue(const AVector: TAVector): boolean;
    function SameValue(const AVector: TAScalar): boolean;

    function ExtractMultivector(AComponents: TMultivectorComponents): TAMultivector;
    function ExtractBivector(AComponents: TMultivectorComponents): TABivector;
    function ExtractVector(AComponents: TMultivectorComponents): TAVector;

    function ExtractTrivector: TATrivector;
    function ExtractBivector: TABivector;
    function ExtractVector: TAVector;
    function ExtractScalar: TAScalar;

    function IsNull: boolean;
    function IsScalar: boolean;
    function IsVector: boolean;
    function IsBiVector: boolean;
    function IsTrivector: boolean;
    function IsA: string;
  end;
  {$ENDIF}

  { TATrivectorHelper }

  {$IFDEF USEADIM}
  TATrivectorHelper = record helper for TATrivector
    function Dual: TAScalar;
    function Inverse: TATrivector;
    function Reverse: TATrivector;
    function Conjugate: TATrivector;
    function Reciprocal: TATrivector;
    function Normalized: TATrivector;
    function Norm: TAScalar;
    function SquaredNorm: TAScalar;

    function Dot(const AVector: TAVector): TABivector; overload;
    function Dot(const AVector: TABivector): TAVector; overload;
    function Dot(const AVector: TATrivector): TAScalar; overload;
    function Dot(const AVector: TAMultivector): TAMultivector; overload;

    function Wedge(const AVector: TAVector): TAScalar; overload;
    function Wedge(const AVector: TABivector): TAScalar; overload;
    function Wedge(const AVector: TATrivector): TAScalar; overload;
    function Wedge(const AVector: TAMultivector): TATrivector; overload;

    function Projection(const AVector: TAVector): TATrivector; overload;
    function Projection(const AVector: TABivector): TATrivector; overload;
    function Projection(const AVector: TATrivector): TATrivector; overload;
    function Projection(const AVector: TAMultivector): TATrivector; overload;

    function Rejection(const AVector: TAVector): TAScalar; overload;
    function Rejection(const AVector: TABivector): TAScalar; overload;
    function Rejection(const AVector: TATrivector): TAScalar; overload;
    function Rejection(const AVector: TAMultivector): TAMultivector; overload;

    function Reflection(const AVector: TAVector): TATrivector; overload;
    function Reflection(const AVector: TABivector): TATrivector; overload;
    function Reflection(const AVector: TATrivector): TATrivector; overload;
    function Reflection(const AVector: TAMultivector): TATrivector; overload;

    function Rotation(const AVector1, AVector2: TAVector): TATrivector; overload;
    function Rotation(const AVector1, AVector2: TABivector): TATrivector; overload;
    function Rotation(const AVector1, AVector2: TATrivector): TATrivector; overload;
    function Rotation(const AVector1, AVector2: TAMultivector): TATrivector; overload;

    function SameValue(const AVector: TAMultivector): boolean;
    function SameValue(const AVector: TATrivector): boolean;

    function ToMultivector: TAMultivector;
  end;
  {$ENDIF}

  { TABivectorHelper }

  {$IFDEF USEADIM}
  TABivectorHelper = record helper for TABivector
    function Dual: TAVector;
    function Inverse: TABivector;
    function Reverse: TABivector;
    function Conjugate: TABivector;
    function Reciprocal: TABivector;
    function Normalized: TABivector;
    function Norm: TAScalar;
    function SquaredNorm: TAScalar;

    function Dot(const AVector: TAVector): TAVector; overload;
    function Dot(const AVector: TABivector): TAScalar; overload;
    function Dot(const AVector: TATrivector): TAVector; overload;
    function Dot(const AVector: TAMultivector): TAMultivector; overload;

    function Wedge(const AVector: TAVector): TATrivector; overload;
    function Wedge(const AVector: TABivector): TAScalar; overload;
    function Wedge(const AVector: TATrivector): TAScalar; overload;
    function Wedge(const AVector: TAMultivector): TAMultivector; overload;

    function Projection(const AVector: TAVector): TABivector; overload;
    function Projection(const AVector: TABivector): TABivector; overload;
    function Projection(const AVector: TATrivector): TABivector; overload;
    function Projection(const AVector: TAMultivector): TAMultivector; overload;

    function Rejection(const AVector: TAVector): TABivector; overload;
    function Rejection(const AVector: TABivector): TAScalar; overload;
    function Rejection(const AVector: TATrivector): TAScalar; overload;
    function Rejection(const AVector: TAMultivector): TAMultivector; overload;

    function Reflection(const AVector: TAVector): TABivector; overload;
    function Reflection(const AVector: TABivector): TABivector; overload;
    function Reflection(const AVector: TATrivector): TABivector; overload;
    function Reflection(const AVector: TAMultivector): TAMultivector; overload;

    function Rotation(const AVector1, AVector2: TAVector): TABivector; overload;
    function Rotation(const AVector1, AVector2: TABivector): TABivector; overload;
    function Rotation(const AVector1, AVector2: TATrivector): TABivector; overload;
    function Rotation(const AVector1, AVector2: TAMultivector): TAMultivector; overload;

    function SameValue(const AVector: TAMultivector): boolean;
    function SameValue(const AVector: TABivector): boolean;

    function ExtractBivector(AComponents: TMultivectorComponents): TABivector;

    function ToMultivector: TAMultivector;
  end;
  {$ENDIF}

  { TAVectorHelper }

  {$IFDEF USEADIM}
  TAVectorHelper = record helper for TAVector
    function Dual: TABivector;
    function Inverse: TAVector;
    function Reverse: TAVector;
    function Conjugate: TAVector;
    function Reciprocal: TAVector;
    function Normalized: TAVector;
    function Norm: TAScalar;
    function SquaredNorm: TAScalar;

    function Dot(const AVector: TAVector): TAScalar; overload;
    function Dot(const AVector: TABivector): TAVector; overload;
    function Dot(const AVector: TATrivector): TABivector; overload;
    function Dot(const AVector: TAMultivector): TAMultivector; overload;

    function Wedge(const AVector: TAVector): TABivector; overload;
    function Wedge(const AVector: TABivector): TATrivector; overload;
    function Wedge(const AVector: TATrivector): TAScalar; overload;
    function Wedge(const AVector: TAMultivector): TAMultivector; overload;

    function Cross(const AVector: TAVector): TAVector;

    function Projection(const AVector: TAVector): TAVector; overload;
    function Projection(const AVector: TABivector): TAVector; overload;
    function Projection(const AVector: TATrivector): TAVector; overload;
    function Projection(const AVector: TAMultivector): TAMultivector; overload;

    function Rejection(const AVector: TAVector): TAVector; overload;
    function Rejection(const AVector: TABivector): TAVector; overload;
    function Rejection(const AVector: TATrivector): TAScalar; overload;
    function Rejection(const AVector: TAMultivector): TAMultivector; overload;

    function Reflection(const AVector: TAVector): TAVector; overload;
    function Reflection(const AVector: TABivector): TAVector; overload;
    function Reflection(const AVector: TATrivector): TAVector; overload;
    function Reflection(const AVector: TAMultivector): TAMultivector; overload;

    function Rotation(const AVector1, AVector2: TAVector): TAVector; overload;
    function Rotation(const AVector1, AVector2: TABivector): TAVector; overload;
    function Rotation(const AVector1, AVector2: TATrivector): TAVector; overload;
    function Rotation(const AVector1, AVector2: TAMultivector): TAMultivector; overload;

    function SameValue(const AVector: TAMultivector): boolean;
    function SameValue(const AVector: TAVector): boolean;

    function ExtractVector(AComponents: TMultivectorComponents): TAVector;

    function ToMultivector: TAMultivector;
  end;
  {$ENDIF}

  { TUnit }

  generic TUnit<U> = record
    type TSelf = specialize TUnit<U>;
  public
    function GetName(const Prefixes: TPrefixes): string;
    function GetPluralName(const Prefixes: TPrefixes): string;
    function GetSymbol(const Prefixes: TPrefixes): string;
    function GetValue(const AQuantity: double; const APrefixes: TPrefixes): double;
  public
    procedure Check(var AQuantity: TAScalar);
    function ToFloat(const AQuantity: TAScalar): double;
    function ToFloat(const AQuantity: TAScalar; const APrefixes: TPrefixes): double;
    function ToString(const AQuantity: TAScalar): string;
    function ToString(const AQuantity: TAScalar; const APrefixes: TPrefixes): string;
    function ToString(const AQuantity: TAScalar; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
    function ToString(const AQuantity, ATolerance: TAScalar; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
    function ToVerboseString(const AQuantity: TAScalar): string;
    function ToVerboseString(const AQuantity: TAScalar; const APrefixes: TPrefixes): string;
    function ToVerboseString(const AQuantity: TAScalar; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
    function ToVerboseString(const AQuantity, ATolerance: TAScalar; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;

    function ToString(const AQuantity: TAVector): string;
    function ToString(const AQuantity: TABivector): string;
    function ToString(const AQuantity: TATrivector): string;
    function ToString(const AQuantity: TAMultivector): string;

    function ToVerboseString(const AQuantity: TAVector): string;
    function ToVerboseString(const AQuantity: TABivector): string;
    function ToVerboseString(const AQuantity: TATrivector): string;
    function ToVerboseString(const AQuantity: TAMultivector): string;

    class operator *(const AQuantity: double; const ASelf: TSelf): TAScalar; inline;
    class operator /(const AQuantity: double; const ASelf: TSelf): TAScalar; inline;
    class operator *(const AQuantity: TVector; const ASelf: TSelf): TAVector; inline;
    class operator /(const AQuantity: TVector; const ASelf: TSelf): TAVector; inline;
    class operator *(const AQuantity: TBivector; const ASelf: TSelf): TABivector; inline;
    class operator /(const AQuantity: TBivector; const ASelf: TSelf): TABivector; inline;
    class operator *(const AQuantity: TTrivector; const ASelf: TSelf): TATrivector; inline;
    class operator /(const AQuantity: TTrivector; const ASelf: TSelf): TATrivector; inline;
    class operator *(const AQuantity: TMultivector; const ASelf: TSelf): TAMultivector; inline;
    class operator /(const AQuantity: TMultivector; const ASelf: TSelf): TAMultivector; inline;
  {$IFDEF USEADIM}
    class operator *(const AQuantity: TAScalar; const ASelf: TSelf): TAScalar; inline;
    class operator /(const AQuantity: TAScalar; const ASelf: TSelf): TAScalar; inline;
    class operator *(const AQuantity: TAVector; const ASelf: TSelf): TAVector; inline;
    class operator /(const AQuantity: TAVector; const ASelf: TSelf): TAVector; inline;
    class operator *(const AQuantity: TABivector; const ASelf: TSelf): TABivector; inline;
    class operator /(const AQuantity: TABivector; const ASelf: TSelf): TABivector; inline;
    class operator *(const AQuantity: TATrivector; const ASelf: TSelf): TATrivector; inline;
    class operator /(const AQuantity: TATrivector; const ASelf: TSelf): TATrivector; inline;
    class operator *(const AQuantity: TAMultivector; const ASelf: TSelf): TAMultivector; inline;
    class operator /(const AQuantity: TAMultivector; const ASelf: TSelf): TAMultivector; inline;
  {$ENDIF}
  end;

  { TFactoredUnit }

  generic TFactoredUnit<U> = record
    type TSelf = specialize TFactoredUnit<U>;
  public
    function GetName(const Prefixes: TPrefixes): string;
    function GetPluralName(const Prefixes: TPrefixes): string;
    function GetSymbol(const Prefixes: TPrefixes): string;
    function GetValue(const AQuantity: double; const APrefixes: TPrefixes): double;
  public
    procedure Check(var AQuantity: TAScalar);
    function ToFloat(const AQuantity: TAScalar): double;
    function ToFloat(const AQuantity: TAScalar; const APrefixes: TPrefixes): double;
    function ToString(const AQuantity: TAScalar): string;
    function ToString(const AQuantity: TAScalar; const APrefixes: TPrefixes): string;
    function ToString(const AQuantity: TAScalar; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
    function ToString(const AQuantity, ATolerance: TAScalar; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
    function ToVerboseString(const AQuantity: TAScalar): string;
    function ToVerboseString(const AQuantity: TAScalar; const APrefixes: TPrefixes): string;
    function ToVerboseString(const AQuantity: TAScalar; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
    function ToVerboseString(const AQuantity, ATolerance: TAScalar; APrecision, ADigits: longint; const APrefixes: TPrefixes): string;
    class operator *(const AQuantity: double; const ASelf: TSelf): TAScalar; inline;
    class operator /(const AQuantity: double; const ASelf: TSelf): TAScalar; inline;
    class operator *(const AQuantity: TVector; const ASelf: TSelf): TAVector; inline;
    class operator /(const AQuantity: TVector; const ASelf: TSelf): TAVector; inline;
    class operator *(const AQuantity: TBivector; const ASelf: TSelf): TABivector; inline;
    class operator /(const AQuantity: TBivector; const ASelf: TSelf): TABivector; inline;
    class operator *(const AQuantity: TTrivector; const ASelf: TSelf): TATrivector; inline;
    class operator /(const AQuantity: TTrivector; const ASelf: TSelf): TATrivector; inline;
    class operator *(const AQuantity: TMultivector; const ASelf: TSelf): TAMultivector; inline;
    class operator /(const AQuantity: TMultivector; const ASelf: TSelf): TAMultivector; inline;

    function ToString(const AQuantity: TAVector): string;
    function ToString(const AQuantity: TABivector): string;
    function ToString(const AQuantity: TATrivector): string;
    function ToString(const AQuantity: TAMultivector): string;

    function ToVerboseString(const AQuantity: TAVector): string;
    function ToVerboseString(const AQuantity: TABivector): string;
    function ToVerboseString(const AQuantity: TATrivector): string;
    function ToVerboseString(const AQuantity: TAMultivector): string;

  {$IFDEF USEADIM}
    class operator *(const AQuantity: TAScalar; const ASelf: TSelf): TAScalar; inline;
    class operator /(const AQuantity: TAScalar; const ASelf: TSelf): TAScalar; inline;
    class operator *(const AQuantity: TAVector; const ASelf: TSelf): TAVector; inline;
    class operator /(const AQuantity: TAVector; const ASelf: TSelf): TAVector; inline;
    class operator *(const AQuantity: TABivector; const ASelf: TSelf): TABivector; inline;
    class operator /(const AQuantity: TABivector; const ASelf: TSelf): TABivector; inline;
    class operator *(const AQuantity: TATrivector; const ASelf: TSelf): TATrivector; inline;
    class operator /(const AQuantity: TATrivector; const ASelf: TSelf): TATrivector; inline;
    class operator *(const AQuantity: TAMultivector; const ASelf: TSelf): TAMultivector; inline;
    class operator /(const AQuantity: TAMultivector; const ASelf: TSelf): TAMultivector; inline;
  {$ENDIF}
  end;

